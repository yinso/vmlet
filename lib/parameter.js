// Generated by CoffeeScript 1.4.0
(function() {
  var Parameter, ParameterList, errorlet, loglet,
    __slice = [].slice;

  loglet = require('loglet');

  errorlet = require('errorlet');

  Parameter = (function() {

    function Parameter(name, type, _default) {
      this.name = name;
      this.type = type != null ? type : null;
      this["default"] = _default != null ? _default : null;
    }

    Parameter.prototype.isRequired = function() {
      return !this["default"];
    };

    Parameter.prototype.equals = function(p) {
      if (!p instanceof Parameter) {
        return false;
      }
      if (!this.type === p.type) {
        return false;
      }
      if (this.isRequired() !== p.isRequired()) {
        return false;
      }
      if (this["default"]) {
        return this["default"].equals(p["default"]);
      } else {
        return true;
      }
    };

    Parameter.prototype.isa = function(v) {
      if (this.type === null) {
        return true;
      } else {
        return true;
      }
    };

    Parameter.prototype.inspect = function() {
      return this.toString();
    };

    Parameter.prototype.toString = function() {
      return "<" + this.name + " " + this.type + " " + this["default"] + ">";
    };

    return Parameter;

  })();

  ParameterList = (function() {

    ParameterList.make = function(params) {
      if (params == null) {
        params = [];
      }
      return new this(params);
    };

    ParameterList.makeParam = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Parameter, args, function(){});
    };

    function ParameterList(params) {
      this.params = params != null ? params : [];
    }

    ParameterList.prototype.add = function(param) {
      return this.params.push(param);
    };

    ParameterList.prototype.equals = function(list) {
      var i, p1, p2, _i, _ref;
      if (!list instanceof ParameterList) {
        return false;
      }
      if (this.params.length !== list.params.length) {
        return false;
      }
      for (i = _i = 0, _ref = this.params.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        p1 = this.params[i];
        p2 = list.params[i];
        if (!p1.equals(p2)) {
          return false;
        }
      }
      return true;
    };

    ParameterList.prototype.requiredCount = function() {
      var count, param, _i, _len, _ref;
      count = 0;
      _ref = this.params;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        param = _ref[_i];
        if (param.isRequired()) {
          count += 1;
        }
      }
      return count;
    };

    /*
      normalize optional arguments. this allows for optional arguments to exist in the middle of a list.
      a , b = null , c
      [ 1 , 2 ] => {a: 1 , b: null, c: 2}
    */


    ParameterList.prototype._normalize = function(args, update) {
      var i, j, optionalCount, optionalUsed, param, requiredCount, _i, _ref, _results;
      requiredCount = this.requiredCount();
      if (args.length < requiredCount) {
        throw errorlet.create({
          error: 'insufficient_required_arguments',
          "arguments": args,
          required: requiredCount
        });
      }
      optionalCount = args.length - requiredCount;
      optionalUsed = 0;
      j = 0;
      _results = [];
      for (i = _i = 0, _ref = this.params.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        param = this.params[i];
        if (param.isRequired()) {
          update(param, args[j]);
          _results.push(j++);
        } else if (optionalUsed < optionalCount) {
          update(param, args[j]);
          optionalUsed++;
          _results.push(j++);
        } else {
          _results.push(update(param, null));
        }
      }
      return _results;
    };

    ParameterList.prototype.normalize = function(args) {
      var result, update;
      if (args == null) {
        args = [];
      }
      result = {};
      update = function(param, val) {
        return result[param.name] = val;
      };
      this._normalize(args, update);
      return result;
    };

    ParameterList.prototype.normalizeArray = function(args) {
      var result, update;
      if (args == null) {
        args = [];
      }
      result = [];
      update = function(param, val) {
        return result.push(val);
      };
      this._normalize(args, update);
      return result;
    };

    ParameterList.prototype.inspect = function() {
      return this.toString();
    };

    ParameterList.prototype.toString = function() {
      var p;
      return '(' + ((function() {
        var _i, _len, _ref, _results;
        _ref = this.params;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _results.push(p.toString());
        }
        return _results;
      }).call(this)).join(', ') + ')';
    };

    return ParameterList;

  })();

  module.exports = ParameterList;

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var AST, get, register, transform, transformBlock, transformIf, transformLocal, transformScalar, types;

  AST = require('./ast');

  types = {};

  register = function(ast, transformer) {
    if (types.hasOwnProperty(ast.type)) {
      throw errorlet.create({
        error: 'CPS.duplicate_ast_type',
        type: ast.type
      });
    } else {
      return types[ast.type] = transformer;
    }
  };

  get = function(ast) {
    if (types.hasOwnProperty(ast.type())) {
      return types[ast.type()];
    } else {
      throw errorlet.create({
        error: 'CPS.unsupported_as_type',
        type: ast
      });
    }
  };

  transform = function(ast) {
    var transformer;
    transformer = get(ast);
    return transformer(ast);
  };

  transformScalar = function(ast) {
    return ast;
  };

  register(AST.get('number'), transformScalar);

  register(AST.get('bool'), transformScalar);

  register(AST.get('null'), transformScalar);

  register(AST.get('symbol'), transformScalar);

  register(AST.get('string'), transformScalar);

  register(AST.get('binary'), transformScalar);

  register(AST.get('member'), transformScalar);

  register(AST.get('procedure'), transformScalar);

  register(AST.get('proxyval'), transformScalar);

  register(AST.get('ref'), transformScalar);

  register(AST.get('funcall'), transformScalar);

  register(AST.get('array'), transformScalar);

  register(AST.get('object'), transformScalar);

  transformBlock = function(ast) {
    var i, item, items, _i, _len, _ref;
    items = [];
    _ref = ast.items;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      item = _ref[i];
      items.push(transform(item));
    }
    return AST.block(items);
  };

  register(AST.get('block'), transformBlock);

  transformLocal = function(ast) {
    var val;
    val = transform(ast.normalized());
    return ast.clone(val);
  };

  register(AST.get('local'), transformLocal);

  transformIf = function(ast) {};

  module.exports = {
    transform: transform,
    register: register
  };

}).call(this);

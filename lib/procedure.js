// Generated by CoffeeScript 1.4.0
(function() {
  var ApplyOpcode, CodeBlock, Environment, FuncallOpcode, Opcode, ParamListOpcode, ParamOpCode, ParameterList, Procedure, ProcedureOpcode, ShowEnvOpcode, TailcallOpcode, TraceOpcode, UnTraceOpcode, baseEnv, fib2, loglet,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  CodeBlock = require('./codeblock');

  ParameterList = require('./parameter');

  Opcode = require('./opcode');

  Environment = require('./environment');

  baseEnv = require('./baseenv');

  loglet = require('loglet');

  Procedure = (function(_super) {

    __extends(Procedure, _super);

    Procedure.makeParams = function(params) {
      if (params == null) {
        params = [];
      }
      return ParameterList.make(params);
    };

    Procedure.makeParam = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return ParameterList.makeParam.apply(ParameterList, args);
    };

    Procedure.makeFrameProc = function(proc) {
      proc.__vmlet.frameProc = true;
      return proc;
    };

    Procedure.make = function() {
      var args, inner, outer;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      inner = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(this, args, function(){});
      outer = function() {
        var arg, args, cb, code, _i, _j, _len;
        args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
        code = new CodeBlock();
        for (_j = 0, _len = args.length; _j < _len; _j++) {
          arg = args[_j];
          code.push(arg);
        }
        code.push(inner).funcall(args.length);
        return new Task(code, cb);
      };
      outer.__vmlet = {
        procedure: inner
      };
      return outer;
    };

    function Procedure(name, params, body, returns) {
      this.name = name;
      this.params = params;
      if (body == null) {
        body = null;
      }
      this.returns = returns != null ? returns : null;
      if (body) {
        this.setBody(body);
      }
    }

    Procedure.prototype.setBody = function(body) {
      this.items = body.items;
      this["catch"] = body["catch"];
      this["finally"] = body["finally"];
      return this.length = body.length;
    };

    Procedure.prototype.inspect = function() {
      return this.toString();
    };

    Procedure.prototype.toString = function() {
      var buffer;
      buffer = [];
      if (this.name) {
        buffer.push(this.name);
      }
      buffer.push(this.params.toString());
      buffer.push(this.items.toString());
      return '#{func ' + buffer.join(' ') + '}';
    };

    Procedure.prototype.normalizeArguments = function(args) {
      return this.params.normalize(args);
    };

    return Procedure;

  })(CodeBlock);

  Opcode.register('param', ParamOpCode = (function(_super) {

    __extends(ParamOpCode, _super);

    function ParamOpCode(type) {
      this.type = type;
    }

    ParamOpCode.prototype.run = function(frame) {
      var args;
      args = frame.popN(this.type);
      frame.push(ParameterList.makeParam.apply(ParameterList, args));
      return frame.incIP();
    };

    ParamOpCode.prototype.equals = function(op) {
      return op instanceof ParamOpcode && this.type === op.type;
    };

    ParamOpCode.prototype.toString = function() {
      return "[param " + this.type + "]";
    };

    return ParamOpCode;

  })(Opcode));

  Opcode.register('paramList', ParamListOpcode = (function(_super) {

    __extends(ParamListOpcode, _super);

    function ParamListOpcode(count) {
      this.count = count;
    }

    ParamListOpcode.prototype.run = function(frame) {
      var params;
      params = frame.popN(this.count);
      frame.push(ParameterList.make(params));
      return frame.incIP();
    };

    ParamListOpcode.prototype.equals = function(op) {
      return op instanceof ParamListOpcode && this.count === op.count;
    };

    ParamListOpcode.prototype.toString = function() {
      return "[paramList " + this.count + "]";
    };

    return ParamListOpcode;

  })(Opcode));

  Opcode.registerSingleton('procedure', ProcedureOpcode = (function(_super) {

    __extends(ProcedureOpcode, _super);

    function ProcedureOpcode() {
      return ProcedureOpcode.__super__.constructor.apply(this, arguments);
    }

    ProcedureOpcode.prototype.run = function(frame) {
      var body, name, params, _ref;
      _ref = frame.popN(3), name = _ref[0], params = _ref[1], body = _ref[2];
      frame.push(new Procedure(name, params, body));
      return frame.incIP();
    };

    ProcedureOpcode.prototype.toString = function() {
      return '[procedure]';
    };

    return ProcedureOpcode;

  })(Opcode));

  Opcode.register('funcall', FuncallOpcode = (function(_super) {

    __extends(FuncallOpcode, _super);

    function FuncallOpcode(count) {
      this.count = count;
    }

    FuncallOpcode.prototype.run = function(frame) {
      var args, proc;
      proc = frame.pop();
      args = frame.popN(this.count);
      return this._run(frame, proc, args);
    };

    FuncallOpcode.prototype._run = function(frame, proc, args) {
      var _ref, _ref1;
      if (proc instanceof Procedure) {
        return this._runProcedure(frame, proc, args);
      } else if (typeof proc === 'function' || proc instanceof Function) {
        if (((_ref = proc.__vmlet) != null ? _ref.procedure : void 0) instanceof Procedure) {
          return this._runProcedure(frame, proc.__vmlet.procedure, args);
        } else if ((_ref1 = proc.__vmlet) != null ? _ref1.frameFunc : void 0) {
          return proc.apply(null, [frame].concat(__slice.call(args)));
        } else {
          frame.push(proc.apply(null, args));
          return frame.incIP();
        }
      } else {
        return frame["throw"](errorlet.create({
          error: 'not_a_procedure',
          procedure: proc
        }));
      }
    };

    FuncallOpcode.prototype._runProcedure = function(frame, proc, args) {
      frame.task.pushFrame(proc);
      frame.task.top.pushArguments(proc.normalizeArguments(args));
      return frame.incIP(1, false);
    };

    FuncallOpcode.prototype.equals = function(op) {
      return op instanceof FuncallOpcode && this.count === op.count;
    };

    FuncallOpcode.prototype.toString = function() {
      return "[funcall " + this.count + "]";
    };

    return FuncallOpcode;

  })(Opcode));

  Opcode.register('tailcall', TailcallOpcode = (function(_super) {

    __extends(TailcallOpcode, _super);

    function TailcallOpcode() {
      return TailcallOpcode.__super__.constructor.apply(this, arguments);
    }

    TailcallOpcode.prototype._runProcedure = function(frame, proc, args) {
      if (frame.prev) {
        frame.task.popFrame();
      }
      frame.task.pushFrame(proc);
      frame.task.top.pushArguments(proc.normalizeArguments(args));
      return frame.incIP(1, false);
    };

    TailcallOpcode.prototype.equals = function(op) {
      return op instanceof TailcallOpcode && this.count === op.count;
    };

    TailcallOpcode.prototype.toString = function() {
      return "[tailcall " + this.count + "]";
    };

    return TailcallOpcode;

  })(FuncallOpcode));

  Opcode.registerSingleton('apply', ApplyOpcode = (function(_super) {

    __extends(ApplyOpcode, _super);

    function ApplyOpcode() {
      return ApplyOpcode.__super__.constructor.apply(this, arguments);
    }

    ApplyOpcode.prototype.run = function(frame) {
      var args, proc;
      proc = frame.pop();
      args = frame.pop();
      if (!args instanceof Array) {
        return frame["throw"](errorlet.create({
          error: 'opcode_apply_args_must_be_array',
          args: args
        }));
      }
      return this._run(frame, proc, args);
    };

    ApplyOpcode.prototype.toString = function() {
      return '[apply]';
    };

    return ApplyOpcode;

  })(FuncallOpcode));

  Opcode.registerSingleton('trace', TraceOpcode = (function(_super) {

    __extends(TraceOpcode, _super);

    function TraceOpcode() {
      return TraceOpcode.__super__.constructor.apply(this, arguments);
    }

    TraceOpcode.prototype.run = function(frame) {
      var proc;
      proc = frame.pop();
      if (proc.__vmlet) {
        proc.__vmlet.trace = true;
      } else {
        proc.__vmlet = {
          trace: true
        };
      }
      frame.push(void 0);
      return frame.incIP();
    };

    TraceOpcode.prototype.toString = function() {
      return '[trace]';
    };

    return TraceOpcode;

  })(Opcode));

  CodeBlock.prototype.trace = function() {
    return this.add('trace');
  };

  baseEnv.define('trace', new Procedure('trace', ParameterList.make([ParameterList.makeParam('f')]), new CodeBlock().ref('f').trace()));

  Opcode.registerSingleton('untrace', UnTraceOpcode = (function(_super) {

    __extends(UnTraceOpcode, _super);

    function UnTraceOpcode() {
      return UnTraceOpcode.__super__.constructor.apply(this, arguments);
    }

    UnTraceOpcode.prototype.run = function(frame) {
      var proc;
      proc = frame.pop();
      if (proc.__vmlet) {
        delete proc.__vmlet.trace;
      }
      frame.push(void 0);
      return frame.incIP();
    };

    UnTraceOpcode.prototype.toString = function() {
      return '[untrace]';
    };

    return UnTraceOpcode;

  })(Opcode));

  CodeBlock.prototype.untrace = function() {
    return this.add('untrace');
  };

  baseEnv.define('untrace', new Procedure('untrace', ParameterList.make([ParameterList.makeParam('f')]), new CodeBlock().ref('f').untrace()));

  Opcode.registerSingleton('showEnv', ShowEnvOpcode = (function(_super) {

    __extends(ShowEnvOpcode, _super);

    function ShowEnvOpcode() {
      return ShowEnvOpcode.__super__.constructor.apply(this, arguments);
    }

    ShowEnvOpcode.prototype.run = function(frame) {
      frame.task.env.show();
      frame.push(void 0);
      return frame.incIP();
    };

    return ShowEnvOpcode;

  })(Opcode));

  CodeBlock.prototype.showEnv = function() {
    return this.add('showEnv');
  };

  baseEnv.define('showEnv', new Procedure('showEnv', ParameterList.make(), new CodeBlock().showEnv()));

  fib2 = function(n) {
    if (n <= 0) {
      return 0;
    } else if (n <= 2) {
      return 1;
    } else {
      return fib2(n - 1) + fib2(n - 2);
    }
  };

  baseEnv.define('fib2', fib2);

  module.exports = Procedure;

}).call(this);

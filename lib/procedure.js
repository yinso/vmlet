// Generated by CoffeeScript 1.4.0
(function() {
  var AST, CLONE, Environment, TCO, TR, filterDefines, getDefines, isTail, normalize, transform, _findTailCallProcs, _transformTailCall;

  AST = require('./ast');

  isTail = require('./istail');

  TR = require('./trace');

  CLONE = require('./clone');

  TCO = require('./goto');

  Environment = require('./symboltable');

  normalize = function(ast) {
    var def, defines, env, i, results, _i, _len;
    env = Environment.make();
    defines = getDefines(ast, env);
    results = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = defines.length; _i < _len; _i++) {
        def = defines[_i];
        _results.push(transform(def.value));
      }
      return _results;
    })();
    for (i = _i = 0, _len = defines.length; _i < _len; i = ++_i) {
      def = defines[i];
      def.value = results[i];
    }
    return results;
  };

  getDefines = function(ast, env) {
    var i, item, items, results, _i, _len;
    items = (function() {
      switch (ast.body.type()) {
        case 'block':
          return ast.body.items;
        default:
          return [ast.body];
      }
    })();
    results = [];
    for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
      item = items[i];
      switch (item.type()) {
        case 'define':
        case 'local':
          if (item.value.type() === 'procedure') {
            env.setDefine(item);
            results.push(item);
          }
      }
    }
    return results;
  };

  transform = function(ast, env) {
    var procs, res;
    if (env == null) {
      env = Environment.make();
    }
    res = _findTailCallProcs(ast, env);
    if (!res) {
      return ast;
    }
    procs = env.keys();
    return _transformTailCall(res, procs);
  };

  _transformTailCall = function(ast, procs) {
    var res;
    res = TCO.transform(ast, procs);
    TR.log('--transform.tail.call', ast.name, res);
    return ast;
  };

  _findTailCallProcs = function(ast, env, stack) {
    var defines, filtered, proc, refs, _i, _len;
    if (stack == null) {
      stack = [ast];
    }
    refs = isTail.transform(ast);
    if (refs.length > 0) {
      defines = getDefines(ast, env);
      filtered = filterDefines(ast, refs, env);
      for (_i = 0, _len = filtered.length; _i < _len; _i++) {
        proc = filtered[_i];
        if (stack.indexOf(proc) === -1) {
          _findTailCallProcs(proc, env, stack.concat(filtered));
        }
      }
      return ast;
    } else {
      return null;
    }
  };

  filterDefines = function(ast, refs, env) {
    var ref, _i, _len;
    for (_i = 0, _len = refs.length; _i < _len; _i++) {
      ref = refs[_i];
      if (env.has(ref)) {
        env["delete"](ref);
      } else {
        env.setRef(ref);
      }
    }
    return env.values();
  };

  module.exports = {
    normalize: normalize
  };

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var ARRAY, ASSIGN, AST, BINARY, BLOCK, BOOL, CASE, CATCH, CONTINUE, DEFAULTCASE, DEFINE, FINALLY, FUNCALL, IF, LIST, LOCAL, MEMBER, NULL, NUMBER, OBJECT, PARAM, PROCEDURE, PROXYVAL, QUASI, QUOTED, REF, RETURN, STRING, SWITCH, SYMBOL, TASK, TASKCALL, TEMPVAR, THROW, TR, TRY, UNIT, UNQUOTE, UNQUOTESPLICING, VAR, WHILE, errorlet, esnode, loglet, _hashCode,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  loglet = require('loglet');

  errorlet = require('errorlet');

  esnode = require('./esnode');

  TR = require('./trace');

  _hashCode = function(str) {
    var char, i, val, _i, _ref;
    val = 0;
    for (i = _i = 0, _ref = str.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      char = str.charCodeAt(i);
      val = ((val << 5) - val) + char;
      val = val & val;
    }
    return val;
  };

  AST = (function() {

    AST.types = {};

    AST.register = function(astType) {
      if (this.types.hasOwnProperty(astType.type)) {
        throw errorlet.create({
          error: 'ast_type:duplicate',
          type: astType.type,
          ast: ast
        });
      }
      this.types[astType.type] = astType;
      return this[astType.type] = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(astType, args, function(){});
      };
    };

    AST.get = function(type) {
      if (this.types.hasOwnProperty(type)) {
        return this.types[type];
      } else {
        throw errorlet.create({
          error: 'ast_type:unknown',
          type: type
        });
      }
    };

    AST.make = function() {
      var args, astType, type;
      type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      astType = this.get(type);
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(astType, args, function(){});
    };

    AST.isa = function(v, type) {
      return v instanceof this.get(type);
    };

    function AST(value) {
      this.value = value;
    }

    AST.prototype.equals = function(v) {
      return v instanceof this.constructor && this._equals(v);
    };

    AST.prototype._equals = function(v) {
      return v.value === this.value;
    };

    AST.prototype.isa = function(type) {
      return this instanceof AST.get(type);
    };

    AST.prototype.isAsync = function() {
      return false;
    };

    AST.prototype.type = function() {
      return this.constructor.type;
    };

    AST.prototype.hashCode = function() {
      return _hashCode(this.toString());
    };

    AST.prototype.inspect = function() {
      return this.toString();
    };

    AST.prototype.toString = function() {
      return "{" + this.constructor.name + " " + this.value + "}";
    };

    AST.prototype.toESNode = function() {
      return {
        type: 'Node'
      };
    };

    AST.prototype.canReduce = function() {
      return false;
    };

    AST.prototype.baseSelfESNode = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return esnode.funcall(esnode.member(esnode.member(esnode.identifier('_rt'), esnode.identifier('AST')), esnode.identifier(this.constructor.type)), args);
    };

    AST.prototype.selfESNode = function() {
      return this.baseSelfESNode((this.value instanceof AST ? this.value.selfESNode() : esnode.literal(this.value)));
    };

    return AST;

  })();

  AST.register(SYMBOL = (function(_super) {

    __extends(SYMBOL, _super);

    SYMBOL.type = 'symbol';

    function SYMBOL(value, suffix) {
      this.value = value;
      this.suffix = suffix != null ? suffix : void 0;
    }

    SYMBOL.prototype._equals = function(v) {
      return this.value === v.value && this.suffix === v.suffix;
    };

    SYMBOL.prototype.nested = function() {
      return new this(this.value, this.suffix === void 0 ? 1 : this.suffix + 1);
    };

    SYMBOL.prototype.toString = function() {
      if (this.suffix) {
        return "{SYM " + this.value + ";" + this.suffix + "}";
      } else {
        return "{SYM " + this.value + "}";
      }
    };

    SYMBOL.prototype.toESNode = function() {
      return esnode.identifier(this.value);
    };

    return SYMBOL;

  })(AST));

  AST.register(STRING = (function(_super) {

    __extends(STRING, _super);

    function STRING() {
      return STRING.__super__.constructor.apply(this, arguments);
    }

    STRING.type = 'string';

    STRING.prototype.toESNode = function() {
      return esnode.literal(this.value);
    };

    return STRING;

  })(AST));

  AST.register(BOOL = (function(_super) {

    __extends(BOOL, _super);

    function BOOL() {
      return BOOL.__super__.constructor.apply(this, arguments);
    }

    BOOL.type = 'bool';

    BOOL.TRUE = new BOOL(true);

    BOOL.FALSE = new BOOL(false);

    BOOL.prototype.toESNode = function() {
      return esnode.literal(this.value);
    };

    return BOOL;

  })(AST));

  AST.register(NULL = (function(_super) {

    __extends(NULL, _super);

    function NULL() {
      return NULL.__super__.constructor.apply(this, arguments);
    }

    NULL.type = 'null';

    NULL.NULL = new NULL(true);

    NULL.prototype.toString = function() {
      return "{NULL}";
    };

    NULL.prototype.toESNode = function() {
      return esnode.null_();
    };

    NULL.prototype.selfESNode = function() {
      return this.baseSelfESNode();
    };

    return NULL;

  })(AST));

  AST.register(NUMBER = (function(_super) {

    __extends(NUMBER, _super);

    function NUMBER() {
      return NUMBER.__super__.constructor.apply(this, arguments);
    }

    NUMBER.type = 'number';

    NUMBER.prototype.toESNode = function() {
      if (this.value < 0) {
        return esnode.unary('-', esnode.literal(-this.value));
      } else {
        return esnode.literal(this.value);
      }
    };

    return NUMBER;

  })(AST));

  AST.register(MEMBER = (function(_super) {

    __extends(MEMBER, _super);

    function MEMBER(head, key) {
      this.head = head;
      this.key = key;
    }

    MEMBER.type = 'member';

    MEMBER.prototype._equals = function(v) {
      return this.head.equals(v.head) && this.key === v.key;
    };

    MEMBER.prototype.toString = function() {
      return "{MEMBER " + this.head + " " + this.key + "}";
    };

    MEMBER.prototype.toESNode = function() {
      return esnode.member(this.head.toESNode(), this.key.toESNode());
    };

    MEMBER.prototype.canReduce = function() {
      return this.head.canReduce();
    };

    MEMBER.prototype.selfESNode = function() {
      return this.baseSelfESNode(this.head.selfESNode(), this.key.selfESNode());
    };

    return MEMBER;

  })(AST));

  AST.register(UNIT = (function(_super) {

    __extends(UNIT, _super);

    UNIT.type = 'unit';

    function UNIT() {}

    UNIT.prototype._equals = function(v) {
      return true;
    };

    UNIT.prototype.toString = function() {
      return "{UNIT}";
    };

    UNIT.prototype.toESNode = function() {
      return esnode.undefined_();
    };

    return UNIT;

  })(AST));

  AST.register(OBJECT = (function(_super) {

    __extends(OBJECT, _super);

    function OBJECT() {
      return OBJECT.__super__.constructor.apply(this, arguments);
    }

    OBJECT.type = 'object';

    OBJECT.prototype._equals = function(v) {
      var i, o1, o2, _i, _ref;
      if (!this.value.length === v.value.length) {
        return false;
      }
      for (i = _i = 0, _ref = this.value.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        o1 = this.value[i];
        o2 = v.value[i];
        if (!o1.equals(o2)) {
          return false;
        }
      }
      return true;
    };

    OBJECT.prototype.toESNode = function() {
      var key, val;
      return esnode.object((function() {
        var _i, _len, _ref, _ref1, _results;
        _ref = this.value;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], key = _ref1[0], val = _ref1[1];
          _results.push([key, val.toESNode()]);
        }
        return _results;
      }).call(this));
    };

    OBJECT.prototype.canReduce = function() {
      var key, val, _i, _len, _ref, _ref1;
      _ref = this.value;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], key = _ref1[0], val = _ref1[1];
        if (val.canReduce()) {
          return true;
        }
      }
      return false;
    };

    OBJECT.prototype.selfESNode = function() {
      var key, val;
      return this.baseSelfESNode(esnode.array((function() {
        var _i, _len, _ref, _ref1, _results;
        _ref = this.value;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], key = _ref1[0], val = _ref1[1];
          _results.push(esnode.array(esnode.literal(key), val.selfESNode()));
        }
        return _results;
      }).call(this)));
    };

    return OBJECT;

  })(AST));

  AST.register(ARRAY = (function(_super) {

    __extends(ARRAY, _super);

    function ARRAY() {
      return ARRAY.__super__.constructor.apply(this, arguments);
    }

    ARRAY.type = 'array';

    ARRAY.prototype._equals = function(v) {
      var a1, a2, i, _i, _ref;
      if (!this.value.length === v.value.length) {
        return false;
      }
      for (i = _i = 0, _ref = this.value.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        a1 = this.value[i];
        a2 = v.value[i];
        if (!a1.equals(a2)) {
          return false;
        }
      }
      return true;
    };

    ARRAY.prototype.toESNode = function() {
      var item;
      return esnode.array((function() {
        var _i, _len, _ref, _results;
        _ref = this.value;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _results.push(item.toESNode());
        }
        return _results;
      }).call(this));
    };

    ARRAY.prototype.canReduce = function() {
      var val, _i, _len, _ref;
      _ref = this.value;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        val = _ref[_i];
        if (val.canReduce()) {
          return true;
        }
      }
      return false;
    };

    ARRAY.prototype.selfESNode = function() {
      var item;
      return this.baseSelfESNode(esnode.array((function() {
        var _i, _len, _ref, _results;
        _ref = this.value;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _results.push(item.selfESNode());
        }
        return _results;
      }).call(this)));
    };

    return ARRAY;

  })(AST));

  AST.register(LIST = (function(_super) {

    __extends(LIST, _super);

    function LIST() {
      return LIST.__super__.constructor.apply(this, arguments);
    }

    LIST.type = 'list';

    LIST.prototype._equals = function(v) {
      var i, res, val, _i, _len, _ref;
      if (v.value === this.value.length) {
        _ref = v.value;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          val = _ref[i];
          res = this.value[i].equals(val);
          if (res) {
            continue;
          } else {
            return false;
          }
        }
        return true;
      } else {
        return false;
      }
    };

    return LIST;

  })(AST));

  AST.register(QUOTED = (function(_super) {

    __extends(QUOTED, _super);

    function QUOTED() {
      return QUOTED.__super__.constructor.apply(this, arguments);
    }

    QUOTED.type = 'quoted';

    QUOTED.prototype._equals = function(v) {
      return this.value.equals(v.value);
    };

    return QUOTED;

  })(AST));

  AST.register(QUASI = (function(_super) {

    __extends(QUASI, _super);

    function QUASI() {
      return QUASI.__super__.constructor.apply(this, arguments);
    }

    QUASI.type = 'quasi';

    QUASI.prototype._equals = function(v) {
      return this.value.equals(v.value);
    };

    return QUASI;

  })(AST));

  AST.register(UNQUOTE = (function(_super) {

    __extends(UNQUOTE, _super);

    function UNQUOTE() {
      return UNQUOTE.__super__.constructor.apply(this, arguments);
    }

    UNQUOTE.type = 'unquote';

    UNQUOTE.prototype._equals = function(v) {
      return this.value.equals(v.value);
    };

    return UNQUOTE;

  })(AST));

  AST.register(UNQUOTESPLICING = (function(_super) {

    __extends(UNQUOTESPLICING, _super);

    function UNQUOTESPLICING() {
      return UNQUOTESPLICING.__super__.constructor.apply(this, arguments);
    }

    UNQUOTESPLICING.type = 'unquotesplicing';

    UNQUOTESPLICING.prototype._equals = function(v) {
      return this.value.equals(v.value);
    };

    return UNQUOTESPLICING;

  })(AST));

  AST.register(BLOCK = (function(_super) {

    __extends(BLOCK, _super);

    function BLOCK(items) {
      this.items = items != null ? items : [];
    }

    BLOCK.type = 'block';

    BLOCK.prototype._equals = function(v) {
      var i, res, val, _i, _len, _ref;
      if (v.items.length === this.items.length) {
        _ref = v.items;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          val = _ref[i];
          res = this.items[i].equals(val);
          if (res) {
            continue;
          } else {
            return false;
          }
        }
        return true;
      } else {
        return false;
      }
    };

    BLOCK.prototype.isAsync = function() {
      var item, _i, _len, _ref;
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.isAsync()) {
          true;
        }
      }
      return false;
    };

    BLOCK.prototype.toString = function() {
      var buffer, item, _i, _len, _ref;
      buffer = [];
      buffer.push('{BLOCK');
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        buffer.push(item.toString());
      }
      buffer.push('}');
      return buffer.join('\n');
    };

    BLOCK.prototype.push = function(item) {
      this.items.push(item);
      return item;
    };

    BLOCK.prototype.toESNode = function() {
      var item;
      return esnode.block((function() {
        var _i, _len, _ref, _results;
        _ref = this.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _results.push(item.toESNode());
        }
        return _results;
      }).call(this));
    };

    BLOCK.prototype.canReduce = function() {
      return true;
    };

    BLOCK.prototype.selfESNode = function() {
      var item;
      return this.baseSelfESNode(esnode.array((function() {
        var _i, _len, _ref, _results;
        _ref = this.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _results.push(item.selfESNode());
        }
        return _results;
      }).call(this)));
    };

    return BLOCK;

  })(AST));

  AST.register(ASSIGN = (function(_super) {

    __extends(ASSIGN, _super);

    ASSIGN.type = 'assign';

    function ASSIGN(name, value) {
      this.name = name;
      this.value = value;
    }

    ASSIGN.prototype._equals = function(v) {
      return this.name === v.name && this.value.equals(v.value);
    };

    ASSIGN.prototype.isAsync = function() {
      return this.value.isAsync();
    };

    ASSIGN.prototype.toString = function() {
      return "{ASSIGN " + this.name + " " + this.value + "}";
    };

    ASSIGN.prototype.toESNode = function() {
      return esnode.assign(this.name.toESNode(), this.value.toESNode());
    };

    ASSIGN.prototype.canReduce = function() {
      return true;
    };

    ASSIGN.prototype.selfESNode = function() {
      return this.baseSelfESNode(this.name.selfESNode(), this.value.selfESNode());
    };

    return ASSIGN;

  })(AST));

  AST.register(DEFINE = (function(_super) {

    __extends(DEFINE, _super);

    DEFINE.type = 'define';

    function DEFINE(name, value) {
      this.name = name;
      this.value = value;
    }

    DEFINE.prototype._equals = function(v) {
      return this.name === v.name && this.value.equals(v.value);
    };

    DEFINE.prototype.isAsync = function() {
      return this.value.isAsync();
    };

    DEFINE.prototype.toString = function() {
      return "{DEFINE " + this.name + " " + this.value + "}";
    };

    DEFINE.prototype.toESNode = function() {
      return esnode.declare('var', [this.name.toESNode(), this.value.toESNode()]);
    };

    DEFINE.prototype.canReduce = function() {
      return true;
    };

    DEFINE.prototype.selfESNode = function() {
      return this.baseSelfESNode(this.name.selfESNode(), this.value.selfESNode());
    };

    return DEFINE;

  })(AST));

  AST.register(LOCAL = (function(_super) {

    __extends(LOCAL, _super);

    LOCAL.type = 'local';

    function LOCAL(name, value) {
      this.name = name;
      this.value = value;
    }

    LOCAL.prototype._equals = function(v) {
      return this.name === v.name && this.value.equals(v.value);
    };

    LOCAL.prototype.isAsync = function() {
      var _ref;
      return ((_ref = this.value) != null ? _ref.isAsync() : void 0) || false;
    };

    LOCAL.prototype.toString = function() {
      return "{LOCAL " + this.name + " " + this.value + "}";
    };

    LOCAL.prototype.toESNode = function() {
      if (!this.value) {
        return esnode.declare('var', [this.name.toESNode()]);
      } else {
        return esnode.declare('var', [this.name.toESNode(), this.value.toESNode()]);
      }
    };

    LOCAL.prototype.noInit = function() {
      return AST.local(this.name);
    };

    LOCAL.prototype.assign = function(value) {
      if (value == null) {
        value = this.value;
      }
      return AST.assign(this.name, value);
    };

    LOCAL.prototype.canReduce = function() {
      return true;
    };

    LOCAL.prototype.selfESNode = function() {
      if (this.value) {
        return this.baseSelfESNode(this.name.selfESNode(), this.value.selfESNode());
      } else {
        return this.baseSelfESNode(this.name.selfESNode());
      }
    };

    return LOCAL;

  })(AST));

  AST.register(REF = (function(_super) {

    __extends(REF, _super);

    REF.type = 'ref';

    function REF(name, value) {
      this.name = name;
      this.value = value;
    }

    REF.prototype._equals = function(v) {
      return this === v;
    };

    REF.prototype.isAsync = function() {
      return false;
    };

    REF.prototype.toString = function() {
      return "{REF " + this.name + " " + this.value + "}";
    };

    REF.prototype.local = function() {
      return AST.local(this, this.value);
    };

    REF.prototype.define = function() {
      return AST.define(this, this.value);
    };

    REF.prototype.assign = function() {
      return AST.assign(this, this.value);
    };

    REF.prototype.toESNode = function() {
      return this.name.toESNode();
    };

    REF.prototype.selfESNode = function() {
      return this.baseSelfESNode(this.name.toESNode(), this.value.toESNode());
    };

    return REF;

  })(AST));

  AST.register(TEMPVAR = (function(_super) {

    __extends(TEMPVAR, _super);

    TEMPVAR.type = 'tempvar';

    function TEMPVAR(name, value, suffix) {
      this.name = name;
      this.value = value;
      this.suffix = suffix != null ? suffix : '';
    }

    TEMPVAR.prototype._equals = function(v) {
      return this.name === v.name && this.value.equals(v.value);
    };

    TEMPVAR.prototype.isAsync = function() {
      return this.value.isAsync();
    };

    TEMPVAR.prototype.normalized = function() {
      return this.name + (this.suffix ? "$" + this.suffix : '');
    };

    TEMPVAR.prototype.toString = function() {
      return "{TEMPVAR " + (this.normalized()) + " " + this.value + "}";
    };

    TEMPVAR.prototype.toESNode = function() {
      return esnode.declare('var', [esnode.identifier(this.normalized()), this.value.toESNode()]);
    };

    TEMPVAR.prototype.selfESNode = function() {
      return this.baseSelfESNode(esnode.literal(this.name), this.value.selfESNode(), esnode.literal(this.suffix));
    };

    return TEMPVAR;

  })(AST));

  AST.register(PROXYVAL = (function(_super) {

    __extends(PROXYVAL, _super);

    PROXYVAL.type = 'proxyval';

    function PROXYVAL(name, value, _compile) {
      this.name = name;
      this.value = value;
      this._compile = _compile != null ? _compile : null;
    }

    PROXYVAL.prototype.compile = function() {
      if (this._compile) {
        return this._compile(this);
      } else {
        return this.name;
      }
    };

    PROXYVAL.prototype._equals = function(v) {
      return this.name === v.name && this.value.equals(v.value);
    };

    PROXYVAL.prototype.toString = function() {
      return "{PROXYVAL " + this.name + " " + this.value + "}";
    };

    PROXYVAL.prototype.toESNode = function() {
      return esnode.declare('var', [esnode.identifier(this.name), this.value.toESNode()]);
    };

    PROXYVAL.prototype.selfESNode = function() {
      return this.baseSelfESNode(esnode.literal(this.name), this.value.selfESNode(), esnode.literal(this._compile));
    };

    return PROXYVAL;

  })(AST));

  AST.register(PARAM = (function(_super) {

    __extends(PARAM, _super);

    function PARAM(name, paramType, _default) {
      this.name = name;
      this.paramType = paramType != null ? paramType : null;
      this["default"] = _default != null ? _default : null;
    }

    PARAM.type = 'param';

    PARAM.prototype._equals = function(v) {
      return this._typeEquals(v) && this._defaultEquals(v);
    };

    PARAM.prototype._typeEquals = function(v) {
      if (this.paramType && v.paramType) {
        return this.paramType.equals(v.paramType);
      } else if (this.paramType === null && v.paramType === null) {
        return true;
      } else {
        return false;
      }
    };

    PARAM.prototype._defaultEquals = function(v) {
      if (this["default"] && v["default"]) {
        return this["default"].equals(v["default"]);
      } else if (this["default"] === null && v["default"] === null) {
        return true;
      } else {
        return false;
      }
    };

    PARAM.prototype.toString = function() {
      if (this.paramType && this["default"]) {
        return "{PARAM " + this.name + " " + this.paramType + " = " + this["default"] + "}";
      } else if (this.paramType) {
        return "{PARAM " + this.name + " " + this.paramType + "}";
      } else if (this["default"]) {
        return "{PARAM " + this.name + " = " + this["default"] + "}";
      } else {
        return "{PARAM " + this.name + "}";
      }
    };

    PARAM.prototype.toESNode = function() {
      return this.name.toESNode();
    };

    PARAM.prototype.selfESNode = function() {
      var defaultVal, name, type, _ref, _ref1;
      type = ((_ref = this.paramType) != null ? _ref.selfESNode() : void 0) || esnode.literal(this.paramType);
      defaultVal = ((_ref1 = this["default"]) != null ? _ref1.selfESNode() : void 0) || esnode.literal(this["default"]);
      name = this.name.selfESNode();
      return this.baseSelfESNode(name, type, defaultVal);
    };

    return PARAM;

  })(AST));

  AST.register(PROCEDURE = (function(_super) {

    __extends(PROCEDURE, _super);

    PROCEDURE.type = 'procedure';

    function PROCEDURE(name, params, body, returns) {
      this.name = name;
      this.params = params;
      this.body = body;
      this.returns = returns != null ? returns : null;
    }

    PROCEDURE.prototype._equals = function(v) {
      var i, param, _i, _len, _ref;
      if (this.name === this.name) {
        _ref = this.params;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          param = _ref[i];
          if (!param.equals(v.params[i])) {
            return false;
          }
        }
        return this.body.equals(v.body);
      } else {
        return false;
      }
    };

    PROCEDURE.prototype.toString = function() {
      var buffer, i, param, _i, _len, _ref;
      buffer = ["{PROCEDURE "];
      if (this.name) {
        buffer.push(this.name, " ");
      }
      buffer.push("(");
      _ref = this.params || [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        param = _ref[i];
        if (i > 0) {
          buffer.push(", ");
        }
        buffer.push(param.toString());
      }
      buffer.push(") ");
      buffer.push(this.body.toString());
      if (this.returns) {
        this.buffer.push(" : ", this.returns.toString());
      }
      buffer.push("}");
      return buffer.join('');
    };

    PROCEDURE.prototype.toESNode = function() {
      var func, maker, param, _ref;
      func = esnode["function"](((_ref = this.name) != null ? _ref.toESNode() : void 0) || null, (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.params;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          param = _ref1[_i];
          _results.push(param.toESNode());
        }
        return _results;
      }).call(this), this.body.toESNode());
      maker = esnode.member(esnode.identifier('_rt'), esnode.identifier('makeProc'));
      return esnode.funcall(maker, [func]);
    };

    PROCEDURE.prototype.selfESNode = function() {
      var name, param, params, _ref;
      params = esnode.array((function() {
        var _i, _len, _ref, _results;
        _ref = this.params;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          param = _ref[_i];
          _results.push(param.selfESNode());
        }
        return _results;
      }).call(this));
      name = this.name ? esnode.literal(this.name) : esnode.null_();
      return this.baseSelfESNode(name, params, this.body.selfESNode(), ((_ref = this.returns) != null ? _ref.selfESNode() : void 0) || esnode.literal(this.returns));
    };

    return PROCEDURE;

  })(AST));

  AST.register(TASK = (function(_super) {

    __extends(TASK, _super);

    TASK.type = 'task';

    function TASK(name, params, body, returns) {
      this.name = name;
      this.params = params;
      this.body = body;
      this.returns = returns != null ? returns : null;
    }

    TASK.prototype._equals = function(v) {
      var i, param, _i, _len, _ref;
      if (this.name === this.name) {
        _ref = this.params;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          param = _ref[i];
          if (!param.equals(v.params[i])) {
            return false;
          }
        }
        return this.body.equals(v.body);
      } else {
        return false;
      }
    };

    TASK.prototype.isAsync = function() {
      return this.body.isAsync();
    };

    TASK.prototype.toString = function() {
      return "{TASK " + this.name + " " + this.params + " " + this.body + " " + this.returns + "}";
    };

    TASK.prototype.toESNode = function() {
      var param, _ref;
      return esnode["function"](((_ref = this.name) != null ? _ref.toESNode() : void 0) || null, (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.params;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          param = _ref1[_i];
          _results.push(param.toESNode());
        }
        return _results;
      }).call(this), this.body.toESNode());
    };

    TASK.prototype.selfESNode = function() {
      var name, param, params, _ref;
      params = esnode.array((function() {
        var _i, _len, _ref, _results;
        _ref = this.params;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          param = _ref[_i];
          _results.push(param.selfESNode());
        }
        return _results;
      }).call(this));
      name = this.name ? esnode.identifier(this.name) : esnode.null_();
      return this.baseSelfESNode(name, params, this.body.selfESNode(), ((_ref = this.returns) != null ? _ref.selfESNode() : void 0) || esnode.literal(this.returns));
    };

    return TASK;

  })(AST));

  AST.register(IF = (function(_super) {

    __extends(IF, _super);

    IF.type = 'if';

    function IF(cond, then, _else) {
      this.cond = cond;
      this.then = then;
      this["else"] = _else;
    }

    IF.prototype._equals = function(v) {
      return this.cond.equals(v.cond) && this.then.equals(v.then) && this["else"].equals(v["else"]);
    };

    IF.prototype.isAsync = function() {
      return this.then.isAsync() || this["else"].isAsync();
    };

    IF.prototype.toString = function() {
      return "{IF " + this.cond + " " + this.then + " " + this["else"] + "}";
    };

    IF.prototype.toESNode = function() {
      return esnode["if"](this.cond.toESNode(), this.then.toESNode(), this["else"].toESNode());
    };

    IF.prototype.canReduce = function() {
      return true;
    };

    IF.prototype.selfESNode = function() {
      return this.baseSelfESNode(this.cond.selfESNode(), this.then.selfESNode(), this["else"].selfESNode());
    };

    return IF;

  })(AST));

  AST.register(FUNCALL = (function(_super) {

    __extends(FUNCALL, _super);

    FUNCALL.type = 'funcall';

    function FUNCALL(funcall, args) {
      this.funcall = funcall;
      this.args = args;
    }

    FUNCALL.prototype._equals = function(v) {
      var arg, i, _i, _len, _ref;
      if (this.funcall.equals(v.funcall)) {
        if (this.args.length === v.args.length) {
          _ref = this.args;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            arg = _ref[i];
            if (arg.equals(v.args[i])) {
              continue;
            } else {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };

    FUNCALL.prototype.toString = function() {
      return "{FUNCALL " + this.funcall + " " + this.args + "}";
    };

    FUNCALL.prototype.toESNode = function() {
      var arg;
      return esnode.funcall(this.funcall.toESNode(), (function() {
        var _i, _len, _ref, _results;
        _ref = this.args;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          arg = _ref[_i];
          _results.push(arg.toESNode());
        }
        return _results;
      }).call(this));
    };

    FUNCALL.prototype.canReduce = function() {
      var arg, _i, _len, _ref;
      if (this.funcall.canReduce()) {
        return true;
      }
      _ref = this.args;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arg = _ref[_i];
        if (arg.canReduce()) {
          return true;
        }
      }
      return false;
    };

    FUNCALL.prototype.selfESNode = function() {
      var arg;
      return this.baseSelfESNode(this.funcall.selfESNode(), esnode.array((function() {
        var _i, _len, _ref, _results;
        _ref = this.args;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          arg = _ref[_i];
          _results.push(arg.selfESNode());
        }
        return _results;
      }).call(this)));
    };

    return FUNCALL;

  })(AST));

  AST.register(TASKCALL = (function(_super) {

    __extends(TASKCALL, _super);

    function TASKCALL() {
      return TASKCALL.__super__.constructor.apply(this, arguments);
    }

    TASKCALL.type = 'taskcall';

    TASKCALL.prototype.isAsync = function() {
      return true;
    };

    TASKCALL.prototype.toString = function() {
      return "{TASKCALL " + this.funcall + " " + this.args + "}";
    };

    TASKCALL.prototype.toESNode = function() {
      var arg;
      return esnode.funcall(this.funcall.toESNode(), (function() {
        var _i, _len, _ref, _results;
        _ref = this.args;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          arg = _ref[_i];
          _results.push(arg.toESNode());
        }
        return _results;
      }).call(this));
    };

    TASKCALL.prototype.selfESNode = function() {
      var arg;
      return this.baseSelfESNode(this.funcall.selfESNode(), esnode.array((function() {
        var _i, _len, _ref, _results;
        _ref = this.args;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          arg = _ref[_i];
          _results.push(arg.selfESNode());
        }
        return _results;
      }).call(this)));
    };

    return TASKCALL;

  })(FUNCALL));

  AST.register(RETURN = (function(_super) {

    __extends(RETURN, _super);

    function RETURN() {
      return RETURN.__super__.constructor.apply(this, arguments);
    }

    RETURN.type = 'return';

    RETURN.prototype.isAsync = function() {
      return this.value.isAsync();
    };

    RETURN.prototype.toESNode = function() {
      return esnode["return"](this.value.toESNode());
    };

    RETURN.prototype.canReduce = function() {
      return this.value.canReduce();
    };

    RETURN.prototype.selfESNode = function() {
      return this.baseSelfESNode(this.value.selfESNode());
    };

    return RETURN;

  })(AST));

  AST.register(BINARY = (function(_super) {

    __extends(BINARY, _super);

    BINARY.type = 'binary';

    function BINARY(op, lhs, rhs) {
      this.op = op;
      this.lhs = lhs;
      this.rhs = rhs;
    }

    BINARY.prototype._equals = function(v) {
      return this.op === v.op && this.lhs.equals(v.lhs) && this.rhs.equals(v.rhs);
    };

    BINARY.prototype.toString = function() {
      return "{" + this.op + " " + this.lhs + " " + this.rhs + "}";
    };

    BINARY.prototype.toESNode = function() {
      return esnode.binary(this.op, this.lhs.toESNode(), this.rhs.toESNode());
    };

    BINARY.prototype.canReduce = function() {
      return this.lhs.canReduce() || this.rhs.canReduce();
    };

    BINARY.prototype.selfESNode = function() {
      return this.baseSelfESNode(esnode.literal(this.op), this.lhs.selfESNode(), this.rhs.selfESNode());
    };

    return BINARY;

  })(AST));

  AST.register(THROW = (function(_super) {

    __extends(THROW, _super);

    function THROW() {
      return THROW.__super__.constructor.apply(this, arguments);
    }

    THROW.type = 'throw';

    THROW.prototype.toESNode = function() {
      return esnode["throw"](this.value.toESNode());
    };

    THROW.prototype.canReduce = function() {
      return this.value.canReduce();
    };

    return THROW;

  })(AST));

  AST.register(CATCH = (function(_super) {

    __extends(CATCH, _super);

    CATCH.type = 'catch';

    function CATCH(param, body) {
      this.param = param;
      this.body = body;
    }

    CATCH.prototype._equals = function(v) {
      return this.param.equals(v.param) && this.body.equals(v.body);
    };

    CATCH.prototype.isAsync = function() {
      return this.body.isAsync();
    };

    CATCH.prototype.toString = function() {
      return "{CATCH " + this.param + " " + this.body + "}";
    };

    CATCH.prototype.toESNode = function() {
      return esnode["catch"](this.param.toESNode(), this.body.toESNode());
    };

    CATCH.prototype.canReduce = function() {
      return true;
    };

    CATCH.prototype.selfESNode = function() {
      return this.baseSelfESNode(this.param.selfESNode(), this.body.selfESNode());
    };

    return CATCH;

  })(AST));

  AST.register(FINALLY = (function(_super) {

    __extends(FINALLY, _super);

    FINALLY.type = 'finally';

    function FINALLY(body) {
      this.body = body;
    }

    FINALLY.prototype._equals = function(v) {
      return this.body.equals(v.body);
    };

    FINALLY.prototype.isAsync = function() {
      return this.body.isAsync();
    };

    FINALLY.prototype.toString = function() {
      return "{FINALLY " + this.body + "}";
    };

    FINALLY.prototype.toESNode = function() {
      return this.body.toESNode();
    };

    FINALLY.prototype.canReduce = function() {
      return this.body.canReduce();
    };

    FINALLY.prototype.selfESNode = function() {
      return this.baseSelfESNode(this.body.selfESNode());
    };

    return FINALLY;

  })(AST));

  AST.register(TRY = (function(_super) {

    __extends(TRY, _super);

    TRY.type = 'try';

    function TRY(body, catches, _finally) {
      this.body = body;
      this.catches = catches != null ? catches : [];
      this["finally"] = _finally != null ? _finally : null;
    }

    TRY.prototype._equals = function(v) {
      var c1, c2, i, _i, _ref;
      if (!this.body.equals(v.body)) {
        return false;
      }
      if (!this.catches.length === v.catches.length) {
        return false;
      }
      for (i = _i = 0, _ref = this.catches.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        c1 = this.catches[i];
        c2 = v.catches[i];
        if (!c1.equals(c2)) {
          return false;
        }
      }
      if (this["finally"] && v["finally"]) {
        return this["finally"].equals(v["finally"]);
      } else if (!this["finally"] && !v["finally"]) {
        return true;
      } else {
        return false;
      }
    };

    TRY.prototype.isAsync = function() {
      var c, _i, _len, _ref, _ref1;
      if (this.body.isAsync()) {
        return true;
      } else {
        _ref = this.catches;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          if (c.isAsync()) {
            return true;
          }
        }
        return ((_ref1 = this["finally"]) != null ? _ref1.isAsync() : void 0) || false;
      }
    };

    TRY.prototype.toString = function() {
      return "{TRY " + this.body + " " + this.catches + " " + this["finally"] + "}";
    };

    TRY.prototype.toESNode = function() {
      var exp, _ref;
      return esnode["try"](this.body.toESNode(), (function() {
        var _i, _len, _ref, _results;
        _ref = this.catches;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          exp = _ref[_i];
          _results.push(exp.toESNode());
        }
        return _results;
      }).call(this), ((_ref = this["finally"]) != null ? _ref.toESNode() : void 0) || null);
    };

    TRY.prototype.canReduce = function() {
      return true;
    };

    TRY.prototype.selfESNode = function() {
      var catches, exp, final, _ref;
      catches = esnode.array((function() {
        var _i, _len, _ref, _results;
        _ref = this.catches;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          exp = _ref[_i];
          _results.push(exp.selfESNode());
        }
        return _results;
      }).call(this));
      final = ((_ref = this["finally"]) != null ? _ref.selfESNode() : void 0) || esnode.literal(this["finally"]);
      return this.baseSelfESNode(this.body.selfESNode(), catches, final);
    };

    return TRY;

  })(AST));

  /*
  
  WHILE, CONTINUE, SWITCH, CASE, and DEFAULT
  
  These are used for tail call transformations.
  */


  AST.register(VAR = (function(_super) {

    __extends(VAR, _super);

    VAR.type = 'var';

    function VAR(name) {
      this.name = name;
    }

    VAR.prototype.toString = function() {
      return "{VAR " + this.name + "}";
    };

    VAR.prototype.toESNode = function() {
      return esnode.declare('var', [esnode.identifier(this.name), null]);
    };

    VAR.prototype.selfESNode = function() {
      return this.baseSelfESNode(esnode.literal(this.name));
    };

    return VAR;

  })(AST));

  AST.register(WHILE = (function(_super) {

    __extends(WHILE, _super);

    WHILE.type = 'while';

    function WHILE(cond, block) {
      this.cond = cond;
      this.block = block;
    }

    WHILE.prototype._equals = function(v) {
      return this.cond.equals(v.cond) && this.block.equals(v.block);
    };

    WHILE.prototype.isAsync = function() {
      return this.cond.isAsync() || this.block.isAsync();
    };

    WHILE.prototype.toString = function() {
      return "{WHILE " + this.cond + " " + this.block + "}";
    };

    WHILE.prototype.toESNode = function() {
      return escode["while"](this.cond.toESNode(), this.block.toESNode());
    };

    WHILE.prototype.selfESNode = function() {
      return this.baseSelfESNode(this.cond.selfESNode(), this.block.selfESNode());
    };

    return WHILE;

  })(AST));

  AST.register(CONTINUE = (function(_super) {

    __extends(CONTINUE, _super);

    function CONTINUE() {
      return CONTINUE.__super__.constructor.apply(this, arguments);
    }

    CONTINUE.type = 'continue';

    CONTINUE.prototype.toString = function() {
      return "{CONTINUE}";
    };

    CONTINUE.prototype.toESNode = function() {
      return escode["continue"]();
    };

    CONTINUE.prototype.selfESNode = function() {
      return this.baseSelfESNode();
    };

    return CONTINUE;

  })(AST));

  AST.register(SWITCH = (function(_super) {

    __extends(SWITCH, _super);

    SWITCH.type = 'switch';

    function SWITCH(cond, cases) {
      this.cond = cond;
      this.cases = cases != null ? cases : [];
    }

    SWITCH.prototype.toString = function() {
      return "{SWITCH " + this.cond + " " + this.cases + "}";
    };

    SWITCH.prototype.toESNode = function() {
      var c;
      return escode["switch"](this.cond.toESNode(), (function() {
        var _i, _len, _ref, _results;
        _ref = this.cases;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          _results.push(c.toESNode());
        }
        return _results;
      }).call(this));
    };

    SWITCH.prototype.selfESNode = function() {
      var c;
      return this.baseSelfESNode(this.cond.selfESNode(), (function() {
        var _i, _len, _ref, _results;
        _ref = this.cases;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          _results.push(c.selfESNode());
        }
        return _results;
      }).call(this));
    };

    return SWITCH;

  })(AST));

  AST.register(CASE = (function(_super) {

    __extends(CASE, _super);

    CASE.type = 'case';

    function CASE(cond, exp) {
      this.cond = cond;
      this.exp = exp;
    }

    CASE.prototype.toString = function() {
      return "{CASE " + this.cond + " " + this.exp + "}";
    };

    CASE.prototype.toESNode = function() {
      return escode["case"](this.cond.toESNode(), this.exp.toESNode());
    };

    CASE.prototype.selfESNode = function() {
      return this.baseSelfESNode(this.cond.selfESNode(), this.exp.selfESNode());
    };

    return CASE;

  })(AST));

  AST.register(DEFAULTCASE = (function(_super) {

    __extends(DEFAULTCASE, _super);

    DEFAULTCASE.type = 'defaultCase';

    function DEFAULTCASE(exp) {
      this.exp = exp;
    }

    DEFAULTCASE.prototype.toString = function() {
      return "{DEFAULT " + this.exp + "}";
    };

    DEFAULTCASE.prototype.toESNode = function() {
      return escode.defaultCase(this.exp.toESNode());
    };

    DEFAULTCASE.prototype.selfESNode = function() {
      return this.baseSelfESNode(this.exp.selfESNode());
    };

    return DEFAULTCASE;

  })(AST));

  module.exports = AST;

}).call(this);

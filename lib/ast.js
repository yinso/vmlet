// Generated by CoffeeScript 1.4.0
(function() {
  var ARRAY, AST, BINARY, BLOCK, BOOL, CATCH, DEFINE, FINALLY, FUNCALL, IF, LIST, MEMBER, NULL, NUMBER, OBJECT, PARAM, PROCEDURE, QUASI, QUOTED, REF, RETURN, STRING, SYMBOL, THROW, TRY, UNQUOTE, UNQUOTESPLICING, errorlet, loglet,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  loglet = require('loglet');

  errorlet = require('errorlet');

  AST = (function() {

    AST.types = {};

    AST.register = function(astType) {
      if (this.types.hasOwnProperty(astType.type)) {
        throw errorlet.create({
          error: 'ast_type:duplicate',
          type: astType.type,
          ast: ast
        });
      }
      return this.types[astType.type] = astType;
    };

    AST.get = function(type) {
      if (this.types.hasOwnProperty(type)) {
        return this.types[type];
      } else {
        throw errorlet.create({
          error: 'ast_type:unknown',
          type: type
        });
      }
    };

    AST.make = function() {
      var args, astType, type;
      type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      astType = this.get(type);
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(astType, args, function(){});
    };

    AST.isa = function(v, type) {
      return v instanceof this.get(type);
    };

    function AST(val) {
      this.val = val;
    }

    AST.prototype.equals = function(v) {
      return v instanceof this.constructor && this._equals(v);
    };

    AST.prototype._equals = function(v) {
      return v.val === this.val;
    };

    AST.prototype.isa = function(v, type) {
      return v instanceof AST.get(type);
    };

    AST.prototype.type = function() {
      return this.constructor.type;
    };

    AST.prototype.inspect = function() {
      return this.toString();
    };

    AST.prototype.toString = function() {
      return "{" + this.constructor.name + " " + this.val + "}";
    };

    return AST;

  })();

  AST.register(SYMBOL = (function(_super) {

    __extends(SYMBOL, _super);

    function SYMBOL() {
      return SYMBOL.__super__.constructor.apply(this, arguments);
    }

    SYMBOL.type = 'symbol';

    return SYMBOL;

  })(AST));

  AST.register(STRING = (function(_super) {

    __extends(STRING, _super);

    function STRING() {
      return STRING.__super__.constructor.apply(this, arguments);
    }

    STRING.type = 'string';

    return STRING;

  })(AST));

  AST.register(BOOL = (function(_super) {

    __extends(BOOL, _super);

    function BOOL() {
      return BOOL.__super__.constructor.apply(this, arguments);
    }

    BOOL.type = 'bool';

    BOOL.TRUE = new BOOL(true);

    BOOL.FALSE = new BOOL(false);

    return BOOL;

  })(AST));

  AST.register(NULL = (function(_super) {

    __extends(NULL, _super);

    function NULL() {
      return NULL.__super__.constructor.apply(this, arguments);
    }

    NULL.type = 'null';

    NULL.NULL = new NULL(true);

    return NULL;

  })(AST));

  AST.register(NUMBER = (function(_super) {

    __extends(NUMBER, _super);

    function NUMBER() {
      return NUMBER.__super__.constructor.apply(this, arguments);
    }

    NUMBER.type = 'number';

    return NUMBER;

  })(AST));

  AST.register(MEMBER = (function(_super) {

    __extends(MEMBER, _super);

    function MEMBER(head, key) {
      this.head = head;
      this.key = key;
    }

    MEMBER.type = 'member';

    MEMBER.prototype._equals = function(v) {
      return this.head.equals(v.head) && this.key === v.key;
    };

    MEMBER.prototype.toString = function() {
      return "{MEMBER " + this.head + " " + this.key + "}";
    };

    return MEMBER;

  })(AST));

  AST.register(OBJECT = (function(_super) {

    __extends(OBJECT, _super);

    function OBJECT() {
      return OBJECT.__super__.constructor.apply(this, arguments);
    }

    OBJECT.type = 'object';

    OBJECT.prototype._equals = function(v) {
      var i, o1, o2, _i, _ref;
      if (!this.val.length === v.val.length) {
        return false;
      }
      for (i = _i = 0, _ref = this.val.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        o1 = this.val[i];
        o2 = v.val[i];
        if (!o1.equals(o2)) {
          return false;
        }
      }
      return true;
    };

    return OBJECT;

  })(AST));

  AST.register(ARRAY = (function(_super) {

    __extends(ARRAY, _super);

    function ARRAY() {
      return ARRAY.__super__.constructor.apply(this, arguments);
    }

    ARRAY.type = 'array';

    ARRAY.prototype._equals = function(v) {
      var a1, a2, i, _i, _ref;
      if (!this.val.length === v.val.length) {
        return false;
      }
      for (i = _i = 0, _ref = this.val.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        a1 = this.val[i];
        a2 = v.val[i];
        if (!a1.equals(a2)) {
          return false;
        }
      }
      return true;
    };

    return ARRAY;

  })(AST));

  AST.register(LIST = (function(_super) {

    __extends(LIST, _super);

    function LIST() {
      return LIST.__super__.constructor.apply(this, arguments);
    }

    LIST.type = 'list';

    LIST.prototype._equals = function(v) {
      var i, res, val, _i, _len, _ref;
      if (v.val === this.val.length) {
        _ref = v.val;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          val = _ref[i];
          res = this.val[i].equals(val);
          if (res) {
            continue;
          } else {
            return false;
          }
        }
        return true;
      } else {
        return false;
      }
    };

    return LIST;

  })(AST));

  AST.register(QUOTED = (function(_super) {

    __extends(QUOTED, _super);

    function QUOTED() {
      return QUOTED.__super__.constructor.apply(this, arguments);
    }

    QUOTED.type = 'quoted';

    QUOTED.prototype._equals = function(v) {
      return this.val.equals(v.val);
    };

    return QUOTED;

  })(AST));

  AST.register(QUASI = (function(_super) {

    __extends(QUASI, _super);

    function QUASI() {
      return QUASI.__super__.constructor.apply(this, arguments);
    }

    QUASI.type = 'quasi';

    QUASI.prototype._equals = function(v) {
      return this.val.equals(v.val);
    };

    return QUASI;

  })(AST));

  AST.register(UNQUOTE = (function(_super) {

    __extends(UNQUOTE, _super);

    function UNQUOTE() {
      return UNQUOTE.__super__.constructor.apply(this, arguments);
    }

    UNQUOTE.type = 'unquote';

    UNQUOTE.prototype._equals = function(v) {
      return this.val.equals(v.val);
    };

    return UNQUOTE;

  })(AST));

  AST.register(UNQUOTESPLICING = (function(_super) {

    __extends(UNQUOTESPLICING, _super);

    function UNQUOTESPLICING() {
      return UNQUOTESPLICING.__super__.constructor.apply(this, arguments);
    }

    UNQUOTESPLICING.type = 'unquotesplicing';

    UNQUOTESPLICING.prototype._equals = function(v) {
      return this.val.equals(v.val);
    };

    return UNQUOTESPLICING;

  })(AST));

  AST.register(BLOCK = (function(_super) {

    __extends(BLOCK, _super);

    function BLOCK(items) {
      this.items = items != null ? items : [];
    }

    BLOCK.type = 'block';

    BLOCK.prototype._equals = function(v) {
      var i, res, val, _i, _len, _ref;
      if (v.items.length === this.items.length) {
        _ref = v.items;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          val = _ref[i];
          res = this.items[i].equals(val);
          if (res) {
            continue;
          } else {
            return false;
          }
        }
        return true;
      } else {
        return false;
      }
    };

    BLOCK.prototype.toString = function() {
      var buffer, item, _i, _len, _ref;
      buffer = [];
      buffer.push('{BLOCK');
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        buffer.push(item);
      }
      buffer.push('}');
      return buffer.join('\n');
    };

    return BLOCK;

  })(AST));

  AST.register(REF = (function(_super) {

    __extends(REF, _super);

    function REF() {
      return REF.__super__.constructor.apply(this, arguments);
    }

    REF.type = 'ref';

    return REF;

  })(AST));

  AST.register(PARAM = (function(_super) {

    __extends(PARAM, _super);

    function PARAM(name, type, _default) {
      this.name = name;
      this.type = type != null ? type : null;
      this["default"] = _default != null ? _default : null;
    }

    PARAM.type = 'param';

    PARAM.prototype._equals = function(v) {
      return this._typeEquals(v) && this._defaultEquals(v);
    };

    PARAM.prototype._typeEquals = function(v) {
      if (this.type && v.type) {
        return this.type.equals(v.type);
      } else if (this.type === null && v.type === null) {
        return true;
      } else {
        return false;
      }
    };

    PARAM.prototype._defaultEquals = function(v) {
      if (this["default"] && v["default"]) {
        return this["default"].equals(v["default"]);
      } else if (this["default"] === null && v["default"] === null) {
        return true;
      } else {
        return false;
      }
    };

    PARAM.prototype.toString = function() {
      return "{PARAM " + this.name + " " + this.type + " " + this["default"] + "}";
    };

    return PARAM;

  })(AST));

  AST.register(PROCEDURE = (function(_super) {

    __extends(PROCEDURE, _super);

    PROCEDURE.type = 'procedure';

    function PROCEDURE(name, params, body, returns) {
      this.name = name;
      this.params = params;
      this.body = body;
      this.returns = returns != null ? returns : null;
    }

    PROCEDURE.prototype._equals = function(v) {
      var i, param, _i, _len, _ref;
      if (this.name === this.name) {
        _ref = this.params;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          param = _ref[i];
          if (!param.equals(v.params[i])) {
            return false;
          }
        }
        return this.body.equals(v.body);
      } else {
        return false;
      }
    };

    PROCEDURE.prototype.toString = function() {
      return "{PROCEDURE " + this.name + " " + this.params + " " + this.body + " " + this.returns + "}";
    };

    return PROCEDURE;

  })(AST));

  AST.register(IF = (function(_super) {

    __extends(IF, _super);

    IF.type = 'if';

    function IF(_if, then, _else) {
      this["if"] = _if;
      this.then = then;
      this["else"] = _else;
    }

    IF.prototype._equals = function(v) {
      return this["if"].equals(v["if"]) && this.then.equals(v.then) && this["else"].equals(v["else"]);
    };

    IF.prototype.toString = function() {
      return "{IF " + this["if"] + " " + this.then + " " + this["else"] + "}";
    };

    return IF;

  })(AST));

  AST.register(FUNCALL = (function(_super) {

    __extends(FUNCALL, _super);

    FUNCALL.type = 'funcall';

    function FUNCALL(funcall, args) {
      this.funcall = funcall;
      this.args = args;
    }

    FUNCALL.prototype._equals = function(v) {
      var arg, i, _i, _len, _ref;
      if (this.funcall.equals(v.funcall)) {
        if (this.args.length === v.args.length) {
          _ref = this.args;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            arg = _ref[i];
            if (arg.equals(v.args[i])) {
              continue;
            } else {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };

    FUNCALL.prototype.toString = function() {
      return "{FUNCALL " + this.funcall + " " + this.args + "}";
    };

    return FUNCALL;

  })(AST));

  AST.register(DEFINE = (function(_super) {

    __extends(DEFINE, _super);

    DEFINE.type = 'define';

    function DEFINE(name, val) {
      this.name = name;
      this.val = val;
    }

    DEFINE.prototype._equals = function(v) {
      return this.name === v.name && this.val.equals(v.val);
    };

    DEFINE.prototype.toString = function() {
      return "{DEFINE " + this.name + " " + this.val + "}";
    };

    return DEFINE;

  })(AST));

  AST.register(RETURN = (function(_super) {

    __extends(RETURN, _super);

    function RETURN() {
      return RETURN.__super__.constructor.apply(this, arguments);
    }

    RETURN.type = 'return';

    return RETURN;

  })(AST));

  AST.register(BINARY = (function(_super) {

    __extends(BINARY, _super);

    BINARY.type = 'binary';

    function BINARY(op, lhs, rhs) {
      this.op = op;
      this.lhs = lhs;
      this.rhs = rhs;
    }

    BINARY.prototype._equals = function(v) {
      return this.op === v.op && this.lhs.equals(v.lhs) && this.rhs.equals(v.rhs);
    };

    BINARY.prototype.toString = function() {
      return "{" + this.op + " " + this.lhs + " " + this.rhs + "}";
    };

    return BINARY;

  })(AST));

  AST.register(THROW = (function(_super) {

    __extends(THROW, _super);

    function THROW() {
      return THROW.__super__.constructor.apply(this, arguments);
    }

    THROW.type = 'throw';

    return THROW;

  })(AST));

  AST.register(CATCH = (function(_super) {

    __extends(CATCH, _super);

    CATCH.type = 'catch';

    function CATCH(param, body) {
      this.param = param;
      this.body = body;
    }

    CATCH.prototype._equals = function(v) {
      return this.param.equals(v.param) && this.body.equals(v.body);
    };

    CATCH.prototype.toString = function() {
      return "{CATCH " + this.param + " " + this.body + "}";
    };

    return CATCH;

  })(AST));

  AST.register(FINALLY = (function(_super) {

    __extends(FINALLY, _super);

    FINALLY.type = 'finally';

    function FINALLY(body) {
      this.body = body;
    }

    FINALLY.prototype._equals = function(v) {
      return this.body.equals(v.body);
    };

    FINALLY.prototype.toString = function() {
      return "{FINALLY " + this.body + "}";
    };

    return FINALLY;

  })(AST));

  AST.register(TRY = (function(_super) {

    __extends(TRY, _super);

    TRY.type = 'try';

    function TRY(body, _catch, _finally) {
      this.body = body;
      this["catch"] = _catch != null ? _catch : [];
      this["finally"] = _finally != null ? _finally : null;
    }

    TRY.prototype._equals = function(v) {
      var c1, c2, i, _i, _ref;
      if (!this.body.equals(v.body)) {
        return false;
      }
      if (!this["catch"].length === v["catch"].length) {
        return false;
      }
      for (i = _i = 0, _ref = this["catch"].length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        c1 = this["catch"][i];
        c2 = v["catch"][i];
        if (!c1.equals(c2)) {
          return false;
        }
      }
      if (this["finally"] && v["finally"]) {
        return this["finally"].equals(v["finally"]);
      } else if (!this["finally"] && !v["finally"]) {
        return true;
      } else {
        return false;
      }
    };

    TRY.prototype.toString = function() {
      return "{TRY " + this.body + " " + this["catch"] + " " + this["finally"] + "}";
    };

    return TRY;

  })(AST));

  module.exports = AST;

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var ARRAY, ASSIGN, AST, BINARY, BINDING, BLOCK, BOOL, BREAK, CASE, CATCH, CONTINUE, DEFAULTCASE, DEFINE, EXPORT, FINALLY, FUNCALL, IF, IMPORT, LET, LOCAL, MEMBER, MODULE, NULL, NUMBER, OBJECT, PARAM, PROCEDURE, PROXYVAL, REF, RETURN, STRING, SWITCH, SYMBOL, TASK, TASKCALL, THROW, TOPLEVEL, TR, TRY, UNIT, VAR, WHILE, errorlet, loglet, moduleID, runtimeID, util, _hashCode,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  loglet = require('loglet');

  errorlet = require('errorlet');

  TR = require('./trace');

  util = require('./util');

  _hashCode = function(str) {
    var char, i, val, _i, _ref;
    val = 0;
    for (i = _i = 0, _ref = str.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      char = str.charCodeAt(i);
      val = ((val << 5) - val) + char;
      val = val & val;
    }
    return val;
  };

  AST = (function() {

    AST.types = {};

    AST.register = function(astType) {
      if (this.types.hasOwnProperty(astType.type)) {
        throw errorlet.create({
          error: 'ast_type:duplicate',
          type: astType.type,
          ast: ast
        });
      }
      this.types[astType.type] = astType;
      return this[astType.type] = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(astType, args, function(){});
      };
    };

    AST.get = function(type) {
      if (this.types.hasOwnProperty(type)) {
        return this.types[type];
      } else {
        throw errorlet.create({
          error: 'ast_type:unknown',
          type: type
        });
      }
    };

    AST.make = function() {
      var args, astType, type;
      type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      astType = this.get(type);
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(astType, args, function(){});
    };

    AST.isa = function(v, type) {
      return v instanceof this.get(type);
    };

    function AST(value) {
      this.value = value;
    }

    AST.prototype.equals = function(v) {
      return v instanceof this.constructor && this._equals(v);
    };

    AST.prototype._equals = function(v) {
      return v.value === this.value;
    };

    AST.prototype.isa = function(type) {
      return this instanceof AST.get(type);
    };

    AST.prototype.isAsync = function() {
      return false;
    };

    AST.prototype.type = function() {
      return this.constructor.type;
    };

    AST.prototype.hashCode = function() {
      return _hashCode(this.toString());
    };

    AST.prototype.inspect = function() {
      return this.toString();
    };

    AST.prototype.toString = function() {
      return util.prettify(this);
    };

    AST.prototype.canReduce = function() {
      return false;
    };

    return AST;

  })();

  AST.register(SYMBOL = (function(_super) {

    __extends(SYMBOL, _super);

    SYMBOL.type = 'symbol';

    function SYMBOL(value) {
      this.value = value;
    }

    SYMBOL.prototype._equals = function(v) {
      return this === v;
    };

    SYMBOL.prototype.nested = function() {
      return new this.constructor(this.value);
    };

    SYMBOL.prototype.clone = function() {
      return new this.constructor(this.value);
    };

    SYMBOL.prototype.literal = function() {
      return AST.string(this.value);
    };

    SYMBOL.prototype._pretty = function(level, dupe) {
      return "{sym " + this.value + "}";
    };

    return SYMBOL;

  })(AST));

  runtimeID = AST.runtimeID = AST.symbol('_rt');

  moduleID = AST.moduleID = AST.symbol('_module');

  AST.register(STRING = (function(_super) {

    __extends(STRING, _super);

    function STRING() {
      return STRING.__super__.constructor.apply(this, arguments);
    }

    STRING.type = 'string';

    STRING.prototype._pretty = function(level, dupe) {
      return "{str " + this.value + "}";
    };

    return STRING;

  })(AST));

  AST.register(BOOL = (function(_super) {

    __extends(BOOL, _super);

    function BOOL() {
      return BOOL.__super__.constructor.apply(this, arguments);
    }

    BOOL.type = 'bool';

    BOOL.TRUE = new BOOL(true);

    BOOL.FALSE = new BOOL(false);

    BOOL.prototype._pretty = function(level, dupe) {
      return "{bool " + this.value + "}";
    };

    return BOOL;

  })(AST));

  AST.register(NULL = (function(_super) {

    __extends(NULL, _super);

    function NULL() {
      return NULL.__super__.constructor.apply(this, arguments);
    }

    NULL.type = 'null';

    NULL.NULL = new NULL(true);

    NULL.prototype._pretty = function(level, dupe) {
      return "{null}";
    };

    return NULL;

  })(AST));

  AST.register(NUMBER = (function(_super) {

    __extends(NUMBER, _super);

    function NUMBER() {
      return NUMBER.__super__.constructor.apply(this, arguments);
    }

    NUMBER.type = 'number';

    NUMBER.prototype._pretty = function(level, dupe) {
      return "{num " + this.value + "}";
    };

    return NUMBER;

  })(AST));

  AST.register(UNIT = (function(_super) {

    __extends(UNIT, _super);

    UNIT.type = 'unit';

    function UNIT() {}

    UNIT.prototype._equals = function(v) {
      return true;
    };

    UNIT.prototype._pretty = function(level, dupe) {
      return '{unit}';
    };

    return UNIT;

  })(AST));

  AST.register(MEMBER = (function(_super) {

    __extends(MEMBER, _super);

    function MEMBER(head, key) {
      this.head = head;
      this.key = key;
    }

    MEMBER.type = 'member';

    MEMBER.prototype._equals = function(v) {
      return this.head.equals(v.head) && this.key === v.key;
    };

    MEMBER.prototype.canReduce = function() {
      return this.head.canReduce();
    };

    MEMBER.prototype._pretty = function(level, dupe) {
      return [util.nest(level), '{member ', this.head._pretty(level, util.dupe(this, dupe)), ' ', this.key._pretty(level, util.dupe(this, dupe)), util.nest(level), '}'];
    };

    return MEMBER;

  })(AST));

  AST.register(OBJECT = (function(_super) {

    __extends(OBJECT, _super);

    function OBJECT() {
      return OBJECT.__super__.constructor.apply(this, arguments);
    }

    OBJECT.type = 'object';

    OBJECT.prototype._equals = function(v) {
      var i, o1, o2, _i, _ref;
      if (!this.value.length === v.value.length) {
        return false;
      }
      for (i = _i = 0, _ref = this.value.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        o1 = this.value[i];
        o2 = v.value[i];
        if (!o1.equals(o2)) {
          return false;
        }
      }
      return true;
    };

    OBJECT.prototype.canReduce = function() {
      var key, val, _i, _len, _ref, _ref1;
      _ref = this.value;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], key = _ref1[0], val = _ref1[1];
        if (val.canReduce()) {
          return true;
        }
      }
      return false;
    };

    OBJECT.prototype._pretty = function(level, dupe) {
      var i, key, val;
      dupe = util.dupe(this, dupe);
      return [
        util.nest(level), '{object ', (function() {
          var _i, _len, _ref, _ref1, _results;
          _ref = this.value;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            _ref1 = _ref[i], key = _ref1[0], val = _ref1[1];
            _results.push([util.nest(level + 1), (i > 0 ? ', ' : ''), key, ': ', val._pretty(level + 1, dupe)]);
          }
          return _results;
        }).call(this), util.nest(level), '}'
      ];
    };

    return OBJECT;

  })(AST));

  AST.register(ARRAY = (function(_super) {

    __extends(ARRAY, _super);

    function ARRAY() {
      return ARRAY.__super__.constructor.apply(this, arguments);
    }

    ARRAY.type = 'array';

    ARRAY.prototype._equals = function(v) {
      var a1, a2, i, _i, _ref;
      if (!this.value.length === v.value.length) {
        return false;
      }
      for (i = _i = 0, _ref = this.value.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        a1 = this.value[i];
        a2 = v.value[i];
        if (!a1.equals(a2)) {
          return false;
        }
      }
      return true;
    };

    ARRAY.prototype.canReduce = function() {
      var val, _i, _len, _ref;
      _ref = this.value;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        val = _ref[_i];
        if (val.canReduce()) {
          return true;
        }
      }
      return false;
    };

    ARRAY.prototype._pretty = function(level, dupe) {
      var i, item;
      dupe = util.dupe(this, dupe);
      return [
        util.nest(level), '{array', (function() {
          var _i, _len, _ref, _results;
          _ref = this.value;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            item = _ref[i];
            _results.push([(i > 0 ? ', ' : ''), item._pretty(level + 1, dupe)]);
          }
          return _results;
        }).call(this), util.nest(level), '}'
      ];
    };

    return ARRAY;

  })(AST));

  AST.register(BLOCK = (function(_super) {

    __extends(BLOCK, _super);

    function BLOCK(items) {
      this.items = items != null ? items : [];
    }

    BLOCK.type = 'block';

    BLOCK.prototype._equals = function(v) {
      var i, res, val, _i, _len, _ref;
      if (v.items.length === this.items.length) {
        _ref = v.items;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          val = _ref[i];
          res = this.items[i].equals(val);
          if (res) {
            continue;
          } else {
            return false;
          }
        }
        return true;
      } else {
        return false;
      }
    };

    BLOCK.prototype.isAsync = function() {
      var item, _i, _len, _ref;
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.isAsync()) {
          true;
        }
      }
      return false;
    };

    BLOCK.prototype.push = function(item) {
      this.items.push(item);
      return item;
    };

    BLOCK.prototype.canReduce = function() {
      return true;
    };

    BLOCK.prototype._pretty = function(level, dupe) {
      var i, item;
      dupe = util.dupe(this, dupe);
      return [
        util.nest(level), '{block ', (function() {
          var _i, _len, _ref, _results;
          _ref = this.items;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            item = _ref[i];
            _results.push([item._pretty(level + 1, dupe)]);
          }
          return _results;
        }).call(this), util.nest(level), '}'
      ];
    };

    return BLOCK;

  })(AST));

  AST.register(ASSIGN = (function(_super) {

    __extends(ASSIGN, _super);

    ASSIGN.type = 'assign';

    function ASSIGN(name, value) {
      this.name = name;
      this.value = value;
    }

    ASSIGN.prototype._equals = function(v) {
      return this.name === v.name && this.value.equals(v.value);
    };

    ASSIGN.prototype.isAsync = function() {
      return this.value.isAsync();
    };

    ASSIGN.prototype.canReduce = function() {
      return true;
    };

    ASSIGN.prototype._pretty = function(level, dupe) {
      dupe = util.dupe(this, dupe);
      return [util.nest(level), '{assign ', this.name._pretty(level + 1, dupe), ' = ', this.value._pretty(level + 1, dupe), util.nest(level), '}'];
    };

    return ASSIGN;

  })(AST));

  AST.register(DEFINE = (function(_super) {

    __extends(DEFINE, _super);

    DEFINE.type = 'define';

    function DEFINE(name, value) {
      this.name = name;
      this.value = value;
    }

    DEFINE.prototype._equals = function(v) {
      return this.name === v.name && this.value.equals(v.value);
    };

    DEFINE.prototype.isAsync = function() {
      return this.value.isAsync();
    };

    DEFINE.prototype.canReduce = function() {
      return true;
    };

    DEFINE.prototype._pretty = function(level, dupe) {
      dupe = util.dupe(this, dupe);
      return [util.nest(level), '{define ', this.name._pretty(level + 1, dupe), ' = ', this.value._pretty(level + 1, dupe), util.nest(level), '}'];
    };

    return DEFINE;

  })(AST));

  AST.register(LOCAL = (function(_super) {

    __extends(LOCAL, _super);

    LOCAL.type = 'local';

    function LOCAL(name, value) {
      this.name = name;
      this.value = value;
    }

    LOCAL.prototype._equals = function(v) {
      return this.name === v.name && this.value.equals(v.value);
    };

    LOCAL.prototype.isAsync = function() {
      var _ref;
      return ((_ref = this.value) != null ? _ref.isAsync() : void 0) || false;
    };

    LOCAL.prototype.noInit = function() {
      return AST.local(this.name);
    };

    LOCAL.prototype.assign = function(value) {
      if (value == null) {
        value = this.value;
      }
      return AST.assign(this.name, value);
    };

    LOCAL.prototype.canReduce = function() {
      return true;
    };

    LOCAL.prototype._pretty = function(level, dupe) {
      dupe = util.dupe(this, dupe);
      return [util.nest(level), '{local ', this.name._pretty(level + 1, dupe), this.value ? [' = ', this.value._pretty(level + 1, dupe)] : '', util.nest(level), '}'];
    };

    return LOCAL;

  })(AST));

  AST.register(REF = (function(_super) {

    __extends(REF, _super);

    REF.type = 'ref';

    function REF(name, value, level) {
      this.name = name;
      this.value = value;
      this.level = level;
      this.isDefine = false;
    }

    REF.prototype._equals = function(v) {
      return this === v;
    };

    REF.prototype.isAsync = function() {
      return false;
    };

    REF.prototype.isPlaceholder = function() {
      return !this.value;
    };

    REF.prototype.define = function() {
      if (this.isDefine) {
        return AST.define(this, this.value);
      } else {
        return AST.local(this, this.value);
      }
    };

    REF.prototype.clone = function() {
      return AST.ref(this.name.clone(), this.value, this.level);
    };

    REF.prototype.assign = function() {
      return AST.assign(this, this.value);
    };

    REF.prototype["export"] = function(as) {
      this.as = as != null ? as : null;
      return AST["export"]([AST.binding(this, this.as)]);
    };

    REF.prototype.literal = function() {
      return this.name.literal();
    };

    REF.prototype.normalName = function() {
      return this.name;
    };

    REF.prototype._pretty = function(level, dupe) {
      return ['{ref ', (this.isDefine ? '!' : ''), this.name._pretty(level, dupe), '}'];
    };

    return REF;

  })(AST));

  AST.register(PROXYVAL = (function(_super) {

    __extends(PROXYVAL, _super);

    PROXYVAL.type = 'proxyval';

    function PROXYVAL(name, compiler) {
      this.name = name;
      this.compiler = compiler;
    }

    PROXYVAL.prototype._pretty = function(level, dupe) {
      return ['{proxyval ', this.name._pretty(level, dupe), '}'];
    };

    return PROXYVAL;

  })(AST));

  AST.register(PARAM = (function(_super) {

    __extends(PARAM, _super);

    function PARAM(name, paramType, _default) {
      this.name = name;
      this.paramType = paramType != null ? paramType : null;
      this["default"] = _default != null ? _default : null;
    }

    PARAM.type = 'param';

    PARAM.prototype._equals = function(v) {
      return this._typeEquals(v) && this._defaultEquals(v);
    };

    PARAM.prototype._typeEquals = function(v) {
      if (this.paramType && v.paramType) {
        return this.paramType.equals(v.paramType);
      } else if (this.paramType === null && v.paramType === null) {
        return true;
      } else {
        return false;
      }
    };

    PARAM.prototype._defaultEquals = function(v) {
      if (this["default"] && v["default"]) {
        return this["default"].equals(v["default"]);
      } else if (this["default"] === null && v["default"] === null) {
        return true;
      } else {
        return false;
      }
    };

    PARAM.prototype.ref = function() {
      return AST.ref(this.name, this);
    };

    PARAM.prototype._pretty = function(level, dupe) {
      return ['{param ', this.name._pretty(level, dupe), '}'];
    };

    return PARAM;

  })(AST));

  AST.register(PROCEDURE = (function(_super) {

    __extends(PROCEDURE, _super);

    PROCEDURE.type = 'procedure';

    function PROCEDURE(name, params, body, returns) {
      this.name = name;
      this.params = params;
      this.body = body != null ? body : AST.unit();
      this.returns = returns != null ? returns : null;
    }

    PROCEDURE.prototype._equals = function(v) {
      var i, param, _i, _len, _ref;
      if (this.name === this.name) {
        _ref = this.params;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          param = _ref[i];
          if (!param.equals(v.params[i])) {
            return false;
          }
        }
        return this.body.equals(v.body);
      } else {
        return false;
      }
    };

    PROCEDURE.prototype._pretty = function(level, dupe) {
      var param;
      dupe = util.dupe(this, dupe);
      return [
        util.nest(level), '{proc ', (this.name ? this.name._pretty(level + 1, dupe) : ''), ' (', (function() {
          var _i, _len, _ref, _results;
          _ref = this.params;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            param = _ref[_i];
            _results.push([' ', param._pretty(level + 1, dupe)]);
          }
          return _results;
        }).call(this), ') ', this.body._pretty(level + 1, dupe), util.nest(level), '}'
      ];
    };

    return PROCEDURE;

  })(AST));

  AST.register(LET = (function(_super) {

    __extends(LET, _super);

    LET.type = 'let';

    function LET(defines, body) {
      this.defines = defines;
      this.body = body;
    }

    LET.prototype._equals = function(v) {
      return this === v;
    };

    LET.prototype._pretty = function(level, dupe) {
      var define;
      dupe = util.dupe(this, dupe);
      return [
        util.nest(level), '{let ', [
          '(', (function() {
            var _i, _len, _ref, _results;
            _ref = this.defines;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              define = _ref[_i];
              _results.push(define._pretty(level + 1, dupe));
            }
            return _results;
          }).call(this), ')'
        ], ' = ', this.body._pretty(level + 1, dupe), util.nest(level), '}'
      ];
    };

    return LET;

  })(AST));

  AST.register(TASK = (function(_super) {

    __extends(TASK, _super);

    TASK.type = 'task';

    function TASK(name, params, body, returns) {
      this.name = name;
      this.params = params;
      this.body = body;
      this.returns = returns != null ? returns : null;
      this.callbackParam = AST.param(AST.symbol('cb'));
      this.errorParam = AST.param(AST.symbol('e'));
    }

    TASK.prototype._equals = function(v) {
      var i, param, _i, _len, _ref;
      if (this.name === this.name) {
        _ref = this.params;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          param = _ref[i];
          if (!param.equals(v.params[i])) {
            return false;
          }
        }
        return this.body.equals(v.body);
      } else {
        return false;
      }
    };

    TASK.prototype.isAsync = function() {
      return this.body.isAsync();
    };

    TASK.prototype._pretty = function(level, dupe) {
      var param;
      dupe = util.dupe(this, dupe);
      return [
        util.nest(level), '{task ', (this.name ? this.name._pretty(level + 1, dupe) : ''), ' (', (function() {
          var _i, _len, _ref, _results;
          _ref = this.params;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            param = _ref[_i];
            _results.push([param._pretty(level + 1, dupe), ' ']);
          }
          return _results;
        }).call(this), ') ', this.body._pretty(level + 1, dupe), util.nest(level), '}'
      ];
    };

    return TASK;

  })(AST));

  AST.register(IF = (function(_super) {

    __extends(IF, _super);

    IF.type = 'if';

    function IF(cond, then, _else) {
      this.cond = cond;
      this.then = then;
      this["else"] = _else;
    }

    IF.prototype._equals = function(v) {
      return this.cond.equals(v.cond) && this.then.equals(v.then) && this["else"].equals(v["else"]);
    };

    IF.prototype.isAsync = function() {
      return this.then.isAsync() || this["else"].isAsync();
    };

    IF.prototype.canReduce = function() {
      return true;
    };

    IF.prototype._pretty = function(level, dupe) {
      dupe = util.dupe(this, dupe);
      return [util.nest(level), '{if ', this.cond._pretty(level + 1, dupe), ' ', this.then._pretty(level + 1, dupe), ' ', this["else"]._pretty(level + 1, dupe), util.nest(level), '}'];
    };

    return IF;

  })(AST));

  AST.register(FUNCALL = (function(_super) {

    __extends(FUNCALL, _super);

    FUNCALL.type = 'funcall';

    function FUNCALL(funcall, args) {
      this.funcall = funcall;
      this.args = args;
    }

    FUNCALL.prototype._equals = function(v) {
      var arg, i, _i, _len, _ref;
      if (this.funcall.equals(v.funcall)) {
        if (this.args.length === v.args.length) {
          _ref = this.args;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            arg = _ref[i];
            if (arg.equals(v.args[i])) {
              continue;
            } else {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };

    FUNCALL.prototype.canReduce = function() {
      var arg, _i, _len, _ref;
      if (this.funcall.canReduce()) {
        return true;
      }
      _ref = this.args;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arg = _ref[_i];
        if (arg.canReduce()) {
          return true;
        }
      }
      return false;
    };

    FUNCALL.prototype._pretty = function(level, dupe) {
      var arg, i;
      dupe = util.dupe(this, dupe);
      return [
        util.nest(level), '{funcall ', this.funcall._pretty(level + 1, dupe), ' ', (function() {
          var _i, _len, _ref, _results;
          _ref = this.args;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            arg = _ref[i];
            _results.push([i > 0 ? ', ' : '', arg._pretty(level + 1, dupe)]);
          }
          return _results;
        }).call(this), util.nest(level), '}'
      ];
    };

    return FUNCALL;

  })(AST));

  AST.register(TASKCALL = (function(_super) {

    __extends(TASKCALL, _super);

    function TASKCALL() {
      return TASKCALL.__super__.constructor.apply(this, arguments);
    }

    TASKCALL.type = 'taskcall';

    TASKCALL.prototype.isAsync = function() {
      return true;
    };

    TASKCALL.prototype._pretty = function(level, dupe) {
      var arg, i;
      dupe = util.dupe(this, dupe);
      return [
        util.nest(level), '{taskcall ', this.funcall._pretty(level + 1, dupe), ' ', (function() {
          var _i, _len, _ref, _results;
          _ref = this.args;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            arg = _ref[i];
            _results.push([i > 0 ? ', ' : '', arg._pretty(level + 1, dupe)]);
          }
          return _results;
        }).call(this), util.nest(level), '}'
      ];
    };

    return TASKCALL;

  })(FUNCALL));

  AST.register(RETURN = (function(_super) {

    __extends(RETURN, _super);

    function RETURN() {
      return RETURN.__super__.constructor.apply(this, arguments);
    }

    RETURN.type = 'return';

    RETURN.prototype.isAsync = function() {
      return this.value.isAsync();
    };

    RETURN.prototype.canReduce = function() {
      return this.value.canReduce();
    };

    RETURN.prototype._pretty = function(level, dupe) {
      dupe = util.dupe(this, dupe);
      return ['{return ', this.value._pretty(level + 1, dupe), '}'];
    };

    return RETURN;

  })(AST));

  AST.register(BINARY = (function(_super) {

    __extends(BINARY, _super);

    BINARY.type = 'binary';

    function BINARY(op, lhs, rhs) {
      this.op = op;
      this.lhs = lhs;
      this.rhs = rhs;
    }

    BINARY.prototype._equals = function(v) {
      return this.op === v.op && this.lhs.equals(v.lhs) && this.rhs.equals(v.rhs);
    };

    BINARY.prototype.canReduce = function() {
      return this.lhs.canReduce() || this.rhs.canReduce();
    };

    BINARY.prototype._pretty = function(level, dupe) {
      dupe = util.dupe(this, dupe);
      return [util.nest(level), "{" + this.op + " ", this.lhs._pretty(level + 1, dupe), ' ', this.rhs._pretty(level + 1, dupe), util.nest(level), '}'];
    };

    return BINARY;

  })(AST));

  AST.register(THROW = (function(_super) {

    __extends(THROW, _super);

    function THROW() {
      return THROW.__super__.constructor.apply(this, arguments);
    }

    THROW.type = 'throw';

    THROW.prototype.canReduce = function() {
      return this.value.canReduce();
    };

    THROW.prototype._pretty = function(level, dupe) {
      dupe = util.dupe(this, dupe);
      return ['{throw ', this.value._pretty(level + 1, dupe), '}'];
    };

    return THROW;

  })(AST));

  AST.register(CATCH = (function(_super) {

    __extends(CATCH, _super);

    CATCH.type = 'catch';

    function CATCH(param, body) {
      this.param = param != null ? param : AST.param(AST.symbol('e'));
      this.body = body != null ? body : AST.block([AST["throw"](this.param.name)]);
    }

    CATCH.prototype._equals = function(v) {
      return this.param.equals(v.param) && this.body.equals(v.body);
    };

    CATCH.prototype.isAsync = function() {
      return this.body.isAsync();
    };

    CATCH.prototype.canReduce = function() {
      return true;
    };

    CATCH.prototype._pretty = function(level, dupe) {
      dupe = util.dupe(this, dupe);
      return [util.nest(level), '{catch ', this.param._pretty(level + 1, dupe), ' ', this.body._pretty(level + 1, dupe), util.nest(level), '}'];
    };

    return CATCH;

  })(AST));

  AST.register(FINALLY = (function(_super) {

    __extends(FINALLY, _super);

    FINALLY.type = 'finally';

    function FINALLY(body) {
      this.body = body;
    }

    FINALLY.prototype._equals = function(v) {
      return this.body.equals(v.body);
    };

    FINALLY.prototype.isAsync = function() {
      return this.body.isAsync();
    };

    FINALLY.prototype.canReduce = function() {
      return this.body.canReduce();
    };

    FINALLY.prototype._pretty = function(level, dupe) {
      dupe = util.dupe(this, dupe);
      return [util.nest(level), '{finally ', this.body._pretty(level + 1, dupe), util.nest(level), '}'];
    };

    return FINALLY;

  })(AST));

  AST.register(TRY = (function(_super) {

    __extends(TRY, _super);

    TRY.type = 'try';

    function TRY(body, catches, _finally) {
      this.body = body;
      this.catches = catches != null ? catches : [];
      this["finally"] = _finally != null ? _finally : null;
    }

    TRY.prototype._equals = function(v) {
      var c1, c2, i, _i, _ref;
      if (!this.body.equals(v.body)) {
        return false;
      }
      if (!this.catches.length === v.catches.length) {
        return false;
      }
      for (i = _i = 0, _ref = this.catches.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        c1 = this.catches[i];
        c2 = v.catches[i];
        if (!c1.equals(c2)) {
          return false;
        }
      }
      if (this["finally"] && v["finally"]) {
        return this["finally"].equals(v["finally"]);
      } else if (!this["finally"] && !v["finally"]) {
        return true;
      } else {
        return false;
      }
    };

    TRY.prototype.isAsync = function() {
      var c, _i, _len, _ref, _ref1;
      if (this.body.isAsync()) {
        return true;
      } else {
        _ref = this.catches;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          if (c.isAsync()) {
            return true;
          }
        }
        return ((_ref1 = this["finally"]) != null ? _ref1.isAsync() : void 0) || false;
      }
    };

    TRY.prototype.canReduce = function() {
      return true;
    };

    TRY.prototype._pretty = function(level, dupe) {
      var c;
      dupe = util.dupe(this, dupe);
      return [
        util.nest(level), '{try ', this.body._pretty(level + 1, dupe), ' ', (function() {
          var _i, _len, _ref, _results;
          _ref = this.catches;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            _results.push([c._pretty(level + 1, dupe), ' ']);
          }
          return _results;
        }).call(this), ' ', (this["finally"] ? this["finally"]._dupe(level + 1, dupe) : ''), util.nest(level), '}'
      ];
    };

    return TRY;

  })(AST));

  AST.register(TOPLEVEL = (function(_super) {

    __extends(TOPLEVEL, _super);

    TOPLEVEL.type = 'toplevel';

    function TOPLEVEL(body) {
      if (body == null) {
        body = AST.unit();
      }
      this.moduleParam = AST.param(moduleID);
      this.callbackParam = AST.param(AST.symbol('_done'));
      this.errorParam = AST.param(AST.symbol('e'));
      this.body = this.normalizeBody(body);
      this.imports = this.extractImports(this.body);
    }

    TOPLEVEL.prototype.extractImports = function(ast, results) {
      var item, _i, _len, _ref;
      if (results == null) {
        results = [];
      }
      switch (ast.type()) {
        case 'block':
          _ref = ast.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            this.extractImports(item, results);
          }
          return results;
        case 'import':
          results.push(ast);
          return results;
        default:
          return results;
      }
    };

    TOPLEVEL.prototype.clone = function(body) {
      var toplevel;
      if (body == null) {
        body = this.body;
      }
      toplevel = new this.constructor();
      toplevel.body = body;
      toplevel.moduleParam = this.moduleParam;
      toplevel.callbackParam = this.callbackParam;
      toplevel.errorParam = this.errorParam;
      toplevel.imports = this.imports;
      return toplevel;
    };

    TOPLEVEL.prototype.importSpecs = function() {
      var imp, _i, _len, _ref, _results;
      _ref = this.imports;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        imp = _ref[_i];
        _results.push(imp.importSpec());
      }
      return _results;
    };

    TOPLEVEL.prototype.normalizeBlock = function(body) {
      if (body.items.length === 1 && body.items[0].type() === 'define') {
        body.push(AST.unit());
      }
      return body;
    };

    TOPLEVEL.prototype.normalizeBody = function(body) {
      switch (body.type()) {
        case 'block':
          return this.normalizeBlock(body);
        case 'define':
          return this.normalizeDefine(body);
        default:
          return this.normalizeOther(body);
      }
    };

    TOPLEVEL.prototype.normalizeDefine = function(body) {
      return AST.block([body, AST.unit()]);
    };

    TOPLEVEL.prototype.normalizeOther = function(body) {
      return AST.block([body]);
    };

    TOPLEVEL.prototype._equals = function(v) {
      return this.body.equals(v.body);
    };

    TOPLEVEL.prototype.isAsync = function() {
      return true;
    };

    TOPLEVEL.prototype._pretty = function(level, dupe) {
      dupe = util.dupe(this, dupe);
      return [util.nest(level), '{toplevel ', this.body._pretty(level + 1, dupe), util.nest(level), '}'];
    };

    return TOPLEVEL;

  })(AST));

  AST.register(MODULE = (function(_super) {

    __extends(MODULE, _super);

    MODULE.type = 'module';

    function MODULE(spec, body) {
      this.spec = spec != null ? spec : AST.string('/');
      if (body == null) {
        body = AST.unit();
      }
      MODULE.__super__.constructor.call(this, body);
      this.id = this.normalizeSpec(this.spec);
    }

    MODULE.prototype.normalizeSpec = function(spec) {
      return AST.param(AST.symbol(spec.value.replace(/[\.\/\\]/g, '_')));
    };

    MODULE.prototype.normalizeBody = function(body) {
      body = MODULE.__super__.normalizeBody.call(this, body);
      switch (body.type()) {
        case 'block':
          body.items.push(this.moduleParam.ref());
          return body;
        default:
          return AST.block([body, this.moduleParam.ref()]);
      }
    };

    MODULE.prototype.clone = function(body) {
      var module;
      if (body == null) {
        body = this.body;
      }
      module = MODULE.__super__.clone.call(this, body);
      module.spec = this.spec;
      module.id = this.normalizeSpec(this.spec);
      return module;
    };

    MODULE.prototype._pretty = function(level, dupe) {
      return [util.nest(level), "{module " + (this.spec._pretty(level, dupe)) + " ", this.body._pretty(level + 1, util.dupe(this, dupe)), util.nest(level), '}'];
    };

    return MODULE;

  })(TOPLEVEL));

  AST.register(BINDING = (function(_super) {

    __extends(BINDING, _super);

    BINDING.type = 'binding';

    function BINDING(spec, as) {
      this.spec = spec;
      this.as = as != null ? as : null;
      if (!this.as) {
        this.as = this.spec;
      }
    }

    BINDING.prototype._pretty = function(level, dupe) {
      dupe = util.dupe(this, dupe);
      return [util.nest(level), '{as ', this.spec._pretty(level + 1, dupe), ' ', this.as._pretty(level + 1, dupe), util.nest(level), '}'];
    };

    return BINDING;

  })(AST));

  AST.register(IMPORT = (function(_super) {

    __extends(IMPORT, _super);

    IMPORT.type = 'import';

    function IMPORT(spec, bindings) {
      this.spec = spec;
      this.bindings = bindings != null ? bindings : [];
      this.idParam = this.normalizeSpec(this.spec);
    }

    IMPORT.prototype.normalizeSpec = function() {
      return AST.param(AST.symbol(this.spec.value.replace(/[\.\/\\]/g, '_')));
    };

    IMPORT.prototype.defines = function() {
      var binding, _i, _len, _ref, _results;
      _ref = this.bindings;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        binding = _ref[_i];
        _results.push(this.define(binding));
      }
      return _results;
    };

    IMPORT.prototype.define = function(binding) {
      return AST.define(binding.as, AST.funcall(AST.member(this.idParam.ref(), AST.symbol('get')), [binding.spec.literal()]));
    };

    IMPORT.prototype.proxy = function(binding) {
      return AST.proxyval(binding.as, AST.funcall(AST.member(moduleID, AST.symbol('get')), [binding.spec.literal()]));
    };

    IMPORT.prototype.importSpec = function() {
      return this.spec.value;
    };

    IMPORT.prototype._pretty = function(level, dupe) {
      var b;
      dupe = util.dupe(this, dupe);
      return [
        util.nest(level), "{import ", this.spec.toString(), ' ', (function() {
          var _i, _len, _ref, _results;
          _ref = this.bindings;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            b = _ref[_i];
            _results.push([b._pretty(level + 1, dupe), ' ']);
          }
          return _results;
        }).call(this), util.nest(level), '}'
      ];
    };

    return IMPORT;

  })(AST));

  AST.register(EXPORT = (function(_super) {

    __extends(EXPORT, _super);

    EXPORT.type = 'export';

    function EXPORT(bindings) {
      this.bindings = bindings != null ? bindings : [];
    }

    EXPORT.prototype.isAsync = function() {
      return false;
    };

    EXPORT.prototype._pretty = function(level, dupe) {
      var b;
      dupe = util.dupe(this, dupe);
      return [
        util.nest(level), "{export ", (function() {
          var _i, _len, _ref, _results;
          _ref = this.bindings;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            b = _ref[_i];
            _results.push([b._pretty(level + 1, dupe), ' ']);
          }
          return _results;
        }).call(this), util.nest(level), '}'
      ];
    };

    return EXPORT;

  })(AST));

  /*
  
  WHILE, CONTINUE, SWITCH, CASE, and DEFAULT
  
  These are used for tail call transformations.
  */


  AST.register(VAR = (function(_super) {

    __extends(VAR, _super);

    VAR.type = 'var';

    function VAR(name) {
      this.name = name;
    }

    VAR.prototype._pretty = function(level, dupe) {
      return ['{var ', this.name._pretty(level + 1, dupe), '}'];
    };

    return VAR;

  })(AST));

  AST.register(WHILE = (function(_super) {

    __extends(WHILE, _super);

    WHILE.type = 'while';

    function WHILE(cond, block) {
      this.cond = cond;
      this.block = block;
    }

    WHILE.prototype._equals = function(v) {
      return this.cond.equals(v.cond) && this.block.equals(v.block);
    };

    WHILE.prototype.isAsync = function() {
      return this.cond.isAsync() || this.block.isAsync();
    };

    WHILE.prototype._pretty = function(level, dupe) {
      dupe = util.dupe(this, dupe);
      return [util.nest(level), '{while ', this.cond._pretty(level + 1, dupe), ' ', this.block._pretty(level + 1, dupe), util.nest(level), '}'];
    };

    return WHILE;

  })(AST));

  AST.register(CONTINUE = (function(_super) {

    __extends(CONTINUE, _super);

    function CONTINUE() {
      return CONTINUE.__super__.constructor.apply(this, arguments);
    }

    CONTINUE.type = 'continue';

    CONTINUE.prototype._pretty = function(level, dupe) {
      return "{continue}";
    };

    return CONTINUE;

  })(AST));

  AST.register(BREAK = (function(_super) {

    __extends(BREAK, _super);

    function BREAK() {
      return BREAK.__super__.constructor.apply(this, arguments);
    }

    BREAK.type = 'break';

    BREAK.prototype._pretty = function(level, dupe) {
      return "{break}";
    };

    return BREAK;

  })(AST));

  AST.register(SWITCH = (function(_super) {

    __extends(SWITCH, _super);

    SWITCH.type = 'switch';

    function SWITCH(cond, cases) {
      this.cond = cond;
      this.cases = cases != null ? cases : [];
    }

    SWITCH.prototype._pretty = function(level, dupe) {
      var c;
      dupe = util.dupe(this, dupe);
      return [
        util.nest(level), '{switch ', this.cond._pretty(level + 1, dupe), ' ', (function() {
          var _i, _len, _ref, _results;
          _ref = this.cases;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            _results.push([c._pretty(level + 1, dupe), ' ']);
          }
          return _results;
        }).call(this), util.nest(level), '}'
      ];
    };

    return SWITCH;

  })(AST));

  AST.register(CASE = (function(_super) {

    __extends(CASE, _super);

    CASE.type = 'case';

    function CASE(cond, exp) {
      this.cond = cond;
      this.exp = exp;
    }

    CASE.prototype._pretty = function(level, dupe) {
      dupe = util.dupe(this, dupe);
      return [util.nest(level), '{case ', this.cond._pretty(level + 1, dupe), ': ', this.exp._pretty(level + 1, dupe), util.nest(level), '}'];
    };

    return CASE;

  })(AST));

  AST.register(DEFAULTCASE = (function(_super) {

    __extends(DEFAULTCASE, _super);

    DEFAULTCASE.type = 'defaultCase';

    function DEFAULTCASE(exp) {
      this.exp = exp;
    }

    DEFAULTCASE.prototype._pretty = function(level, dupe) {
      dupe = util.dupe(this, dupe);
      return [util.nest(level), '{default: ', this.exp._pretty(level + 1, dupe), util.nest(level), '}'];
    };

    return DEFAULTCASE;

  })(AST));

  module.exports = AST;

}).call(this);

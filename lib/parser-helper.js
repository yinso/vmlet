// Generated by CoffeeScript 1.4.0
(function() {
  var AST, ArgsArray, argsArray, array, block, bool, catchAST, define, finallyAST, funcDecl, ifAST, loglet, member, nullAST, number, object, operator, param, string, symbol, taskDecl, taskcall, throwAST, tryAST;

  AST = require('./ast');

  loglet = require('loglet');

  number = function(num, frac, exp) {
    return AST.make('number', parseFloat([num, frac, exp].join('')));
  };

  bool = function(val) {
    return AST.make('bool', val);
  };

  nullAST = function() {
    return AST.make('null', null);
  };

  operator = function(lhs, rest) {
    var helper, temp;
    helper = function(lhs, rhs) {
      return AST.make('binary', rhs.op, lhs, rhs.rhs);
    };
    if (rest.length === 0) {
      return lhs;
    }
    temp = lhs;
    while (rest.length > 0) {
      temp = helper(temp, rest.shift());
    }
    return temp;
  };

  object = function(keyVals) {
    return AST.make('object', keyVals);
  };

  array = function(items) {
    return AST.make('array', items);
  };

  symbol = function(c1, rest) {
    var sym;
    sym = [c1].concat(rest).join('');
    switch (sym) {
      case 'true':
        return AST.make('bool', true);
      case 'false':
        return AST.make('bool', false);
      case 'null':
        return AST.make('null', null);
      default:
        return AST.make('symbol', sym);
    }
  };

  string = function(chars) {
    var str;
    str = chars instanceof Array ? chars.join('') : chars;
    return AST.make('string', str);
  };

  ArgsArray = (function() {

    function ArgsArray(args) {
      this.args = args;
    }

    return ArgsArray;

  })();

  argsArray = function(args) {
    return new ArgsArray(args);
  };

  member = function(head, keys) {
    var key, result, _i, _len;
    result = head;
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      if (key instanceof ArgsArray) {
        result = AST.make('funcall', result, key.args);
      } else {
        result = AST.make('member', result, key);
      }
    }
    return result;
  };

  block = function(exps) {
    if (exps.length === 1) {
      return exps[0];
    } else {
      return AST.make('block', exps);
    }
  };

  ifAST = function(condE, thenE, elseE) {
    return AST.make('if', condE, thenE, elseE);
  };

  define = function(id, val) {
    return AST.make('define', id.val, val);
  };

  param = function(name) {
    return AST.make('param', name);
  };

  funcDecl = function(name, params, body, returns) {
    if (returns == null) {
      returns = null;
    }
    return AST.make('procedure', (name ? name.val : name), params, body, returns);
  };

  taskDecl = function(name, params, body, returns) {
    if (returns == null) {
      returns = null;
    }
    return AST.make('task', (name ? name.val : name), params, body, returns);
  };

  taskcall = function(inner) {
    if (AST.isa(inner, 'funcall')) {
      return AST.make('taskcall', inner.funcall, inner.args);
    } else {
      return inner;
    }
  };

  throwAST = function(e) {
    return AST.make('throw', e);
  };

  finallyAST = function(body) {
    return AST.make('finally', body);
  };

  catchAST = function(param, body) {
    return AST.make('catch', param, body);
  };

  tryAST = function(body, catches, fin) {
    return AST.make('try', body, catches, fin);
  };

  module.exports = {
    number: number,
    bool: bool,
    operator: operator,
    object: object,
    array: array,
    symbol: symbol,
    string: string,
    member: member,
    block: block,
    "if": ifAST,
    "null": nullAST,
    define: define,
    "arguments": argsArray,
    param: param,
    "function": funcDecl,
    task: taskDecl,
    taskcall: taskcall,
    "throw": throwAST,
    "try": tryAST,
    "catch": catchAST,
    "finally": finallyAST
  };

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var AST, Environment, TR, compile, escodegen, esnode, get, register, types, _array, _assign, _binary, _block, _break, _case, _catch, _compile, _continue, _default, _define, _export, _finally, _funcall, _if, _import, _importBinding, _importID, _importSpec, _literal, _local, _member, _module, _null, _number, _object, _param, _procedure, _proxyval, _ref, _return, _switch, _symbol, _task, _throw, _toplevel, _try, _undefined, _while,
    __slice = [].slice;

  escodegen = require('escodegen');

  esnode = require('./esnode');

  AST = require('./ast');

  TR = require('./trace');

  Environment = require('./symboltable');

  types = {};

  register = function(ast, compiler) {
    if (types.hasOwnProperty(ast.type)) {
      throw new Error("compiler:duplicate_type: " + ast.type);
    }
    return types[ast.type] = compiler;
  };

  get = function(ast) {
    if (types.hasOwnProperty(ast.type())) {
      return types[ast.type()];
    } else {
      throw new Error("compiler:unknown_type: " + (ast.type()));
    }
  };

  compile = function(ast) {
    var node;
    node = _compile(ast, new Environment());
    return '(' + escodegen.generate(node) + ')';
  };

  _compile = function(ast, env, res) {
    var compiler;
    compiler = get(ast);
    return compiler(ast, env);
  };

  _literal = function(ast, env) {
    return esnode.literal(ast.value);
  };

  register(AST.get('string'), _literal);

  register(AST.get('bool'), _literal);

  _number = function(ast, env) {
    if (ast.value < 0) {
      return esnode.unary('-', esnode.literal(-ast.value));
    } else {
      return esnode.literal(ast.value);
    }
  };

  register(AST.get('number'), _number);

  _null = function(ast, env) {
    return esnode.null_();
  };

  register(AST.get('null'), _null);

  _undefined = function(ast, env) {
    return esnode.undefined_();
  };

  register(AST.get('unit'), _undefined);

  _member = function(ast, env) {
    var head, key;
    head = _compile(ast.head, env);
    key = ast.key.type() === 'symbol' ? esnode.literal(ast.key.value) : _compile(ast.key, env);
    return esnode.funcall(esnode.member(_compile(AST.runtimeID, env), esnode.identifier('member')), [head, key]);
  };

  register(AST.get('member'), _member);

  _symbol = function(ast, env) {
    return env.alias(ast);
  };

  register(AST.get('symbol'), _symbol);

  _object = function(ast, env) {
    var key, val;
    return esnode.object((function() {
      var _i, _len, _ref, _ref1, _results;
      _ref = ast.value;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], key = _ref1[0], val = _ref1[1];
        _results.push([key, _compile(val, env)]);
      }
      return _results;
    })());
  };

  register(AST.get('object'), _object);

  _array = function(ast, env) {
    var item;
    return esnode.array((function() {
      var _i, _len, _ref, _results;
      _ref = ast.value;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(_compile(item, env));
      }
      return _results;
    })());
  };

  register(AST.get('array'), _array);

  _block = function(ast, env) {
    var item;
    return esnode.block((function() {
      var _i, _len, _ref, _results;
      _ref = ast.items;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(_compile(item, env));
      }
      return _results;
    })());
  };

  register(AST.get('block'), _block);

  _assign = function(ast, env) {
    return esnode.assign(_compile(ast.name, env), _compile(ast.value, env));
  };

  register(AST.get('assign'), _assign);

  _define = function(ast, env) {
    var id, name, value;
    name = (function() {
      switch (ast.name.type()) {
        case 'ref':
          return esnode.literal(ast.name.name.value);
        case 'symbol':
          return esnode.literal(ast.name.value);
        default:
          throw new Error("escompile.define:unknown_name_type: " + ast.name);
      }
    })();
    value = esnode.funcall(esnode.member(_compile(AST.moduleID, env), esnode.identifier('define')), [name, _compile(ast.value, new Environment(env))]);
    id = (function() {
      switch (ast.name.type()) {
        case 'ref':
          return _compile(ast.name.normalName(), env);
        case 'symbol':
          return _compile(ast.name, env);
        default:
          throw new Error("escompile.define:unknown_name_type: " + ast.name);
      }
    })();
    return esnode.declare('var', [id, value]);
  };

  register(AST.get('define'), _define);

  _local = function(ast, env) {
    if (!ast.value) {
      return esnode.declare('var', [_compile(ast.name, env)]);
    } else {
      return esnode.declare('var', [_compile(ast.name, env), _compile(ast.value, env)]);
    }
  };

  register(AST.get('local'), _local);

  _ref = function(ast, env) {
    var _ref1;
    if (((_ref1 = ast.value) != null ? _ref1.type() : void 0) === 'proxyval') {
      return _compile(ast.value, env);
    } else if (ast.isDefine) {
      return esnode.funcall(esnode.member(_compile(AST.moduleID, env), esnode.identifier('get')), [esnode.literal(ast.name.value)]);
    } else {
      return _compile(ast.name, env);
    }
  };

  register(AST.get('ref'), _ref);

  _proxyval = function(ast, env) {
    var res;
    res = typeof ast.compiler === 'function' || ast.compiler instanceof Function ? ast.compiler(env) : ast.compiler instanceof AST ? _compile(ast.compiler, env) : _compile(ast.name, env);
    return res;
  };

  register(AST.get('proxyval'), _proxyval);

  _param = function(ast, env) {
    return _compile(ast.name, env);
  };

  register(AST.get('param'), _param);

  _procedure = function(ast, env) {
    var func, maker, name, param;
    name = ast.name ? _compile(ast.name, env) : null;
    func = esnode["function"](name, (function() {
      var _i, _len, _ref1, _results;
      _ref1 = ast.params;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        param = _ref1[_i];
        _results.push(_compile(param, env));
      }
      return _results;
    })(), _compile(ast.body, env));
    maker = esnode.member(_compile(AST.runtimeID, env), esnode.identifier('proc'));
    return esnode.funcall(maker, [func]);
  };

  register(AST.get('procedure'), _procedure);

  _task = function(ast, env) {
    var name, param;
    name = ast.name ? _compile(ast.name, env) : null;
    return esnode["function"](name, (function() {
      var _i, _len, _ref1, _results;
      _ref1 = ast.params;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        param = _ref1[_i];
        _results.push(_compile(param, env));
      }
      return _results;
    })(), _compile(ast.body, env));
  };

  register(AST.get('task'), _task);

  _if = function(ast, env) {
    return esnode["if"](_compile(ast.cond, env), _compile(ast.then, env), _compile(ast["else"], env));
  };

  register(AST.get('if'), _if);

  _funcall = function(ast, env) {
    var arg;
    return esnode.funcall(_compile(ast.funcall, env), (function() {
      var _i, _len, _ref1, _results;
      _ref1 = ast.args;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        arg = _ref1[_i];
        _results.push(_compile(arg, env));
      }
      return _results;
    })());
  };

  register(AST.get('funcall'), _funcall);

  register(AST.get('taskcall'), _funcall);

  _return = function(ast, env) {
    return esnode["return"](_compile(ast.value, env));
  };

  register(AST.get('return'), _return);

  _binary = function(ast, env) {
    return esnode.binary(ast.op, _compile(ast.lhs, env), _compile(ast.rhs, env));
  };

  register(AST.get('binary'), _binary);

  _throw = function(ast, env) {
    return esnode["throw"](_compile(ast.value, env));
  };

  register(AST.get('throw'), _throw);

  _catch = function(ast, env) {
    return esnode["catch"](_compile(ast.param, env), _compile(ast.body, env));
  };

  _finally = function(ast, env) {
    return _compile(ast, env);
  };

  _try = function(ast, env) {
    var exp;
    return esnode["try"](_compile(ast.body, env), (function() {
      var _i, _len, _ref1, _results;
      _ref1 = ast.catches;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        exp = _ref1[_i];
        _results.push(_catch(exp, env));
      }
      return _results;
    })(), ast["finally"] ? _finally(ast["finally"], env) : null);
  };

  register(AST.get('try'), _try);

  _toplevel = function(ast, env) {
    var imp, imports, params, proc, _rt;
    _rt = _compile(AST.runtimeID, env);
    imports = esnode.array((function() {
      var _i, _len, _ref1, _results;
      _ref1 = ast.imports;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        imp = _ref1[_i];
        _results.push(_importSpec(imp, env));
      }
      return _results;
    })());
    params = [_compile(ast.moduleParam, env)].concat((function() {
      var _i, _len, _ref1, _results;
      _ref1 = ast.imports;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        imp = _ref1[_i];
        _results.push(_importID(imp, env));
      }
      return _results;
    })()).concat([_compile(ast.callbackParam, env)]);
    proc = esnode["function"](null, params, _compile(ast.body, env));
    return esnode.funcall(esnode.member(_rt, esnode.identifier('toplevel')), [imports, proc]);
  };

  register(AST.get('toplevel'), _toplevel);

  _module = function(ast, env) {
    var imp, imports, params, proc, _rt;
    _rt = _compile(AST.runtimeID, env);
    imports = esnode.array((function() {
      var _i, _len, _ref1, _results;
      _ref1 = ast.imports;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        imp = _ref1[_i];
        _results.push(_importSpec(imp, env));
      }
      return _results;
    })());
    params = [_compile(ast.moduleParam, env)].concat((function() {
      var _i, _len, _ref1, _results;
      _ref1 = ast.imports;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        imp = _ref1[_i];
        _results.push(_importID(imp, env));
      }
      return _results;
    })()).concat([_compile(ast.callbackParam, env)]);
    proc = esnode["function"](null, params, _compile(ast.body, env));
    return esnode.funcall(esnode.member(_rt, esnode.identifier('module')), [_compile(ast.spec, env), imports, proc]);
  };

  register(AST.get('module'), _module);

  _importSpec = function(ast, env) {
    return _compile(ast.spec, env);
  };

  _importID = function(ast, env) {
    return _compile(ast.idParam, env);
  };

  _importBinding = function(ast, binding, env) {
    return [_compile(binding.as, env), esnode.member(_importID(ast, env), _compile(binding.spec, env))];
  };

  _import = function(ast, env) {
    var binding;
    return esnode.declare.apply(esnode, ['var'].concat(__slice.call((function() {
      var _i, _len, _ref1, _results;
      _ref1 = ast.bindings;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        binding = _ref1[_i];
        _results.push(_importBidning(ast, binding, env));
      }
      return _results;
    })())));
  };

  register(AST.get('import'), _import);

  _export = function(ast, env) {
    var binding;
    return esnode.funcall(esnode.member(_compile(AST.moduleID, env), esnode.identifier('export')), [
      esnode.object((function() {
        var _i, _len, _ref1, _results;
        _ref1 = ast.bindings;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          binding = _ref1[_i];
          _results.push([binding.as.value, _compile(binding.spec, env)]);
        }
        return _results;
      })())
    ]);
  };

  register(AST.get('export'), _export);

  _while = function(ast, env) {
    return esnode["while"](_compile(ast.cond, env), _compile(ast.block, env));
  };

  register(AST.get('while'), _while);

  _switch = function(ast, env) {
    var c;
    return esnode["switch"](_compile(ast.cond, env), (function() {
      var _i, _len, _ref1, _results;
      _ref1 = ast.cases;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        c = _ref1[_i];
        _results.push(_compile(c, env));
      }
      return _results;
    })());
  };

  register(AST.get('switch'), _switch);

  _case = function(ast, env) {
    var body, i, item;
    body = (function() {
      var _i, _len, _ref1, _results;
      switch (ast.exp.type()) {
        case 'block':
          _ref1 = ast.exp.items;
          _results = [];
          for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
            item = _ref1[i];
            _results.push(_compile(item, env));
          }
          return _results;
          break;
        default:
          return [_compile(item, env)];
      }
    })();
    return esnode["case"](_compile(ast.cond, env), body);
  };

  register(AST.get('case'), _case);

  _default = function(ast, env) {
    return esnode.defaultCase(_compile(ast.exp, env));
  };

  register(AST.get('defaultCase'), _default);

  _continue = function(ast, env) {
    return esnode["continue"]();
  };

  register(AST.get('continue'), _continue);

  _break = function(ast, env) {
    return esnode["break"]();
  };

  register(AST.get('break'), _break);

  module.exports = {
    compile: compile,
    register: register,
    get: get
  };

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var AST, HashMap, SymbolTable, tr;

  AST = require('./ast');

  HashMap = require('./hashmap');

  tr = require('./trace');

  SymbolTable = (function() {

    function SymbolTable(prev) {
      this.prev = prev != null ? prev : null;
      this.inner = {};
      this.temp = 0;
    }

    SymbolTable.prototype.has = function(sym) {
      if (this._has(sym)) {
        return true;
      } else if (this.prev) {
        return this.prev.has(sym);
      } else {
        return false;
      }
    };

    SymbolTable.prototype.hasCurrent = function(sym) {
      return this._has(sym);
    };

    SymbolTable.prototype._has = function(sym) {
      return this.inner.hasOwnProperty(sym.value);
    };

    SymbolTable.prototype.get = function(sym) {
      var _ref;
      if (this.inner.hasOwnProperty(sym.value)) {
        return this.inner[sym.value];
      } else {
        return ((_ref = this.prev) != null ? _ref.get(sym) : void 0) || void 0;
      }
    };

    SymbolTable.prototype.define = function(sym, val) {
      var ref, _ref;
      if (this._has(sym)) {
        throw new Error("duplicate_identifier: " + sym);
      } else if ((_ref = this.prev) != null ? _ref.has(sym) : void 0) {
        ref = AST.ref(sym.nested(), val, this.level());
        this.inner[sym.value] = ref;
        return ref;
      } else {
        ref = AST.ref(sym, val, this.level());
        this.inner[sym.value] = ref;
        return ref;
      }
    };

    SymbolTable.prototype.gensym = function(sym) {
      if (sym == null) {
        sym = null;
      }
      if (sym) {
        return AST.symbol("" + sym.value + "$" + (this.temp++));
      } else {
        return AST.symbol("_$" + (this.temp++));
      }
    };

    SymbolTable.prototype.defineParam = function(param) {
      var ref;
      ref = this.define(param.name, param);
      return param;
    };

    SymbolTable.prototype.defineTemp = function(val) {
      var sym;
      sym = this.gensym();
      return this.define(sym, val);
    };

    SymbolTable.prototype.set = function(sym, val) {
      var ref;
      if (!this._has(sym)) {
        throw new Error("undefined_identifier: " + sym);
      }
      ref = this.get(sym);
      ref.value = val;
      return ref;
    };

    SymbolTable.prototype.del = function(sym) {
      if (this._has(sym)) {
        return delete this.inner[sym.value];
      }
    };

    SymbolTable.prototype.level = function() {
      var count, current;
      count = 0;
      current = this.prev;
      while (current instanceof SymbolTable) {
        count++;
        current = current.prev;
      }
      return count;
    };

    return SymbolTable;

  })();

  module.exports = SymbolTable;

}).call(this);

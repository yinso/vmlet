// Generated by CoffeeScript 1.4.0
(function() {
  var AST, Hashmap, SymbolTable, TR;

  AST = require('./ast');

  Hashmap = require('./hashmap');

  TR = require('./trace');

  SymbolTable = (function() {

    SymbolTable.defaultOptions = {
      newSym: true
    };

    SymbolTable.make = function(options) {
      if (options == null) {
        options = this.defaultOptions;
      }
      return new this(options);
    };

    function SymbolTable(options) {
      this.options = options;
      this.dupes = {};
      this.inner = new Hashmap();
      this.temp = 0;
      this.prev = null;
    }

    SymbolTable.prototype.has = function(key) {
      if (this.inner.has(key)) {
        return true;
      } else if (this.prev) {
        return this.prev.has(key);
      } else {
        return false;
      }
    };

    SymbolTable.prototype.get = function(key) {
      if (this.inner.has(key)) {
        return this.inner.get(key);
      } else if (this.prev) {
        return this.prev.get(key);
      } else {
        throw new Error("SymbolTable:unknown_identifier: " + key);
      }
    };

    SymbolTable.prototype.alias = function(key) {
      var ref, val;
      if (this.has(key)) {
        return this.get(key);
      } else {
        val = this.options.newSym ? this.newKey(key) : key;
        ref = AST.ref(key, val);
        this.inner.set(key, ref);
        return ref;
      }
    };

    SymbolTable.prototype.gensym = function(sym) {
      if (sym == null) {
        sym = null;
      }
      if (sym) {
        return this.newKey(sym);
      } else {
        return AST.symbol(this.newName("_"));
      }
    };

    SymbolTable.prototype.defineTemp = function(ast) {
      var ref, sym;
      sym = this.gensym();
      ref = this.alias(sym);
      ref.value = ast;
      return ref;
    };

    SymbolTable.prototype.newName = function(name) {
      if (!this.dupes.hasOwnProperty(name)) {
        this.dupes[name] = 0;
      } else {
        this.dupes[name]++;
      }
      if (this.dupes[name] === 0) {
        return name;
      } else {
        return "" + name + "$" + this.dupes[name];
      }
    };

    SymbolTable.prototype.newKey = function(key) {
      return AST.symbol(this.newName(key.value));
    };

    SymbolTable.prototype.pushEnv = function() {
      var newEnv;
      newEnv = this.constructor.make(this.options);
      newEnv.prev = this;
      return newEnv;
    };

    SymbolTable.prototype.toString = function() {
      return "<env>";
    };

    return SymbolTable;

  })();

  module.exports = SymbolTable;

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var HashMap, util;

  util = require('./util');

  HashMap = (function() {

    HashMap.defaultOptions = {
      hashCode: util.hashCode,
      equals: function(k, v) {
        return k === v;
      }
    };

    function HashMap(options) {
      if (options == null) {
        options = {};
      }
      Object.defineProperty(this, 'buckets', {
        readonly: true,
        value: []
      });
      Object.defineProperty(this, 'hashCode', {
        readonly: true,
        value: options.hashCode || this.constructor.defaultOptions.hashCode
      });
      Object.defineProperty(this, 'equals', {
        readonly: true,
        value: options.equals || this.constructor.defaultOptions.equals
      });
    }

    HashMap.prototype.set = function(key, val) {
      var hashCode, kv, _i, _len, _ref;
      hashCode = this.hashCode(key);
      this.buckets[hashCode] = this.buckets[hashCode] || [];
      _ref = this.buckets[hashCode];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        kv = _ref[_i];
        if (this.equals(kv.key, key)) {
          kv.val = val;
          return this;
        }
      }
      this.buckets[hashCode].push({
        key: key,
        val: val
      });
      return this;
    };

    HashMap.prototype._get = function(key) {
      var hashCode, kv, _i, _len, _ref;
      hashCode = this.hashCode(key);
      _ref = this.buckets[hashCode] || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        kv = _ref[_i];
        if (this.equals(kv.key, key)) {
          return kv;
        }
      }
      return void 0;
    };

    HashMap.prototype.get = function(key) {
      var res;
      res = this._get(key);
      if (res) {
        return res.val;
      } else {
        return res;
      }
    };

    HashMap.prototype.has = function(key) {
      var res;
      res = this._get(key);
      return res instanceof Object;
    };

    HashMap.prototype["delete"] = function(key) {
      var count, hashCode, i, kv, _i, _len, _ref;
      hashCode = this.hashCode(key);
      if (!this.buckets.hasOwnProperty(hashCode)) {
        return false;
      }
      count = -1;
      _ref = this.buckets[hashCode];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        kv = _ref[i];
        if (this.equals(kv.key, key)) {
          count = i;
        }
      }
      if (count !== -1) {
        this.buckets[hashCode].splice(count, 1);
        return true;
      } else {
        return false;
      }
    };

    HashMap.prototype.keys = function() {
      var bucket, hasCode, key, keys, val, _i, _len, _ref, _ref1;
      keys = [];
      _ref = this.buckets || {};
      for (hasCode in _ref) {
        bucket = _ref[hasCode];
        for (_i = 0, _len = bucket.length; _i < _len; _i++) {
          _ref1 = bucket[_i], key = _ref1.key, val = _ref1.val;
          keys.push(key);
        }
      }
      return keys;
    };

    HashMap.prototype.values = function() {
      var bucket, hasCode, key, val, vals, _i, _len, _ref, _ref1;
      vals = [];
      _ref = this.buckets || {};
      for (hasCode in _ref) {
        bucket = _ref[hasCode];
        for (_i = 0, _len = bucket.length; _i < _len; _i++) {
          _ref1 = bucket[_i], key = _ref1.key, val = _ref1.val;
          vals.push(val);
        }
      }
      return vals;
    };

    return HashMap;

  })();

  module.exports = HashMap;

}).call(this);

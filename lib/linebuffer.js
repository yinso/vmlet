// Generated by CoffeeScript 1.4.0
(function() {
  var Line, LineBuffer, errorlet, loglet;

  loglet = require('loglet');

  errorlet = require('errorlet');

  Line = (function() {

    Line.oneTab = '  ';

    function Line(level, line) {
      this.level = level != null ? level : 0;
      if (line == null) {
        line = null;
      }
      this.buffer = [];
      if (typeof line === 'string') {
        this.buffer.push(line);
      }
    }

    Line.prototype.push = function(text) {
      return this.buffer.push(text);
    };

    Line.prototype.indent = function() {
      return this.level++;
    };

    Line.prototype.outdent = function() {
      return this.level--;
    };

    Line.prototype.tab = function() {
      var i;
      return ((function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.level; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(this.constructor.tab);
        }
        return _results;
      }).call(this)).join('');
    };

    Line.prototype.toString = function() {
      return this.tab() + this.buffer.join('');
    };

    Line.prototype.inspect = function() {
      return this.toString();
    };

    return Line;

  })();

  LineBuffer = (function() {

    LineBuffer.Line = Line;

    function LineBuffer(level) {
      this.level = level != null ? level : 0;
      this.lines = [];
      this.current = null;
    }

    LineBuffer.prototype.write = function(str) {
      var line, lines, _i, _len;
      lines = str.split(/(\r\n|\r|\n)/);
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        this.append(line);
      }
      return this;
    };

    LineBuffer.prototype.writeLine = function(str) {
      this.write(str);
      return this.newline();
    };

    LineBuffer.prototype.append = function(line) {
      var newLine;
      newLine = new Line(this.level, line);
      this.lines.push(newLine);
      this.current = newLine;
      return this;
    };

    LineBuffer.prototype.push = function(text) {
      if (!this.current) {
        this.newline();
      }
      this.current.push(text);
      return this;
    };

    LineBuffer.prototype.newline = function(text) {
      if (text == null) {
        text = '';
      }
      this.append(text);
      return this;
    };

    LineBuffer.prototype.indent = function() {
      this.current.indent();
      return this;
    };

    LineBuffer.prototype.outdent = function() {
      this.current.outdent();
      return this;
    };

    LineBuffer.prototype.toString = function() {
      var buffer, line, _i, _len, _ref;
      buffer = [];
      _ref = this.lines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        buffer.push(line.toString());
      }
      return buffer.join('\n');
    };

    LineBuffer.prototype.inspect = function() {
      return this.toString();
    };

    return LineBuffer;

  })();

  module.exports = LineBuffer;

}).call(this);

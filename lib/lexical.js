// Generated by CoffeeScript 1.4.0
(function() {
  var AST, Environment, GensymTable, LexicalEnvironment, helper, numToBase62,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Environment = require('./environment');

  AST = require('./ast');

  helper = function(num) {
    if ((0 <= num && num <= 9)) {
      return num.toString();
    } else if ((10 <= num && num <= 35)) {
      return String.fromCharCode(num + 55);
    } else if ((36 <= num && num <= 61)) {
      return String.fromCharCode(num + 61);
    } else {
      return 'z';
    }
  };

  numToBase62 = function(num) {
    var remainder, res;
    res = [];
    while (true) {
      remainder = num % 62;
      res.unshift(helper(remainder));
      num = Math.floor(num / 62);
      if (num < 62) {
        break;
      }
    }
    return res.join('');
  };

  GensymTable = (function() {

    function GensymTable() {
      this.tempName = 0;
      this.inner = {};
    }

    GensymTable.prototype.gensym = function(prefix) {
      if (prefix == null) {
        prefix = '__';
      }
      return prefix + "$" + this.symid(prefix);
    };

    GensymTable.prototype.symid = function(prefix) {
      if (prefix == null) {
        prefix = '__';
      }
      this.inner[prefix] = this.inner[prefix] || 0;
      return this.inner[prefix]++;
    };

    GensymTable.prototype.ref = function(name, val) {
      return AST.ref(name, val, this.symid(name));
    };

    GensymTable.prototype.temp = function(val) {
      var name;
      name = "_$" + numToBase62(this.tempName++);
      return AST.ref(name, val, this.symid(name));
    };

    return GensymTable;

  })();

  LexicalEnvironment = (function(_super) {

    __extends(LexicalEnvironment, _super);

    LexicalEnvironment.defaultPrefix = '___';

    LexicalEnvironment.fromParams = function(params, prev) {
      var env, param, _i, _len;
      if (prev == null) {
        prev = baseEnv;
      }
      env = new this({}, prev);
      for (_i = 0, _len = params.length; _i < _len; _i++) {
        param = params[_i];
        env.defineParam(param);
      }
      return env;
    };

    function LexicalEnvironment(prev) {
      if (prev == null) {
        prev = null;
      }
      LexicalEnvironment.__super__.constructor.call(this, {}, prev);
      this.symMap = this.prev instanceof this.constructor ? this.prev.symMap : new GensymTable();
    }

    LexicalEnvironment.prototype.defineParam = function(param) {
      this.define(param.name, param.ref());
      return param;
    };

    LexicalEnvironment.prototype.defineLocal = function(name, val) {
      var ref;
      ref = this.symMap.ref(name, val);
      this.define(name, ref);
      return ref;
    };

    LexicalEnvironment.prototype.mapParam = function(param) {
      var sym;
      sym = this.defineRef(param.name);
      return AST.make('param', sym, param.type, param["default"]);
    };

    LexicalEnvironment.prototype.defineTemp = function(exp) {
      var ref;
      ref = this.symMap.temp(exp);
      this.define(ref.name, exp);
      return ref;
    };

    LexicalEnvironment.prototype.defineRef = function(name) {
      var ref;
      ref = AST.ref(name);
      this.define(name, ref);
      return ref;
    };

    LexicalEnvironment.prototype.gensym = function(prefix) {
      if (prefix == null) {
        prefix = LexicalEnvironment.defaultPrefix;
      }
      return this.symMap.gensym(prefix);
    };

    LexicalEnvironment.prototype.assign = function(val, sym) {
      var varName;
      if (sym == null) {
        sym = LexicalEnvironment.defaultPrefix;
      }
      varName = this.gensym(sym);
      this.define(varName, val);
      return varName;
    };

    LexicalEnvironment.prototype.level = function() {
      var count, current;
      count = 0;
      current = this.prev;
      while (current instanceof LexicalEnvironment) {
        count++;
        current = current.prev;
      }
      return count;
    };

    return LexicalEnvironment;

  })(Environment);

  module.exports = LexicalEnvironment;

}).call(this);

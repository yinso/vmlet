// Generated by CoffeeScript 1.4.0
(function() {
  var array, assign, binary, block, catch_, declare, funcall, function_, identifier, if_, literal, member, null_, object, return_, throw_, try_, undefined_,
    __slice = [].slice;

  identifier = function(name) {
    return {
      type: 'Identifier',
      name: name
    };
  };

  literal = function(val) {
    return {
      type: 'Literal',
      value: val
    };
  };

  null_ = function() {
    return literal(null);
  };

  undefined_ = function() {
    return identifier('undefined');
  };

  member = function(obj, key) {
    return {
      type: 'MemberExpression',
      computed: false,
      object: obj,
      property: key
    };
  };

  funcall = function(proc, args) {
    return {
      type: 'CallExpression',
      callee: proc,
      "arguments": args
    };
  };

  object = function(keyvals) {
    var key, propHelper, val;
    propHelper = function(key, val) {
      return {
        type: 'Property',
        computed: false,
        key: identifier(key),
        value: val,
        kind: 'init',
        method: false,
        shorthand: false
      };
    };
    return {
      type: 'ObjectExpression',
      properties: (function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = keyvals.length; _i < _len; _i++) {
          _ref = keyvals[_i], key = _ref[0], val = _ref[1];
          _results.push(propHelper(key, val));
        }
        return _results;
      })()
    };
  };

  array = function(items) {
    return {
      type: 'ArrayExpression',
      elements: items
    };
  };

  if_ = function(cond, thenExp, elseExp) {
    return {
      type: 'IfStatement',
      test: cond,
      consequent: thenExp,
      alternate: elseExp
    };
  };

  block = function(stmts) {
    return {
      type: 'BlockStatement',
      body: stmts
    };
  };

  declare = function() {
    var helper, name, nameVals, type, val;
    type = arguments[0], nameVals = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    helper = function(name, val) {
      return {
        type: 'VariableDeclarator',
        id: name,
        init: val
      };
    };
    return {
      type: 'VariableDeclaration',
      kind: type,
      declarations: (function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = nameVals.length; _i < _len; _i++) {
          _ref = nameVals[_i], name = _ref[0], val = _ref[1];
          _results.push(helper(name, val));
        }
        return _results;
      })()
    };
  };

  assign = function(name, val) {
    return {
      type: 'AssignmentExpression',
      operator: '=',
      left: name,
      right: val
    };
  };

  function_ = function(name, params, body) {
    return {
      type: 'FunctionExpression',
      id: identifier(name),
      params: params,
      defaults: [],
      body: body
    };
  };

  return_ = function(value) {
    return {
      type: 'ReturnStatement',
      argument: value
    };
  };

  binary = function(op, lhs, rhs) {
    return {
      type: 'BinaryExpression',
      operator: op,
      left: lhs,
      right: rhs
    };
  };

  throw_ = function(val) {
    return {
      type: 'ThrowStatement',
      argument: val
    };
  };

  catch_ = function(param, body) {
    return {
      type: 'CatchClause',
      param: param,
      body: body
    };
  };

  try_ = function(block, catchHandlers, finalHandler) {
    var res;
    if (finalHandler == null) {
      finalHandler = null;
    }
    return res = {
      type: 'TryStatement',
      block: block,
      handlers: catchHandlers,
      handler: catchHandlers.length > 0 ? catchHandlers[0] : null,
      finalizer: finalHandler
    };
  };

  module.exports = {
    identifier: identifier,
    literal: literal,
    null_: null_,
    undefined_: undefined_,
    member: member,
    funcall: funcall,
    object: object,
    array: array,
    "if": if_,
    block: block,
    declare: declare,
    assign: assign,
    "function": function_,
    "return": return_,
    binary: binary,
    "throw": throw_,
    "catch": catch_,
    "try": try_
  };

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var CodeBlock, Environment, Frame, Procedure, Promise, errorlet, loglet;

  errorlet = require('errorlet');

  loglet = require('loglet');

  CodeBlock = require('./codeblock');

  Promise = require('./promise');

  Environment = require('./environment');

  Procedure = require('./procedure');

  Frame = (function() {

    function Frame(code, prev, task) {
      var paused;
      this.prev = prev;
      this.task = task;
      this.code = CodeBlock.make(code);
      this.env = this.task.env;
      this.stack = [];
      this.onThrowLabelStack = [];
      this.lexicals = [];
      this.dynamics = [];
      this.ip = 0;
      paused = false;
    }

    Frame.prototype.clone = function() {
      var frame;
      frame = new Frame(this.code, this.prev, this.task);
      frame.stack = [].concat(this.stack);
      return frame.current = this.current;
    };

    Frame.prototype.isPaused = function() {
      return this.paused;
    };

    Frame.prototype.current = function() {
      return this.code.items[this.ip];
    };

    Frame.prototype.incIP = function(count, toReturn) {
      if (count == null) {
        count = 1;
      }
      if (toReturn == null) {
        toReturn = true;
      }
      this.ip += count;
      if (this.ip >= this.code.length && toReturn) {
        return this["return"]();
      }
    };

    Frame.prototype.jump = function(count) {
      return this.incIP(count + 1);
    };

    Frame.prototype.ref = function(key) {
      return this.env.get(key);
    };

    Frame.prototype.push = function(val) {
      var p, self;
      self = this;
      if (val instanceof Promise) {
        this.task.suspend();
        p = val.then(function(v) {
          self.popIfEqual(p);
          self.push(v);
          return self.task.resume();
        })["catch"](function(e) {
          self.popIfEqual(p);
          self.task.resume();
          return self["throw"](e);
        });
        return this.stack.push(p);
      } else {
        return this.stack.push(val);
      }
    };

    Frame.prototype.pushArguments = function(args) {
      return this.env = new Environment(args, this.env);
    };

    Frame.prototype.pushThrowLabel = function(label) {
      return this.onThrowLabelStack.push(label);
    };

    Frame.prototype.popThrowLabel = function() {
      return this.onThrowLabelStack.pop();
    };

    Frame.prototype.hasThrowLabel = function() {
      return this.onThrowLabelStack.length > 0;
    };

    Frame.prototype["throw"] = function(e) {
      var label;
      if (this.hasThrowLabel()) {
        this.task.setError(e);
        label = this.popThrowLabel();
        return this.goto(label);
      } else if (this.task.top.prev) {
        this.task.popFrame();
        return this.task.top["throw"](e);
      } else {
        return this.task.reject(e);
      }
    };

    Frame.prototype.getLexical = function(id) {
      loglet.log('Frame.getLexical', id.name, this.lexicals[id.name], this.lexicals);
      return this.lexicals[id.name];
    };

    Frame.prototype.setLexical = function(id, val) {
      return this.lexicals[id] = val;
    };

    Frame.prototype.isTail = function() {
      return this.ip === this.code.items.length - 1;
    };

    Frame.prototype.isEmpty = function() {
      return this.stack.length <= 0;
    };

    Frame.prototype.top = function() {
      return this.stack[this.stack.length - 1];
    };

    Frame.prototype.pop = function() {
      if (this.stack.length <= 0) {
        return this["throw"](errorlet.create({
          error: 'Frame.pop:data_stack_underflow'
        }));
      } else {
        return this.stack.pop();
      }
    };

    Frame.prototype.popN = function(count) {
      if (count == null) {
        count = 1;
      }
      if (this.stack.length < count) {
        return this["throw"](errorlet.create({
          error: 'Frame:popN:data_stack_underflow',
          stack: this
        }));
      } else {
        return this.stack.splice(this.stack.length - count, count);
      }
    };

    Frame.prototype.popIfEqual = function(v) {
      if (this.stack.length > 0 && this.stack[this.stack.length - 1] === v) {
        return this.pop();
      }
    };

    Frame.prototype.pushEnv = function() {
      return this.env = new Environment(this.env);
    };

    Frame.prototype.popEnv = function() {
      return this.env = this.env.prev;
    };

    Frame.prototype.goto = function(label) {
      return this.ip = this.code.findLabel(label);
    };

    Frame.prototype["return"] = function() {
      var result;
      try {
        result = this.pop();
        if (this.prev instanceof this.constructor) {
          this.prev.push(result);
          this.task.top = this.prev;
          if (this.task.top.ip >= this.task.top.code.length) {
            return this.task.top["return"]();
          }
        } else {
          return this.task.resolve(result);
        }
      } catch (e) {
        return this.task["throw"](e);
      }
    };

    return Frame;

  })();

  module.exports = Frame;

}).call(this);

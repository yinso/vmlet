// Generated by CoffeeScript 1.4.0
(function() {
  var AST, ESCompiler, Environment, TR, escodegen,
    __slice = [].slice;

  escodegen = require('escodegen');

  AST = require('./ast');

  TR = require('./trace');

  Environment = require('./symboltable');

  ESCompiler = (function() {

    function ESCompiler() {}

    ESCompiler.compile = function(ast) {
      if (!this.reg) {
        this.reg = new this();
      }
      return this.reg.compile(ast);
    };

    ESCompiler.prototype.compile = function(ast) {
      var node;
      node = this.run(ast, new Environment());
      return '(' + escodegen.generate(node) + ')';
    };

    ESCompiler.prototype.run = function(ast, env, res) {
      var type;
      type = "_" + (ast.type());
      if (this[type]) {
        return this[type](ast, env, res);
      } else {
        throw new Error("ESCompiler.unknown_ast: " + (ast.type()));
      }
    };

    ESCompiler.prototype.identifier = function(name) {
      if (name === null || name === void 0) {
        return name;
      } else {
        return {
          type: 'Identifier',
          name: name
        };
      }
    };

    ESCompiler.prototype.literal = function(val) {
      if (val === void 0) {
        return this.undefined_();
      } else {
        return {
          type: 'Literal',
          value: val
        };
      }
    };

    ESCompiler.prototype.null_ = function() {
      return this.literal(null);
    };

    ESCompiler.prototype.undefined_ = function() {
      return this.identifier('undefined');
    };

    ESCompiler.prototype.member = function(obj, key) {
      return {
        type: 'MemberExpression',
        computed: false,
        object: obj,
        property: key
      };
    };

    ESCompiler.prototype.funcall = function(proc, args) {
      return {
        type: 'CallExpression',
        callee: proc,
        "arguments": args
      };
    };

    ESCompiler.prototype.object = function(keyvals) {
      var key, propHelper, val,
        _this = this;
      propHelper = function(key, val) {
        return {
          type: 'Property',
          computed: false,
          key: _this.identifier(key),
          value: val,
          kind: 'init',
          method: false,
          shorthand: false
        };
      };
      return {
        type: 'ObjectExpression',
        properties: (function() {
          var _i, _len, _ref, _results;
          _results = [];
          for (_i = 0, _len = keyvals.length; _i < _len; _i++) {
            _ref = keyvals[_i], key = _ref[0], val = _ref[1];
            _results.push(propHelper(key, val));
          }
          return _results;
        })()
      };
    };

    ESCompiler.prototype.array = function(items) {
      return {
        type: 'ArrayExpression',
        elements: items
      };
    };

    ESCompiler.prototype["if"] = function(cond, thenExp, elseExp) {
      return {
        type: 'IfStatement',
        test: cond,
        consequent: thenExp,
        alternate: elseExp
      };
    };

    ESCompiler.prototype.block = function(stmts) {
      return {
        type: 'BlockStatement',
        body: stmts
      };
    };

    ESCompiler.prototype.declare = function() {
      var helper, name, nameVals, type, val;
      type = arguments[0], nameVals = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      helper = function(name, val) {
        return {
          type: 'VariableDeclarator',
          id: name,
          init: val
        };
      };
      return {
        type: 'VariableDeclaration',
        kind: type,
        declarations: (function() {
          var _i, _len, _ref, _results;
          _results = [];
          for (_i = 0, _len = nameVals.length; _i < _len; _i++) {
            _ref = nameVals[_i], name = _ref[0], val = _ref[1];
            _results.push(helper(name, val));
          }
          return _results;
        })()
      };
    };

    ESCompiler.prototype.assign = function(name, val) {
      return {
        type: 'AssignmentExpression',
        operator: '=',
        left: name,
        right: val
      };
    };

    ESCompiler.prototype["function"] = function(name, params, body) {
      return {
        type: 'FunctionExpression',
        id: name,
        params: params,
        defaults: [],
        body: body,
        generator: false,
        expression: false
      };
    };

    ESCompiler.prototype["return"] = function(value) {
      return {
        type: 'ReturnStatement',
        argument: value
      };
    };

    ESCompiler.prototype.unary = function(op, val) {
      return {
        type: 'UnaryExpression',
        operator: op,
        argument: val,
        prefix: true
      };
    };

    ESCompiler.prototype.binary = function(op, lhs, rhs) {
      return {
        type: 'BinaryExpression',
        operator: op,
        left: lhs,
        right: rhs
      };
    };

    ESCompiler.prototype["throw"] = function(val) {
      return {
        type: 'ThrowStatement',
        argument: val
      };
    };

    ESCompiler.prototype["catch"] = function(param, body) {
      return {
        type: 'CatchClause',
        param: param,
        body: body
      };
    };

    ESCompiler.prototype["try"] = function(block, catchHandlers, finalHandler) {
      var res;
      if (finalHandler == null) {
        finalHandler = null;
      }
      return res = {
        type: 'TryStatement',
        block: block,
        handlers: catchHandlers,
        handler: catchHandlers.length > 0 ? catchHandlers[0] : null,
        finalizer: finalHandler
      };
    };

    ESCompiler.prototype["while"] = function(cond, block) {
      return {
        type: 'WhileStatement',
        test: cond,
        body: block
      };
    };

    ESCompiler.prototype["switch"] = function(cond, cases) {
      return {
        type: 'SwitchStatement',
        discriminant: cond,
        cases: cases
      };
    };

    ESCompiler.prototype["case"] = function(cond, exp) {
      return {
        type: 'SwitchCase',
        test: cond,
        consequent: exp
      };
    };

    ESCompiler.prototype.defaultCase = function(exp) {
      return this["case"](null, exp);
    };

    ESCompiler.prototype["continue"] = function(label) {
      if (label == null) {
        label = null;
      }
      return {
        type: 'ContinueStatement',
        label: label
      };
    };

    ESCompiler.prototype["break"] = function(label) {
      if (label == null) {
        label = null;
      }
      return {
        type: 'BreakStatement',
        label: label
      };
    };

    ESCompiler.prototype.label = function(label, body) {
      return {
        type: 'LabeledStatement',
        label: label,
        body: body
      };
    };

    ESCompiler.prototype.expression = function(exp) {
      return {
        type: 'ExpressionStatement',
        expression: exp
      };
    };

    ESCompiler.prototype.program = function(body) {
      if (body == null) {
        body = [];
      }
      return {
        type: 'Program',
        body: body
      };
    };

    ESCompiler.prototype._number = function(ast, env) {
      if (ast.value < 0) {
        return this.unary('-', this.literal(-ast.value));
      } else {
        return this.literal(ast.value);
      }
    };

    ESCompiler.prototype._string = function(ast, env) {
      return this.literal(ast.value);
    };

    ESCompiler.prototype._bool = function(ast, env) {
      return this.literal(ast.value);
    };

    ESCompiler.prototype._null = function(ast, env) {
      return this.null_();
    };

    ESCompiler.prototype._unit = function(ast, env) {
      return this.undefined_();
    };

    ESCompiler.prototype._member = function(ast, env) {
      var head, key, runtimeID;
      head = this.run(ast.head, env);
      key = ast.key.type() === 'symbol' ? this.literal(ast.key.value) : this.run(ast.key, env);
      runtimeID = this.run(AST.runtimeID, env);
      return this.funcall(this.member(runtimeID, this.identifier('member')), [head, key]);
    };

    ESCompiler.prototype._symbol = function(ast, env) {
      var sym;
      sym = env.alias(ast);
      return this.identifier(sym.value);
    };

    ESCompiler.prototype._object = function(ast, env) {
      var key, val;
      return this.object((function() {
        var _i, _len, _ref, _ref1, _results;
        _ref = ast.value;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], key = _ref1[0], val = _ref1[1];
          _results.push([key, this.run(val, env)]);
        }
        return _results;
      }).call(this));
    };

    ESCompiler.prototype._array = function(ast, env) {
      var item;
      return this.array((function() {
        var _i, _len, _ref, _results;
        _ref = ast.value;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _results.push(this.run(item, env));
        }
        return _results;
      }).call(this));
    };

    ESCompiler.prototype._block = function(ast, env) {
      var item;
      return this.block((function() {
        var _i, _len, _ref, _results;
        _ref = ast.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _results.push(this.run(item, env));
        }
        return _results;
      }).call(this));
    };

    ESCompiler.prototype._assign = function(ast, env) {
      return this.assign(this.run(ast.name, env), this.run(ast.value, env));
    };

    ESCompiler.prototype._define = function(ast, env) {
      var id, name, value;
      name = (function() {
        switch (ast.name.type()) {
          case 'ref':
            return this.literal(ast.name.name.value);
          case 'symbol':
            return this.literal(ast.name.value);
          default:
            throw new Error("escompile.define:unknown_name_type: " + ast.name);
        }
      }).call(this);
      value = this.funcall(this.member(this.run(AST.moduleID, env), this.identifier('define')), [name, this.run(ast.value, new Environment(env))]);
      id = (function() {
        switch (ast.name.type()) {
          case 'ref':
            return this.run(ast.name.normalName(), env);
          case 'symbol':
            return this.run(ast.name, env);
          default:
            throw new Error("escompile.define:unknown_name_type: " + ast.name);
        }
      }).call(this);
      return this.declare('var', [id, value]);
    };

    ESCompiler.prototype._local = function(ast, env) {
      var name;
      name = this.run(ast.name, env);
      if (!ast.value) {
        return this.declare('var', [name]);
      } else {
        return this.declare('var', [name, this.run(ast.value, env)]);
      }
    };

    ESCompiler.prototype._ref = function(ast, env) {
      var _ref;
      if (((_ref = ast.value) != null ? _ref.type() : void 0) === 'proxyval') {
        return this.run(ast.value, env);
      } else if (ast.isDefine) {
        return this.funcall(this.member(this.run(AST.moduleID, env), this.identifier('get')), [this.literal(ast.name.value)]);
      } else {
        return this.run(ast.name, env);
      }
    };

    ESCompiler.prototype._proxyval = function(ast, env) {
      var res;
      res = typeof ast.compiler === 'function' || ast.compiler instanceof Function ? ast.compiler(env) : ast.compiler instanceof AST ? this.run(ast.compiler, env) : this.run(ast.name, env);
      return res;
    };

    ESCompiler.prototype._param = function(ast, env) {
      return this.run(ast.name, env);
    };

    ESCompiler.prototype._procedure = function(ast, env) {
      var func, maker, name, param;
      name = ast.name ? this.run(ast.name, env) : null;
      func = this["function"](name, (function() {
        var _i, _len, _ref, _results;
        _ref = ast.params;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          param = _ref[_i];
          _results.push(this.run(param, env));
        }
        return _results;
      }).call(this), this.run(ast.body, env));
      maker = this.member(this.run(AST.runtimeID, env), this.identifier('proc'));
      return this.funcall(maker, [func]);
    };

    ESCompiler.prototype._task = function(ast, env) {
      var name, param;
      name = ast.name ? this.run(ast.name, env) : null;
      return this["function"](name, (function() {
        var _i, _len, _ref, _results;
        _ref = ast.params;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          param = _ref[_i];
          _results.push(this.run(param, env));
        }
        return _results;
      }).call(this), this.run(ast.body, env));
    };

    ESCompiler.prototype._if = function(ast, env) {
      return this["if"](this.run(ast.cond, env), this.run(ast.then, env), this.run(ast["else"], env));
    };

    ESCompiler.prototype._funcall = function(ast, env) {
      var arg;
      return this.funcall(this.run(ast.funcall, env), (function() {
        var _i, _len, _ref, _results;
        _ref = ast.args;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          arg = _ref[_i];
          _results.push(this.run(arg, env));
        }
        return _results;
      }).call(this));
    };

    ESCompiler.prototype._taskcall = function(ast, env) {
      var arg;
      return this.funcall(this.run(ast.funcall, env), (function() {
        var _i, _len, _ref, _results;
        _ref = ast.args;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          arg = _ref[_i];
          _results.push(this.run(arg, env));
        }
        return _results;
      }).call(this));
    };

    ESCompiler.prototype._return = function(ast, env) {
      return this["return"](this.run(ast.value, env));
    };

    ESCompiler.prototype._binary = function(ast, env) {
      return this.binary(ast.op, this.run(ast.lhs, env), this.run(ast.rhs, env));
    };

    ESCompiler.prototype._throw = function(ast, env) {
      return this["throw"](this.run(ast.value, env));
    };

    ESCompiler.prototype._catch = function(ast, env) {
      return this["catch"](this.run(ast.param, env), this.run(ast.body, env));
    };

    ESCompiler.prototype._finally = function(ast, env) {
      return this.run(ast, env);
    };

    ESCompiler.prototype._try = function(ast, env) {
      var exp;
      return this["try"](this.run(ast.body, env), (function() {
        var _i, _len, _ref, _results;
        _ref = ast.catches;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          exp = _ref[_i];
          _results.push(this._catch(exp, env));
        }
        return _results;
      }).call(this), ast["finally"] ? this._finally(ast["finally"], env) : null);
    };

    ESCompiler.prototype._toplevel = function(ast, env) {
      var imp, imports, params, proc, _rt;
      _rt = this.run(AST.runtimeID, env);
      imports = this.array((function() {
        var _i, _len, _ref, _results;
        _ref = ast.imports;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          imp = _ref[_i];
          _results.push(this._importSpec(imp, env));
        }
        return _results;
      }).call(this));
      params = [this.run(ast.moduleParam, env)].concat((function() {
        var _i, _len, _ref, _results;
        _ref = ast.imports;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          imp = _ref[_i];
          _results.push(this._importID(imp, env));
        }
        return _results;
      }).call(this)).concat([this.run(ast.callbackParam, env)]);
      proc = this["function"](null, params, this.run(ast.body, env));
      return this.funcall(this.member(_rt, this.identifier('toplevel')), [imports, proc]);
    };

    ESCompiler.prototype._module = function(ast, env) {
      var imp, imports, params, proc, _rt;
      _rt = this.run(AST.runtimeID, env);
      imports = this.array((function() {
        var _i, _len, _ref, _results;
        _ref = ast.imports;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          imp = _ref[_i];
          _results.push(this._importSpec(imp, env));
        }
        return _results;
      }).call(this));
      params = [this.run(ast.moduleParam, env)].concat((function() {
        var _i, _len, _ref, _results;
        _ref = ast.imports;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          imp = _ref[_i];
          _results.push(this._importID(imp, env));
        }
        return _results;
      }).call(this)).concat([this.run(ast.callbackParam, env)]);
      proc = this["function"](null, params, this.run(ast.body, env));
      return this.funcall(this.member(_rt, this.identifier('module')), [this.run(ast.spec, env), imports, proc]);
    };

    ESCompiler.prototype._importSpec = function(ast, env) {
      return this.run(ast.spec, env);
    };

    ESCompiler.prototype._importID = function(ast, env) {
      return this.run(ast.idParam, env);
    };

    ESCompiler.prototype._importBinding = function(ast, binding, env) {
      return [this.run(binding.as, env), this.member(this._importID(ast, env), this.run(binding.spec, env))];
    };

    ESCompiler.prototype._import = function(ast, env) {
      var binding;
      return this.declare.apply(this, ['var'].concat(__slice.call((function() {
        var _i, _len, _ref, _results;
        _ref = ast.bindings;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          binding = _ref[_i];
          _results.push(this._importBidning(ast, binding, env));
        }
        return _results;
      }).call(this))));
    };

    ESCompiler.prototype._export = function(ast, env) {
      var binding;
      return this.funcall(this.member(this.run(AST.moduleID, env), this.identifier('export')), [
        this.object((function() {
          var _i, _len, _ref, _results;
          _ref = ast.bindings;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            binding = _ref[_i];
            _results.push([binding.as.value, this.run(binding.spec, env)]);
          }
          return _results;
        }).call(this))
      ]);
    };

    ESCompiler.prototype._while = function(ast, env) {
      return this["while"](this.run(ast.cond, env), this.run(ast.block, env));
    };

    ESCompiler.prototype._switch = function(ast, env) {
      var c;
      return this["switch"](this.run(ast.cond, env), (function() {
        var _i, _len, _ref, _results;
        _ref = ast.cases;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          _results.push(this.run(c, env));
        }
        return _results;
      }).call(this));
    };

    ESCompiler.prototype._case = function(ast, env) {
      var body, i, item;
      body = (function() {
        var _i, _len, _ref, _results;
        switch (ast.exp.type()) {
          case 'block':
            _ref = ast.exp.items;
            _results = [];
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              item = _ref[i];
              _results.push(this.run(item, env));
            }
            return _results;
            break;
          default:
            return [this.run(item, env)];
        }
      }).call(this);
      return this["case"](this.run(ast.cond, env), body);
    };

    ESCompiler.prototype._defaultCase = function(ast, env) {
      return this.defaultCase(this.run(ast.exp, env));
    };

    ESCompiler.prototype._continue = function(ast, env) {
      return this["continue"]();
    };

    ESCompiler.prototype._break = function(ast, env) {
      return this["break"]();
    };

    return ESCompiler;

  })();

  module.exports = ESCompiler;

}).call(this);

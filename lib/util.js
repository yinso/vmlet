// Generated by CoffeeScript 1.4.0
(function() {
  var Dupe, Nested, Pair, addDupe, decycle, decycleArray, decycleObject, flatten, isAsync, isFunction, isSync, nest, prettify, pretty, prettyArray, prettyKeyVal, prettyObject;

  isFunction = function(func) {
    return typeof func === 'function' || func instanceof Function;
  };

  isAsync = function(func) {
    var _ref;
    return isFunction(func) && ((_ref = func.__vmlet) != null ? _ref.async : void 0);
  };

  isSync = function(func) {
    return isFunction(func) && !func.__vmlet.async;
  };

  Pair = (function() {

    Pair.empty = new Pair();

    Pair.list = function(ary) {
      var head, i, _i, _ref;
      if (ary == null) {
        ary = [];
      }
      head = null;
      for (i = _i = _ref = ary.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        head = this.cons(ary[i], head);
      }
      return head;
    };

    Pair.cons = function(head, tail) {
      if (tail == null) {
        tail = this.empty;
      }
      return new this(head, tail);
    };

    function Pair(head, tail) {
      this.head = head;
      this.tail = tail;
    }

    Pair.prototype.has = function(item) {
      if (this.head === item) {
        return true;
      } else if (this.isEmpty()) {
        return false;
      } else {
        return this.tail.has(item);
      }
    };

    Pair.prototype.isEmpty = function() {
      var _ref;
      return (this.head === (_ref = this.tail) && _ref === void 0);
    };

    return Pair;

  })();

  decycle = function(obj, cache) {
    if (cache == null) {
      cache = [];
    }
    cache.push(obj);
    if (typeof obj !== 'object') {
      return obj;
    } else if (obj instanceof Array) {
      return decycleArray(obj, cache);
    } else {
      return decycleObject(obj, cache);
    }
  };

  Dupe = (function() {

    function Dupe() {}

    Dupe.prototype.toString = function() {
      return '#<ref>';
    };

    return Dupe;

  })();

  decycleArray = function(ary, cache) {
    var i, item, res, _i, _len;
    res = [];
    for (i = _i = 0, _len = ary.length; _i < _len; i = ++_i) {
      item = ary[i];
      if (typeof item !== 'object') {
        res.push(item);
      } else if (cache.indexOf(item) === -1) {
        cache.push(item);
        res.push(decycle(item, cache));
      } else {
        res.push(new Dupe(item));
      }
    }
    return res;
  };

  decycleObject = function(obj, cache) {
    var key, res, val;
    res = {};
    for (key in obj) {
      val = obj[key];
      if (obj.hasOwnProperty(key)) {
        if (typeof obj !== 'object') {
          res[key] = val;
        } else if (cache.indexOf(val) === -1) {
          cache.push(val);
          res[key] = decycle(val, cache);
        } else {
          res[key] = new Dupe(val);
        }
      }
    }
    return res;
  };

  addDupe = function(item, dupe) {
    if (typeof item === 'object') {
      return Pair.cons(item, dupe);
    } else {
      return dupe;
    }
  };

  Nested = (function() {

    function Nested(level) {
      this.level = level;
    }

    Nested.prototype.toString = function() {
      var i;
      return "\n" + ((function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.level; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push('  ');
        }
        return _results;
      }).call(this)).join('');
    };

    return Nested;

  })();

  nest = function(level) {
    return new Nested(level);
  };

  prettyArray = function(ary, level, dupe) {
    var i, item;
    return [
      '[ ', (function() {
        var _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = ary.length; _i < _len; i = ++_i) {
          item = ary[i];
          if (i > 0) {
            _results.push([', ', dupe.has(item) ? '#<dupe>' : pretty(item, level + 1, addDupe(item, dupe))]);
          } else {
            if (dupe.has(item)) {
              _results.push('#<dupe>');
            } else {
              _results.push(pretty(item, level + 1, addDupe(item, dupe)));
            }
          }
        }
        return _results;
      })(), ' ]'
    ];
  };

  prettyKeyVal = function(key, val, level, dupe) {
    if (val === void 0) {
      return [];
    } else {
      return [nest(level), key, ': ', pretty(val, level, dupe)];
    }
  };

  prettyObject = function(obj, level, dupe) {
    var hasItem, i, key, lines, val;
    if (isFunction(obj._pretty)) {
      return obj._pretty(level);
    }
    lines = [];
    lines.push('{');
    hasItem = false;
    i = 0;
    for (key in obj) {
      val = obj[key];
      if (obj.hasOwnProperty(key)) {
        if (i > 0) {
          lines.push(', ', prettyKeyVal(key, val, level + 1));
        } else {
          lines.push(prettyKeyVal(key, val, level + 1));
        }
        i++;
        hasItem = true;
      }
    }
    if (hasItem) {
      lines.push(nest(level), '}');
    } else {
      lines.push(' }');
    }
    return lines;
  };

  pretty = function(obj, level, dupe) {
    if (level == null) {
      level = 0;
    }
    if (dupe == null) {
      dupe = Pair.empty;
    }
    switch (typeof obj) {
      case 'undefined':
        return ['undefined'];
      case 'boolean':
        return [obj ? 'true' : 'false'];
      case 'number':
        return [obj.toString()];
      case 'string':
        return [JSON.stringify(obj)];
      case 'function':
        return ['[FUNCTION]'];
      default:
        if (obj === null) {
          return ['null'];
        } else if (isFunction(obj._pretty)) {
          return obj._pretty(level, Pair.cons(obj, dupe));
        } else if (obj instanceof Array) {
          return prettyArray(obj, level, Pair.cons(obj, dupe));
        } else {
          return prettyObject(obj, level, Pair.cons(obj, dupe));
        }
    }
  };

  flatten = function(ary, res) {
    var i, item, _i, _len;
    if (res == null) {
      res = [];
    }
    for (i = _i = 0, _len = ary.length; _i < _len; i = ++_i) {
      item = ary[i];
      if (item instanceof Array) {
        flatten(item, res);
      } else if (item instanceof Nested) {
        res.push(item.toString());
      } else {
        res.push(item);
      }
    }
    return res;
  };

  prettify = function(obj, normalize) {
    if (normalize == null) {
      normalize = flatten;
    }
    return normalize(pretty(obj)).join('');
  };

  module.exports = {
    isFunction: isFunction,
    isAsync: isAsync,
    isSync: isSync,
    prettify: prettify,
    dupe: addDupe,
    nest: nest
  };

}).call(this);

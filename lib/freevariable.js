// Generated by CoffeeScript 1.4.0
(function() {
  var AST, Environment, FreeVariable, TR;

  AST = require('./ast');

  Environment = require('./environment');

  TR = require('./trace');

  FreeVariable = (function() {

    function FreeVariable() {}

    FreeVariable.transform = function(ast, env) {
      if (!this.reg) {
        this.reg = new this();
      }
      return this.reg.transform(ast, env);
    };

    FreeVariable.prototype.transform = function(ast, env) {
      var ref, refs, results, _i, _len;
      if (ast.type() !== 'procedure') {
        throw new Error("FreeVariable.not_a_procedure: " + (ast.type()));
      }
      refs = [];
      this.run(ast.body, env, refs);
      results = [];
      for (_i = 0, _len = refs.length; _i < _len; _i++) {
        ref = refs[_i];
        if (!ref.equals(ast.name)) {
          results.push(ref);
        }
      }
      return results;
    };

    FreeVariable.prototype.run = function(ast, env, refs) {
      var type;
      type = "_" + (ast.type());
      if (this[type]) {
        return this[type](ast, env, refs);
      } else {
        throw new Error("FreeVariable.unknown_type: " + (ast.type()));
      }
    };

    FreeVariable.prototype._number = function(ast, env, refs) {};

    FreeVariable.prototype._string = function(ast, env, refs) {};

    FreeVariable.prototype._bool = function(ast, env, refs) {};

    FreeVariable.prototype._null = function(ast, env, refs) {};

    FreeVariable.prototype._unit = function(ast, env, refs) {};

    FreeVariable.prototype._symbol = function(ast, env, refs) {
      var isFree, ref;
      isFree = env.isFreeVariable(ast);
      if (isFree) {
        ref = env.get(ast);
        TR.log('-- FreeVariable.has_free_variable', ast, ref, env);
        return refs.push(ref);
      }
    };

    FreeVariable.prototype._ref = function(ast, env, refs) {
      return this._symbol(ast.name, env, refs);
    };

    FreeVariable.prototype._block = function(ast, env, refs) {
      var i, item, _i, _len, _ref, _results;
      _ref = ast.items;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        _results.push(this.run(item, env, refs));
      }
      return _results;
    };

    FreeVariable.prototype._if = function(ast, env, refs) {
      this.run(ast.cond, env, refs);
      this.run(ast.then, env, refs);
      return this.run(ast["else"], env, refs);
    };

    FreeVariable.prototype._binary = function(ast, env, refs) {
      this.run(ast.lhs, env, refs);
      return this.run(ast.rhs, env, refs);
    };

    FreeVariable.prototype._member = function(ast, env, refs) {
      return this.run(ast.head, env, refs);
    };

    FreeVariable.prototype._return = function(ast, env, refs) {
      return this.run(ast.vaue, env, refs);
    };

    FreeVariable.prototype._define = function(ast, env, refs) {
      return this.run(ast.value, env, refs);
    };

    FreeVariable.prototype._assign = function(ast, env, refs) {
      this.run(ast.name, env, refs);
      return this.run(ast.value, env, refs);
    };

    FreeVariable.prototype._local = function(ast, env, refs) {
      return this.run(ast.value, env, refs);
    };

    FreeVariable.prototype._funcall = function(ast, env, refs) {
      var arg, _i, _len, _ref, _results;
      this.run(ast.funcall, env, refs);
      _ref = ast.args;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arg = _ref[_i];
        _results.push(this.run(arg, env, refs));
      }
      return _results;
    };

    FreeVariable.prototype._taskcall = function(ast, env, refs) {
      var arg, _i, _len, _ref, _results;
      this.run(ast.funcall, env, refs);
      _ref = ast.args;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arg = _ref[_i];
        _results.push(this.run(arg, env, refs));
      }
      return _results;
    };

    FreeVariable.prototype._procedure = function(ast, env, refs) {};

    FreeVariable.prototype._task = function(ast, env, refs) {};

    FreeVariable.prototype._while = function(ast, env, refs) {
      this.run(ast.cond, env, refs);
      return this.run(ast.block, env, refs);
    };

    FreeVariable.prototype._switch = function(ast, env, refs) {
      var c, _i, _len, _ref, _results;
      this.run(ast.cond, env, refs);
      _ref = ast.cases;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        _results.push(this.run(c, env, refs));
      }
      return _results;
    };

    FreeVariable.prototype._case = function(ast, env, refs) {
      this.run(ast.cond, env, refs);
      return this.run(ast.exp, env, refs);
    };

    FreeVariable.prototype._defaultCase = function(ast, env, refs) {
      return this.run(ast.exp, env, refs);
    };

    FreeVariable.prototype._continue = function(ast, env, refs) {};

    FreeVariable.prototype._break = function(ast, env, refs) {};

    return FreeVariable;

  })();

  module.exports = FreeVariable;

}).call(this);

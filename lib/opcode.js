// Generated by CoffeeScript 1.4.0
(function() {
  var ArrayOpCode, BeginOpcode, BinaryOpcode, BindErrorOrJumpOpcode, DefineOpcode, DevideOpcode, ElseOpcode, EndFinallyOpcode, EndOpcode, EqualOpcode, FinallyOpcode, GotoOpcode, GreaterOpcode, GreaterThanOpcode, IfErrorOrJumpOpcode, IfOpcode, IfOrJumpOpcode, JumpOpcode, LabelOpcode, LessOpcode, LessThanOpcode, LetOpcode, LexicalOpcode, MemberOpcode, MinusOpcode, ModuloOpcode, MultiplyOpcode, NotEqualOpcode, ObjectOpCode, Opcode, PlusOpCode, PopOpcode, Promise, PushEnvOpcode, PushOpcode, ReferenceOpcode, SetOpcode, ThrowOpcode, TryOnErrorGotoOpcode, errorlet, loglet,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  errorlet = require('errorlet');

  loglet = require('loglet');

  Promise = require('./promise');

  Opcode = (function() {

    function Opcode() {}

    Opcode.opcodes = {};

    Opcode.singles = {};

    Opcode.registerSingleton = function(name, type) {
      this.register(name, type);
      return this.singles[name] = new type();
    };

    Opcode.register = function(key, opcode) {
      this.opcodes[key] = opcode;
      return opcode;
    };

    Opcode.get = function(key) {
      return this.opcodes[key];
    };

    Opcode.make = function() {
      var args, error, key, opcodeClass;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.singles.hasOwnProperty(key)) {
        return this.singles[key];
      } else if (this.opcodes.hasOwnProperty(key)) {
        opcodeClass = this.opcodes[key];
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(opcodeClass, args, function(){});
      } else {
        error = errorlet.create({
          error: 'unknown_opcode',
          key: key
        });
        loglet.error(error);
        throw error;
      }
    };

    Opcode.prototype.run = function(frame) {
      return frame.incIP();
    };

    Opcode.prototype.equals = function(op) {
      return op === this;
    };

    Opcode.prototype.inspect = function() {
      return this.toString();
    };

    return Opcode;

  })();

  Opcode.registerSingleton('begin', BeginOpcode = (function(_super) {

    __extends(BeginOpcode, _super);

    function BeginOpcode() {
      return BeginOpcode.__super__.constructor.apply(this, arguments);
    }

    BeginOpcode.prototype.run = function(frame) {
      frame.push(this);
      return frame.incIP();
    };

    BeginOpcode.prototype.toString = function() {
      return '[begin]';
    };

    return BeginOpcode;

  })(Opcode));

  Opcode.registerSingleton('end', EndOpcode = (function(_super) {

    __extends(EndOpcode, _super);

    function EndOpcode() {
      return EndOpcode.__super__.constructor.apply(this, arguments);
    }

    EndOpcode.prototype.run = function(frame) {
      return frame.incIP();
    };

    EndOpcode.prototype.toString = function() {
      return '[end]';
    };

    return EndOpcode;

  })(Opcode));

  Opcode.register('push', PushOpcode = (function(_super) {

    __extends(PushOpcode, _super);

    function PushOpcode(push) {
      this.push = push;
    }

    PushOpcode.prototype.run = function(frame) {
      frame.push(this.push);
      return frame.incIP();
    };

    PushOpcode.prototype.equals = function(op) {
      if (!op instanceof PushOpcode) {
        return false;
      }
      if (this.push === op.push) {
        return true;
      }
      if (this.push instanceof Object && op.push instanceof Object) {
        if (this.push.constructor.prototype.equals) {
          return this.push.equals(op.push);
        } else {
          return false;
        }
      } else {
        return false;
      }
    };

    PushOpcode.prototype.toString = function() {
      return "[push " + this.push + "]";
    };

    return PushOpcode;

  })(Opcode));

  Opcode.register('popN', PopOpcode = (function(_super) {

    __extends(PopOpcode, _super);

    function PopOpcode(count) {
      this.count = count;
    }

    PopOpcode.prototype.run = function(frame) {
      var args;
      args = frame.popN(this.count);
      frame.incIP();
      return args;
    };

    PopOpcode.prototype.equals = function(op) {
      return op instanceof PopOpcode && this.count === op.count;
    };

    PopOpcode.prototype.toString = function() {
      return "[pop " + this.count + "]";
    };

    return PopOpcode;

  })(Opcode));

  Opcode.register('array', ArrayOpCode = (function(_super) {

    __extends(ArrayOpCode, _super);

    function ArrayOpCode(count) {
      this.count = count;
    }

    ArrayOpCode.prototype.run = function(frame) {
      var ary;
      ary = frame.popN(this.count);
      frame.push(ary);
      return frame.incIP();
    };

    ArrayOpCode.prototype.toString = function() {
      return "[array " + this.count + "]";
    };

    return ArrayOpCode;

  })(Opcode));

  Opcode.register('object', ObjectOpCode = (function(_super) {

    __extends(ObjectOpCode, _super);

    function ObjectOpCode(count) {
      this.count = count;
      if (this.count % 2 !== 0) {
        throw errorlet.create({
          error: 'object_count_must_be_factor_of_2',
          count: this.count
        });
      }
    }

    ObjectOpCode.prototype.run = function(frame) {
      var keyvals;
      keyvals = frame.popN(this.count);
      frame.push(this.keyValsToObject(keyvals));
      return frame.incIP();
    };

    ObjectOpCode.prototype.keyValsToObject = function(keyvals) {
      var i, key, obj, val, _i, _ref;
      obj = {};
      for (i = _i = 0, _ref = keyvals.length; _i < _ref; i = _i += 2) {
        key = keyvals[i];
        val = keyvals[i + 1];
        obj[key] = val;
      }
      return obj;
    };

    ObjectOpCode.prototype.toString = function() {
      return "[object " + this.count + "]";
    };

    return ObjectOpCode;

  })(Opcode));

  Opcode.register('lexical', LexicalOpcode = (function(_super) {

    __extends(LexicalOpcode, _super);

    function LexicalOpcode(name) {
      this.name = name;
    }

    LexicalOpcode.prototype.run = function(frame) {
      var val;
      val = frame.getLexical(this);
      frame.push(val);
      return frame.incIP();
    };

    LexicalOpcode.prototype.equals = function(op) {
      return op instanceof LexicalOpcode && this.name === op.name;
    };

    LexicalOpcode.prototype.toString = function() {
      return "[lexical " + this.name + "]";
    };

    return LexicalOpcode;

  })(Opcode));

  Opcode.register('ref', ReferenceOpcode = (function(_super) {

    __extends(ReferenceOpcode, _super);

    function ReferenceOpcode(name) {
      this.name = name;
    }

    ReferenceOpcode.prototype.run = function(frame) {
      var val;
      val = frame.ref(this.name);
      frame.push(val);
      return frame.incIP();
    };

    ReferenceOpcode.prototype.equals = function(op) {
      return op instanceof ReferenceOpcode && this.name === op.name;
    };

    ReferenceOpcode.prototype.toString = function() {
      return "[ref " + this.name + "]";
    };

    return ReferenceOpcode;

  })(Opcode));

  Opcode.register('member', MemberOpcode = (function(_super) {

    __extends(MemberOpcode, _super);

    function MemberOpcode(key) {
      this.key = key;
    }

    MemberOpcode.prototype.run = function(frame) {
      var obj, proc, val;
      obj = frame.pop();
      val = obj[this.key];
      if (typeof val === 'function' || val instanceof Function) {
        proc = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return val.call.apply(val, [obj].concat(__slice.call(args)));
        };
        frame.push(proc);
      } else {
        frame.push(val);
      }
      return frame.incIP();
    };

    MemberOpcode.prototype.equals = function(op) {
      return op(instancoef(MemberOpcode && this.key === op.key));
    };

    MemberOpcode.prototype.toString = function() {
      return "[member " + this.key + "]";
    };

    return MemberOpcode;

  })(Opcode));

  Opcode.register('define', DefineOpcode = (function(_super) {

    __extends(DefineOpcode, _super);

    function DefineOpcode(name) {
      this.name = name;
    }

    DefineOpcode.prototype.run = function(frame) {
      var val;
      val = frame.pop();
      frame.env.define(this.name, val);
      frame.push(val);
      return frame.incIP();
    };

    DefineOpcode.prototype.equals = function(op) {
      return op instanceof DefineOpcode && this.name === op.name;
    };

    DefineOpcode.prototype.toString = function() {
      return "[define " + this.name + "]";
    };

    return DefineOpcode;

  })(Opcode));

  Opcode.register('set', SetOpcode = (function(_super) {

    __extends(SetOpcode, _super);

    function SetOpcode(name) {
      this.name = name;
    }

    SetOpcode.prototype.run = function(frame) {
      var val;
      val = frame.pop();
      frame.env.set(this.name, val);
      return frame.incIP();
    };

    SetOpcode.prototype.equals = function(op) {
      return op instanceof SetOpcode && this.name === op.name;
    };

    SetOpcode.prototype.toString = function() {
      return "[set " + this.name + "]";
    };

    return SetOpcode;

  })(Opcode));

  Opcode.registerSingleton('pushEnv', PushEnvOpcode = (function(_super) {

    __extends(PushEnvOpcode, _super);

    function PushEnvOpcode() {
      return PushEnvOpcode.__super__.constructor.apply(this, arguments);
    }

    PushEnvOpcode.prototype.run = function(frame) {
      frame.pushEnv();
      return frame.incIP();
    };

    PushEnvOpcode.prototype.toString = function() {
      return '[pushEnv]';
    };

    return PushEnvOpcode;

  })(Opcode));

  Opcode.registerSingleton('popEnv', PushEnvOpcode = (function(_super) {

    __extends(PushEnvOpcode, _super);

    function PushEnvOpcode() {
      return PushEnvOpcode.__super__.constructor.apply(this, arguments);
    }

    PushEnvOpcode.prototype.run = function(frame) {
      frame.popEnv();
      return frame.incIP();
    };

    PushEnvOpcode.prototype.toString = function() {
      return '[popEnv]';
    };

    return PushEnvOpcode;

  })(Opcode));

  Opcode.register('let', LetOpcode = (function(_super) {

    __extends(LetOpcode, _super);

    function LetOpcode(name) {
      this.name = name;
    }

    LetOpcode.prototype.run = function(frame) {
      var val;
      val = frame.pop();
      frame.setLexical(this.name, val);
      return frame.incIP();
    };

    LetOpcode.prototype.equals = function(op) {
      return op instanceof LetOpcode && this.name === op.name;
    };

    LetOpcode.prototype.toString = function() {
      return "[let " + this.name + "]";
    };

    return LetOpcode;

  })(Opcode));

  Opcode.registerSingleton('throw', ThrowOpcode = (function(_super) {

    __extends(ThrowOpcode, _super);

    function ThrowOpcode() {
      return ThrowOpcode.__super__.constructor.apply(this, arguments);
    }

    ThrowOpcode.prototype.run = function(frame) {
      var err;
      err = frame.pop();
      return frame["throw"](err);
    };

    ThrowOpcode.prototype.toString = function() {
      return "[throw]";
    };

    return ThrowOpcode;

  })(Opcode));

  Opcode.register('label', LabelOpcode = (function(_super) {

    __extends(LabelOpcode, _super);

    LabelOpcode.id = 1;

    function LabelOpcode(name) {
      this.name = name;
      this.id = this.constructor.id++;
      this.label = "__" + this.name + "_" + this.id;
    }

    LabelOpcode.prototype.toString = function() {
      return "[label " + this.name + "]";
    };

    return LabelOpcode;

  })(Opcode));

  Opcode.register('goto', GotoOpcode = (function(_super) {

    __extends(GotoOpcode, _super);

    function GotoOpcode(label) {
      this.label = label;
    }

    GotoOpcode.prototype.run = function(frame) {
      return frame.goto(this.label);
    };

    GotoOpcode.prototype.toString = function() {
      return "[goto " + this.label + "]";
    };

    return GotoOpcode;

  })(Opcode));

  Opcode.registerSingleton('finally', FinallyOpcode = (function(_super) {

    __extends(FinallyOpcode, _super);

    function FinallyOpcode() {
      return FinallyOpcode.__super__.constructor.apply(this, arguments);
    }

    FinallyOpcode.prototype.run = function(frame) {
      var val;
      val = frame.pop();
      frame["finally"] = val;
      return frame.incIP();
    };

    FinallyOpcode.prototype.toString = function() {
      return "[finally]";
    };

    return FinallyOpcode;

  })(Opcode));

  Opcode.registerSingleton('endFinally', EndFinallyOpcode = (function(_super) {

    __extends(EndFinallyOpcode, _super);

    function EndFinallyOpcode() {
      return EndFinallyOpcode.__super__.constructor.apply(this, arguments);
    }

    EndFinallyOpcode.prototype.run = function(frame) {
      frame.push(frame["finally"]);
      return frame.incIP();
    };

    EndFinallyOpcode.prototype.toString = function() {
      return "[/finally]";
    };

    return EndFinallyOpcode;

  })(Opcode));

  Opcode.register('ifErrorOrJump', IfErrorOrJumpOpcode = (function(_super) {

    __extends(IfErrorOrJumpOpcode, _super);

    function IfErrorOrJumpOpcode(count) {
      this.count = count;
    }

    IfErrorOrJumpOpcode.prototype.run = function(frame) {
      if (frame.task.error) {
        return frame.incIP();
      } else {
        return frame.jump(this.count);
      }
    };

    IfErrorOrJumpOpcode.prototype.equals = function(op) {
      return op instanceof IfErrorOrJumpOpcode && this.count === op.count;
    };

    IfErrorOrJumpOpcode.prototype.toString = function() {
      return "[ifErrorOrJump " + this.count + "]";
    };

    return IfErrorOrJumpOpcode;

  })(Opcode));

  Opcode.register('bindErrorOrJump', BindErrorOrJumpOpcode = (function(_super) {

    __extends(BindErrorOrJumpOpcode, _super);

    function BindErrorOrJumpOpcode(count) {
      this.count = count;
    }

    BindErrorOrJumpOpcode.prototype.run = function(frame) {
      var param;
      param = frame.pop();
      if (param.isa(frame.task.error)) {
        frame.env.define(param.name, frame.task.popError());
        return frame.incIP();
      } else {
        return frame.jump(this.count);
      }
    };

    BindErrorOrJumpOpcode.prototype.equals = function(op) {
      return op instanceof BindErrorOrJumpOpcode && this.count === op.count;
    };

    BindErrorOrJumpOpcode.prototype.toString = function() {
      return "[bindErrorOrJump " + this.count + "]";
    };

    return BindErrorOrJumpOpcode;

  })(Opcode));

  Opcode.register('onThrowGoto', TryOnErrorGotoOpcode = (function(_super) {

    __extends(TryOnErrorGotoOpcode, _super);

    function TryOnErrorGotoOpcode(label) {
      this.label = label;
    }

    TryOnErrorGotoOpcode.prototype.run = function(frame) {
      frame.pushThrowLabel(this.label);
      return frame.incIP();
    };

    TryOnErrorGotoOpcode.prototype.equals = function(op) {
      return op instanceof TryOnErrorGotoOpcode && this.label.equals(op.label);
    };

    TryOnErrorGotoOpcode.prototype.toString = function() {
      return "[onThrowGoto " + this.label + "]";
    };

    return TryOnErrorGotoOpcode;

  })(Opcode));

  Opcode.register('ifOrJump', IfOrJumpOpcode = (function(_super) {

    __extends(IfOrJumpOpcode, _super);

    function IfOrJumpOpcode(count) {
      this.count = count != null ? count : 1;
    }

    IfOrJumpOpcode.prototype.run = function(frame) {
      var val;
      val = frame.pop();
      if (val) {
        return frame.incIP();
      } else {
        return frame.jump(this.count);
      }
    };

    IfOrJumpOpcode.prototype.equals = function(op) {
      return op instanceof IfOrJumpOpcode && this.count === op.count;
    };

    IfOrJumpOpcode.prototype.toString = function() {
      return "[ifOrJump " + this.count + "]";
    };

    return IfOrJumpOpcode;

  })(Opcode));

  Opcode.registerSingleton('else', ElseOpcode = (function(_super) {

    __extends(ElseOpcode, _super);

    function ElseOpcode() {
      return ElseOpcode.__super__.constructor.apply(this, arguments);
    }

    ElseOpcode.prototype.run = function(frame) {
      return this.skipPassEnd(frame);
    };

    ElseOpcode.prototype.skipPassEnd = function(frame) {
      var opcode;
      while ((opcode = frame.current()) && !(opcode instanceof EndOpcode)) {
        frame.incIP();
      }
      return frame.incIP();
    };

    ElseOpcode.prototype.toString = function() {
      return '[else]';
    };

    return ElseOpcode;

  })(Opcode));

  Opcode.registerSingleton('if', IfOpcode = (function(_super) {

    __extends(IfOpcode, _super);

    function IfOpcode() {
      return IfOpcode.__super__.constructor.apply(this, arguments);
    }

    IfOpcode.prototype.run = function(frame) {
      var cond;
      cond = frame.pop();
      if (cond) {
        return frame.incIP();
      } else {
        return this.skipToElse(frame);
      }
    };

    IfOpcode.prototype.skipToElse = function(frame) {
      var opcode;
      while ((opcode = frame.current()) && !((opcode instanceof ElseOpcode) || (opcode instanceof EndOpcode))) {
        frame.incIP();
      }
      return frame.incIP();
    };

    IfOpcode.prototype.toString = function() {
      return '[if]';
    };

    return IfOpcode;

  })(Opcode));

  Opcode.register('jump', JumpOpcode = (function(_super) {

    __extends(JumpOpcode, _super);

    function JumpOpcode(count) {
      this.count = count != null ? count : 1;
    }

    JumpOpcode.prototype.run = function(frame) {
      return frame.jump(this.count);
    };

    JumpOpcode.prototype.equals = function(op) {
      return op instanceof JumpOpcode && this.count === op.count;
    };

    JumpOpcode.prototype.toString = function() {
      return "[jump " + this.count + "]";
    };

    return JumpOpcode;

  })(Opcode));

  BinaryOpcode = (function(_super) {

    __extends(BinaryOpcode, _super);

    function BinaryOpcode() {
      this.op = this.constructor.op;
    }

    BinaryOpcode.prototype.run = function(frame) {
      var a1, a2, _ref;
      try {
        _ref = frame.popN(2), a1 = _ref[0], a2 = _ref[1];
        frame.push(this.exec(a1, a2));
        return frame.incIP();
      } catch (e) {
        return frame.error(e);
      }
    };

    BinaryOpcode.prototype.exec = function(a1, a2) {};

    BinaryOpcode.prototype.toString = function() {
      return "[" + this.op + "]";
    };

    return BinaryOpcode;

  })(Opcode);

  Opcode.registerSingleton('+', PlusOpCode = (function(_super) {

    __extends(PlusOpCode, _super);

    function PlusOpCode() {
      return PlusOpCode.__super__.constructor.apply(this, arguments);
    }

    PlusOpCode.op = '+';

    PlusOpCode.prototype.exec = function(a1, a2) {
      return a1 + a2;
    };

    return PlusOpCode;

  })(BinaryOpcode));

  Opcode.registerSingleton('-', MinusOpcode = (function(_super) {

    __extends(MinusOpcode, _super);

    function MinusOpcode() {
      return MinusOpcode.__super__.constructor.apply(this, arguments);
    }

    MinusOpcode.op = '-';

    MinusOpcode.prototype.exec = function(a1, a2) {
      return a1 - a2;
    };

    return MinusOpcode;

  })(BinaryOpcode));

  Opcode.registerSingleton('*', MultiplyOpcode = (function(_super) {

    __extends(MultiplyOpcode, _super);

    function MultiplyOpcode() {
      return MultiplyOpcode.__super__.constructor.apply(this, arguments);
    }

    MultiplyOpcode.op = '*';

    MultiplyOpcode.prototype.exec = function(a1, a2) {
      return a1 * a2;
    };

    return MultiplyOpcode;

  })(BinaryOpcode));

  Opcode.registerSingleton('/', DevideOpcode = (function(_super) {

    __extends(DevideOpcode, _super);

    function DevideOpcode() {
      return DevideOpcode.__super__.constructor.apply(this, arguments);
    }

    DevideOpcode.op = '/';

    DevideOpcode.prototype.exec = function(a1, a2) {
      return a1 / a2;
    };

    return DevideOpcode;

  })(BinaryOpcode));

  Opcode.registerSingleton('%', ModuloOpcode = (function(_super) {

    __extends(ModuloOpcode, _super);

    function ModuloOpcode() {
      return ModuloOpcode.__super__.constructor.apply(this, arguments);
    }

    ModuloOpcode.op = '%';

    ModuloOpcode.prototype.exec = function(a1, a2) {
      return a1 % a2;
    };

    return ModuloOpcode;

  })(BinaryOpcode));

  Opcode.registerSingleton('>', GreaterOpcode = (function(_super) {

    __extends(GreaterOpcode, _super);

    function GreaterOpcode() {
      return GreaterOpcode.__super__.constructor.apply(this, arguments);
    }

    GreaterOpcode.op = '>';

    GreaterOpcode.prototype.exec = function(a1, a2) {
      return a1 > a2;
    };

    return GreaterOpcode;

  })(BinaryOpcode));

  Opcode.registerSingleton('>=', GreaterThanOpcode = (function(_super) {

    __extends(GreaterThanOpcode, _super);

    function GreaterThanOpcode() {
      return GreaterThanOpcode.__super__.constructor.apply(this, arguments);
    }

    GreaterThanOpcode.op = '>=';

    GreaterThanOpcode.prototype.exec = function(a1, a2) {
      return a1 >= a2;
    };

    return GreaterThanOpcode;

  })(BinaryOpcode));

  Opcode.registerSingleton('<', LessOpcode = (function(_super) {

    __extends(LessOpcode, _super);

    function LessOpcode() {
      return LessOpcode.__super__.constructor.apply(this, arguments);
    }

    LessOpcode.op = '<';

    LessOpcode.prototype.exec = function(a1, a2) {
      return a1 < a2;
    };

    return LessOpcode;

  })(BinaryOpcode));

  Opcode.registerSingleton('<=', LessThanOpcode = (function(_super) {

    __extends(LessThanOpcode, _super);

    function LessThanOpcode() {
      return LessThanOpcode.__super__.constructor.apply(this, arguments);
    }

    LessThanOpcode.op = '<=';

    LessThanOpcode.prototype.exec = function(a1, a2) {
      return a1 <= a2;
    };

    return LessThanOpcode;

  })(BinaryOpcode));

  Opcode.registerSingleton('==', EqualOpcode = (function(_super) {

    __extends(EqualOpcode, _super);

    function EqualOpcode() {
      return EqualOpcode.__super__.constructor.apply(this, arguments);
    }

    EqualOpcode.op = '==';

    EqualOpcode.prototype.exec = function(a1, a2) {
      return a1 === a2;
    };

    return EqualOpcode;

  })(BinaryOpcode));

  Opcode.registerSingleton('!=', NotEqualOpcode = (function(_super) {

    __extends(NotEqualOpcode, _super);

    function NotEqualOpcode() {
      return NotEqualOpcode.__super__.constructor.apply(this, arguments);
    }

    NotEqualOpcode.op = '!=';

    NotEqualOpcode.prototype.exec = function(a1, a2) {
      return a1 !== a2;
    };

    return NotEqualOpcode;

  })(BinaryOpcode));

  module.exports = Opcode;

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var TransformClause, TransformResult, Transformer, register, tr, transform, types,
    __slice = [].slice;

  tr = require('./trace');

  types = {};

  TransformResult = (function() {

    function TransformResult(ast, bindings, transformer) {
      this.ast = ast;
      this.bindings = bindings;
      this.transformer = transformer;
    }

    TransformResult.prototype.transform = function() {
      var result;
      result = this.bindings instanceof Array ? this.transformer.apply(this, [this.ast].concat(__slice.call(this.bindings))) : this.transformer(this.ast, this.bindings);
      return result;
    };

    return TransformResult;

  })();

  TransformClause = (function() {

    function TransformClause(matcher, transformer) {
      this.matcher = matcher;
      this.transformer = transformer;
    }

    TransformClause.prototype.match = function(ast) {
      var res;
      res = this.matcher(ast);
      if (res) {
        return new TransformResult(ast, res, this.transformer);
      } else {
        return false;
      }
    };

    return TransformClause;

  })();

  Transformer = (function() {

    function Transformer(type) {
      this.type = type;
      this.inner = [];
    }

    Transformer.prototype.register = function(matcher, transformer) {
      return this.inner.push(new TransformClause(matcher, transformer));
    };

    Transformer.prototype.isType = function(ast) {
      return ast instanceof AST;
    };

    Transformer.prototype.match = function(ast) {
      var clause, res, _i, _len, _ref;
      _ref = this.inner;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        clause = _ref[_i];
        res = clause.match(ast);
        if (res) {
          return res;
        } else {
          continue;
        }
      }
      return false;
    };

    return Transformer;

  })();

  register = function(ast, match, transform) {
    var transformer;
    if (!types.hasOwnProperty(ast)) {
      types[ast] = new Transformer(ast);
    }
    transformer = types[ast];
    return transformer.register(match, transform);
  };

  transform = function(ast) {
    var res, trans;
    if (types.hasOwnProperty(ast.type())) {
      trans = types[ast.type()];
      res = trans.match(ast);
      if (res) {
        return res.transform();
      } else {
        return ast;
      }
    } else {
      return ast;
    }
  };

  module.exports = {
    transform: transform,
    register: register
  };

}).call(this);

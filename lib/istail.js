// Generated by CoffeeScript 1.4.0
(function() {
  var AST, IsTailRegistry;

  AST = require('./ast');

  IsTailRegistry = (function() {

    function IsTailRegistry() {}

    IsTailRegistry.transform = function(ast) {
      if (!this.reg) {
        this.reg = new this();
      }
      return this.reg.transform(ast);
    };

    IsTailRegistry.prototype.transform = function(ast) {
      var refs;
      refs = [];
      this.run(ast, refs);
      return refs;
    };

    IsTailRegistry.prototype.run = function(ast, refs) {
      var type;
      type = "_" + (ast.type());
      if (this[type]) {
        return this[type](ast, refs);
      } else {
        throw new Error("isTail.unknown_type: " + (ast.type()));
      }
    };

    IsTailRegistry.prototype.push = function(refs, ast) {
      if (refs.indexOf(ast) === -1) {
        return refs.push(ast);
      }
    };

    IsTailRegistry.prototype._number = function() {};

    IsTailRegistry.prototype._string = function() {};

    IsTailRegistry.prototype._bool = function() {};

    IsTailRegistry.prototype._null = function() {};

    IsTailRegistry.prototype._unit = function() {};

    IsTailRegistry.prototype._member = function() {};

    IsTailRegistry.prototype._binary = function() {};

    IsTailRegistry.prototype._ref = function(ast, refs) {
      if (ast.value.type() === 'procedure') {
        return this.push(refs, ast);
      }
    };

    IsTailRegistry.prototype._funcall = function(ast, refs) {
      var funcall;
      funcall = ast.funcall;
      if (funcall.type() === 'ref') {
        return this._ref(funcall, refs);
      } else if (funcall.type() === 'procedure') {
        return this.push(refs, funcall);
      }
    };

    IsTailRegistry.prototype._if = function(ast, refs) {
      this.run(ast.then, refs);
      return this.run(ast["else"], refs);
    };

    IsTailRegistry.prototype._block = function(ast, refs) {
      var i, item, _i, _len, _ref, _results;
      _ref = ast.items;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (i === ast.items.length - 1) {
          _results.push(this.run(item, refs));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    IsTailRegistry.prototype._procedure = function(ast, refs) {
      return this.run(ast.body, refs);
    };

    IsTailRegistry.prototype._return = function(ast, refs) {
      return this.run(ast.value, refs);
    };

    IsTailRegistry.prototype._try = function(ast, refs) {};

    return IsTailRegistry;

  })();

  module.exports = IsTailRegistry;

}).call(this);

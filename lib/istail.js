// Generated by CoffeeScript 1.4.0
(function() {
  var AST, get, register, transform, _block, _body, _funcall, _if, _ref, _scalar, _trans, _types, _value;

  AST = require('./ast');

  _types = {};

  register = function(ast, trans) {
    if (_types.hasOwnProperty(ast.type)) {
      throw new Error("PROC.duplicate_type: " + ast.type);
    }
    return _types[ast.type] = trans;
  };

  get = function(ast) {
    if (_types.hasOwnProperty(ast.type())) {
      return _types[ast.type()];
    } else {
      throw new Error("PROC.unknown_type: " + (ast.type()));
    }
  };

  transform = function(ast, refs) {
    if (refs == null) {
      refs = [];
    }
    refs = [];
    _trans(ast, refs);
    return refs;
  };

  _trans = function(ast, refs) {
    var proc;
    proc = get(ast);
    return proc(ast, refs);
  };

  _scalar = function(ast, refs) {};

  register(AST.get('number'), _scalar);

  register(AST.get('string'), _scalar);

  register(AST.get('bool'), _scalar);

  register(AST.get('null'), _scalar);

  register(AST.get('unit'), _scalar);

  register(AST.get('member'), _scalar);

  register(AST.get('binary'), _scalar);

  _ref = function(ast, refs) {
    if (ast.value.type() !== 'proxyval') {
      return refs.push(ast);
    }
  };

  register(AST.get('ref'), _ref);

  _funcall = function(ast, refs) {
    var funcall;
    funcall = ast.funcall;
    if (funcall.type() === 'ref') {
      return _ref(funcall, refs);
    } else if (funcall.type() === 'procedure') {
      return refs.push(funcall);
    }
  };

  register(AST.get('funcall'), _funcall);

  _if = function(ast, refs) {
    _trans(ast.then, refs);
    return _trans(ast["else"], refs);
  };

  register(AST.get('if'), _if);

  _block = function(ast, refs) {
    var i, item, _i, _len, _ref1, _results;
    _ref1 = ast.items;
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      item = _ref1[i];
      if (i === ast.items.length - 1) {
        _results.push(_trans(item, refs));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  register(AST.get('block'), _block);

  _body = function(ast, refs) {
    return _trans(ast.body, refs);
  };

  register(AST.get('procedure'), _body);

  _value = function(ast, refs) {
    return _trans(ast.value, refs);
  };

  register(AST.get('return'), _value);

  module.exports = {
    transform: transform
  };

}).call(this);

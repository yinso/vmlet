// Generated by CoffeeScript 1.4.0
(function() {
  var AST, BaseEnv, Environment, baseEnv, fs, loglet,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Environment = require('./environment');

  loglet = require('loglet');

  fs = require('fs');

  AST = require('./ast');

  BaseEnv = (function(_super) {

    __extends(BaseEnv, _super);

    function BaseEnv() {
      return BaseEnv.__super__.constructor.apply(this, arguments);
    }

    BaseEnv.prototype.makeSync = function(funcMaker) {
      var func;
      func = funcMaker(this);
      Object.defineProperty(func, '__vmlet', {
        value: {
          sync: true
        }
      });
      return func;
    };

    BaseEnv.prototype.makeAsync = function(funcMaker) {
      var func;
      func = funcMaker(this);
      Object.defineProperty(func, '__vmlet', {
        value: {
          async: true
        }
      });
      return func;
    };

    BaseEnv.prototype.defineSync = function(key, funcMaker) {
      return this.define(AST.symbol(key), this.makeSync(funcMaker));
    };

    BaseEnv.prototype.defineAsync = function(key, funcMaker) {
      return this.define(AST.symbol(key), this.makeAsync(funcMaker));
    };

    return BaseEnv;

  })(Environment);

  baseEnv = new BaseEnv();

  baseEnv.defineSync('+', function(_rt) {
    return function(a, b) {
      return a + b;
    };
  });

  baseEnv.defineSync('-', function(_rt) {
    return function(a, b) {
      return a - b;
    };
  });

  baseEnv.defineSync('*', function(_rt) {
    return function(a, b) {
      return a * b;
    };
  });

  baseEnv.defineSync('%', function(_rt) {
    return function(a, b) {
      return a % b;
    };
  });

  baseEnv.defineSync('>', function(_rt) {
    return function(a, b) {
      return a > b;
    };
  });

  baseEnv.defineSync('>=', function(_rt) {
    return function(a, b) {
      return a >= b;
    };
  });

  baseEnv.defineSync('<=', function(_rt) {
    return function(a, b) {
      return a <= b;
    };
  });

  baseEnv.defineSync('<', function(_rt) {
    return function(a, b) {
      return a < b;
    };
  });

  baseEnv.defineSync('==', function(_rt) {
    return function(a, b) {
      return a === b;
    };
  });

  baseEnv.defineSync('!=', function(_rt) {
    return function(a, b) {
      return a !== b;
    };
  });

  baseEnv.defineSync('isNumber', function(_rt) {
    return function(a) {
      return typeof a === 'number' || a instanceof Number;
    };
  });

  baseEnv.define(AST.symbol('console'), console);

  module.exports = baseEnv;

}).call(this);

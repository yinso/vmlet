// Generated by CoffeeScript 1.4.0
(function() {
  var AST, get, register, transform, _binary, _block, _case, _defaultCase, _define, _funcall, _if, _member, _proc, _ref, _return, _scalar, _switch, _trans, _try, _types, _while;

  AST = require('./ast');

  _types = {};

  register = function(ast, trans) {
    if (_types.hasOwnProperty(ast.type)) {
      throw new Error("ref.duplicate_type: " + ast.type);
    }
    return _types[ast.type] = trans;
  };

  get = function(ast) {
    if (_types.hasOwnProperty(ast.type())) {
      return _types[ast.type()];
    } else {
      throw new Error("ref.invalid_type: " + (ast.type()));
    }
  };

  transform = function(ast) {
    var refs;
    refs = [];
    _trans(ast, refs);
    return refs;
  };

  _trans = function(ast, refs) {
    var trans;
    trans = get(ast);
    return trans(ast, refs);
  };

  _scalar = function(ast, refs) {};

  register(AST.get('number'), _scalar);

  register(AST.get('bool'), _scalar);

  register(AST.get('string'), _scalar);

  register(AST.get('null'), _scalar);

  register(AST.get('unit'), _scalar);

  register(AST.get('symbol'), _scalar);

  register(AST.get('continue'), _scalar);

  register(AST.get('break'), _scalar);

  _ref = function(ast, refs) {
    if (refs.indexOf(ast) === -1) {
      return refs.push(ast);
    }
  };

  register(AST.get('ref'), _ref);

  _binary = function(ast, refs) {
    _trans(ast.lhs, refs);
    return _trans(ast.rhs, refs);
  };

  register(AST.get('binary'), _binary);

  _member = function(ast, refs) {
    return _trans(ast.head, refs);
  };

  register(AST.get('member'), _member);

  _if = function(ast, refs) {
    _trans(ast.cond, refs);
    _trans(ast.then, refs);
    return _trans(ast["else"], refs);
  };

  register(AST.get('if'), _if);

  _define = function(ast, refs) {
    if (ast.value) {
      return _trans(ast.value, refs);
    }
  };

  register(AST.get('define'), _define);

  register(AST.get('local'), _define);

  register(AST.get('assign'), _define);

  _proc = function(ast, refs) {
    return _trans(ast.body, refs);
  };

  register(AST.get('procedure'), _proc);

  register(AST.get('task'), _proc);

  register(AST.get('module'), _proc);

  register(AST.get('toplevel'), _proc);

  register(AST.get('catch'), _proc);

  _funcall = function(ast, refs) {
    var arg, _i, _len, _ref1, _results;
    _trans(ast.funcall, refs);
    _ref1 = ast.args;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      arg = _ref1[_i];
      _results.push(_trans(arg, refs));
    }
    return _results;
  };

  register(AST.get('funcall'), _funcall);

  register(AST.get('taskcall'), _funcall);

  _block = function(ast, refs) {
    var i, item, _i, _len, _ref1, _results;
    _ref1 = ast.items;
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      item = _ref1[i];
      _results.push(_trans(item, refs));
    }
    return _results;
  };

  register(AST.get('block'), _block);

  _try = function(ast, refs) {
    var c, _i, _len, _ref1;
    _trans(ast.body, refs);
    _ref1 = ast.catches;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      c = _ref1[_i];
      _trans(c, refs);
    }
    if (ast["finally"]) {
      return _trans(ast["finally"], refs);
    }
  };

  register(AST.get('try'), _try);

  _return = function(ast, refs) {
    return _trans(ast.value, refs);
  };

  register(AST.get('return'), _return);

  _while = function(ast, refs) {
    _trans(ast.cond, refs);
    return _trans(ast.block, refs);
  };

  register(AST.get('while'), _while);

  _switch = function(ast, refs) {
    var c, _i, _len, _ref1, _results;
    _trans(ast.cond, refs);
    _ref1 = ast.cases;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      c = _ref1[_i];
      _results.push(_trans(c, refs));
    }
    return _results;
  };

  register(AST.get('switch'), _switch);

  _case = function(ast, refs) {
    _trans(ast.cond, refs);
    return _trans(ast.exp, refs);
  };

  register(AST.get('case'), _case);

  _defaultCase = function(ast, refs) {
    return _trans(ast.exp, refs);
  };

  register(AST.get('defaultCase'), _defaultCase);

  module.exports = {
    transform: transform,
    register: register
  };

}).call(this);

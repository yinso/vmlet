// Generated by CoffeeScript 1.4.0
(function() {
  var AST, Ref, TR;

  AST = require('./ast');

  TR = require('./trace');

  Ref = (function() {

    function Ref() {}

    Ref.transform = function(ast) {
      if (!this.reg) {
        this.reg = new this();
      }
      return this.reg.transform(ast);
    };

    Ref.prototype.transform = function(ast) {
      var refs;
      refs = [];
      this.run(ast, refs);
      return refs;
    };

    Ref.prototype.run = function(ast, refs) {
      var type;
      type = "_" + (ast.type());
      if (this[type]) {
        return this[type](ast, refs);
      } else {
        throw new Error("Ref.unknown_ast: " + (ast.type()));
      }
    };

    Ref.prototype._number = function(ast, refs) {};

    Ref.prototype._string = function(ast, refs) {};

    Ref.prototype._bool = function(ast, refs) {};

    Ref.prototype._null = function(ast, refs) {};

    Ref.prototype._unit = function(ast, refs) {};

    Ref.prototype._symbol = function(ast, refs) {};

    Ref.prototype._continue = function(ast, refs) {};

    Ref.prototype._break = function(ast, refs) {};

    Ref.prototype._ref = function(ast, refs) {
      if (refs.indexOf(ast) === -1) {
        return refs.push(ast);
      }
    };

    Ref.prototype._binary = function(ast, refs) {
      this.run(ast.lhs, refs);
      return this.run(ast.rhs, refs);
    };

    Ref.prototype._member = function(ast, refs) {
      return this.run(ast.head, refs);
    };

    Ref.prototype._if = function(ast, refs) {
      this.run(ast.cond, refs);
      this.run(ast.then, refs);
      return this.run(ast["else"], refs);
    };

    Ref.prototype._define = function(ast, refs) {
      if (ast.value) {
        return this.run(ast.value, refs);
      }
    };

    Ref.prototype._local = function(ast, refs) {
      if (ast.value) {
        return this.run(ast.value, refs);
      }
    };

    Ref.prototype._assign = function(ast, refs) {
      if (ast.value) {
        return this.run(ast.value, refs);
      }
    };

    Ref.prototype._procedure = function(ast, refs) {
      return this.run(ast.body, refs);
    };

    Ref.prototype._task = function(ast, refs) {
      return this.run(ast.body, refs);
    };

    Ref.prototype._module = function(ast, refs) {
      return this.run(ast.body, refs);
    };

    Ref.prototype._toplevel = function(ast, refs) {
      return this.run(ast.body, refs);
    };

    Ref.prototype._funcall = function(ast, refs) {
      var arg, _i, _len, _ref, _results;
      this.run(ast.funcall, refs);
      _ref = ast.args;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arg = _ref[_i];
        _results.push(this.run(arg, refs));
      }
      return _results;
    };

    Ref.prototype._taskcall = function(ast, refs) {
      var arg, _i, _len, _ref, _results;
      this.run(ast.funcall, refs);
      _ref = ast.args;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arg = _ref[_i];
        _results.push(this.run(arg, refs));
      }
      return _results;
    };

    Ref.prototype._block = function(ast, refs) {
      var i, item, _i, _len, _ref, _results;
      _ref = ast.items;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        _results.push(this.run(item, refs));
      }
      return _results;
    };

    Ref.prototype._catch = function(ast, refs) {
      return this.run(ast.body, refs);
    };

    Ref.prototype._try = function(ast, refs) {
      var c, _i, _len, _ref;
      this.run(ast.body, refs);
      _ref = ast.catches;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        this.run(c, refs);
      }
      if (ast["finally"]) {
        return this.run(ast["finally"], refs);
      }
    };

    Ref.prototype._return = function(ast, refs) {
      return this.run(ast.value, refs);
    };

    Ref.prototype._while = function(ast, refs) {
      this.run(ast.cond, refs);
      return this.run(ast.block, refs);
    };

    Ref.prototype._switch = function(ast, refs) {
      var c, _i, _len, _ref, _results;
      this.run(ast.cond, refs);
      _ref = ast.cases;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        _results.push(this.run(c, refs));
      }
      return _results;
    };

    Ref.prototype._case = function(ast, refs) {
      this.run(ast.cond, refs);
      return this.run(ast.exp, refs);
    };

    Ref.prototype._defaultCase = function(ast, refs) {
      return this.run(ast.exp, refs);
    };

    return Ref;

  })();

  module.exports = Ref;

}).call(this);

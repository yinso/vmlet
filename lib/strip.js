// Generated by CoffeeScript 1.4.0
(function() {
  var ANF, AST, RET, errorlet, get, loglet, makeBlock, makeProc, normalize, normalizeIf, normalizeScalar, normalizeTempvar, override, register, types, util, _normalize, _normalizeANF, _normalizeBlock;

  loglet = require('loglet');

  errorlet = require('errorlet');

  AST = require('./ast');

  ANF = require('./anf');

  util = require('./util');

  RET = require('./return');

  types = {};

  register = function(ast, cps) {
    if (types.hasOwnProperty(ast.type)) {
      throw errorlet.create({
        error: 'RETURN.duplicate_ast_type',
        type: ast.type
      });
    } else {
      return types[ast.type] = cps;
    }
  };

  get = function(ast) {
    if (types.hasOwnProperty(ast.type())) {
      return types[ast.type()];
    } else {
      throw errorlet.create({
        error: 'RETURN.unsupported_as_type',
        type: ast
      });
    }
  };

  override = function(ast, cps) {
    return types[ast.type] = cps;
  };

  normalize = function(ast) {
    var block;
    block = AST.make('block');
    return _normalize(ast, block);
  };

  _normalize = function(ast, block) {
    var normalizer;
    normalizer = get(ast);
    return normalizer(ast, block);
  };

  makeBlock = function(type) {
    return function(ast) {
      var i, item, items;
      items = (function() {
        var _i, _len, _ref, _results;
        _ref = ast.items;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          item = _ref[i];
          if (i < item.length - 1) {
            _results.push(_normalize(item));
          } else {
            _results.push(RET.transform(item));
          }
        }
        return _results;
      })();
      return AST.make(type, items);
    };
  };

  _normalizeBlock = makeBlock('block');

  register(AST.get('block'), _normalizeBlock);

  _normalizeANF = makeBlock('anf');

  register(AST.get('anf'), _normalizeANF);

  makeProc = function(type) {
    return function(ast) {
      return AST.make(type, ast.name, ast.params, _normalize(ast.body));
    };
  };

  register(AST.get('procedure'), makeProc('procedure'));

  register(AST.get('task'), makeProc('task'));

  normalizeScalar = function(ast) {
    return ast;
  };

  register(AST.get('number'), normalizeScalar);

  register(AST.get('string'), normalizeScalar);

  register(AST.get('null'), normalizeScalar);

  register(AST.get('symbol'), normalizeScalar);

  register(AST.get('proxyval'), normalizeScalar);

  register(AST.get('ref'), normalizeScalar);

  register(AST.get('member'), normalizeScalar);

  normalizeIf = function(ast) {
    return AST.make('if', _normalize(ast.cond), _normalize(ast.then), _normalize(ast["else"]));
  };

  register(AST.make('if'), normalizeIf);

  normalizeTempvar = function(ast) {};

  module.exports = {
    register: register,
    get: get,
    override: override,
    transform: normalize
  };

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var CodeBlock, Task, asyncFunc, asyncVoidFunc, loglet, syncFunc, syncVoidFunc, userFunc;

  CodeBlock = require('./codeblock');

  Task = require('./task');

  loglet = require('loglet');

  syncFunc = function(proc) {
    var func;
    func = function(task, args, cb) {
      task.pushData(proc(args));
      return cb(null);
    };
    func.inner = proc;
    func.async = false;
    func.isVoid = false;
    return func;
  };

  syncVoidFunc = function(proc) {
    var func;
    func = function(task, args, cb) {
      proc(args);
      return cb(null);
    };
    func.inner = proc;
    func.async = false;
    func.isVoid = true;
    return func;
  };

  asyncFunc = function(proc) {
    var func;
    func = function(task, args, cb) {
      return proc(args, function(err, res) {
        if (err) {
          return cb(err);
        } else {
          task.pushData(res);
          return cb(null);
        }
      });
    };
    func.inner = proc;
    func.async = true;
    func.isVoid = false;
    return func;
  };

  asyncVoidFunc = function(proc) {
    var func;
    func = function(task, args, cb) {
      return proc(args, function(err, res) {
        if (err) {
          return cb(err);
        } else {
          return cb(null);
        }
      });
    };
    func.inner = proc;
    func.async = true;
    func.isVoid = true;
    return func;
  };

  userFunc = function(code, env, argKeys) {
    var func;
    func = function(task, args, cb) {
      var codeBlock, current, i, key, _i, _len;
      codeBlock = new CodeBlock();
      codeBlock.pushEnv();
      for (i = _i = 0, _len = argKeys.length; _i < _len; i = ++_i) {
        key = argKeys[i];
        codeBlock.push(args[i]).define(key);
      }
      codeBlock.append(code);
      current = new Task(codeBlock, env);
      return current.run(function(err, res) {
        if (err) {
          return cb(err);
        } else {
          task.pushData(res);
          return cb(null);
        }
      });
    };
    func.code = code;
    func.env = env;
    func.argKeys = argKeys;
    func.async = true;
    func.isVoid = true;
    return func;
  };

  CodeBlock.prototype.makeFunction = function() {
    return this.add('MakeFunction', [], function(task, cb) {
      var args, proc;
      args = task.popN(2);
      proc = userFunc(args[1], task.env, args[0]);
      task.pushData(proc);
      task.incIP();
      return cb(null);
    });
  };

  module.exports = {
    sync: syncFunc,
    syncVoid: syncVoidFunc,
    async: asyncFunc,
    asyncVoid: asyncVoidFunc,
    user: userFunc
  };

}).call(this);

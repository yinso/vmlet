// Generated by CoffeeScript 1.4.0
(function() {
  var AST, CLONE, TR, TcoRegistry;

  AST = require('./ast');

  TR = require('./trace');

  CLONE = require('./clone');

  TcoRegistry = (function() {

    function TcoRegistry() {}

    TcoRegistry.transform = function(ast, procs) {
      if (!this.reg) {
        this.reg = new this();
      }
      return this.reg.transform(ast, procs);
    };

    TcoRegistry.prototype.transform = function(ast, procs) {
      var base, body, cases, label, proc;
      label = AST.symbol('_label');
      base = this.run(ast, procs, label);
      cases = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = procs.length; _i < _len; _i++) {
          proc = procs[_i];
          _results.push(this.run(proc.value, procs, label));
        }
        return _results;
      }).call(this);
      body = AST.block([AST.local(label, ast.name), AST["while"](AST.bool(true), AST.block([AST["switch"](label, cases.concat([base]))]))]);
      return AST.procedure(ast.name, ast.params, body);
    };

    TcoRegistry.prototype.run = function(ast, procs, label) {
      var type;
      type = "_" + (ast.type());
      if (this[type]) {
        return this[type](ast, procs, label);
      } else {
        throw new Error("SwitchCaseRegistry.unknown_type: " + (ast.type()));
      }
    };

    TcoRegistry.prototype._number = function(ast, procs, label) {
      return ast;
    };

    TcoRegistry.prototype._string = function(ast, procs, label) {
      return ast;
    };

    TcoRegistry.prototype._bool = function(ast, procs, label) {
      return ast;
    };

    TcoRegistry.prototype._null = function(ast, procs, label) {
      return ast;
    };

    TcoRegistry.prototype._unit = function(ast, procs, label) {
      return ast;
    };

    TcoRegistry.prototype._binary = function(ast, procs, label) {
      return ast;
    };

    TcoRegistry.prototype._member = function(ast, procs, label) {
      return ast;
    };

    TcoRegistry.prototype._array = function(ast, procs, label) {
      return ast;
    };

    TcoRegistry.prototype._object = function(ast, procs, label) {
      return ast;
    };

    TcoRegistry.prototype._if = function(ast, procs, label) {
      var elseAST, thenAST;
      thenAST = this.run(ast.then, procs, label);
      elseAST = this.run(ast["else"], procs, label);
      return AST["if"](ast.cond, thenAST, elseAST);
    };

    TcoRegistry.prototype._block = function(ast, procs, label) {
      var i, item, items;
      items = (function() {
        var _i, _len, _ref, _results;
        _ref = ast.items;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          item = _ref[i];
          if (i < ast.items.length - 1) {
            _results.push(item);
          } else {
            _results.push(this.run(item, procs, label));
          }
        }
        return _results;
      }).call(this);
      return AST.block(items);
    };

    TcoRegistry.prototype._return = function(ast, procs, label) {
      return AST["return"](this.run(ast.value, procs));
    };

    TcoRegistry.prototype._procedure = function(ast, procs, label) {
      var body, i, locals, name, newParams, param;
      name = ast.name.type() === 'ref' ? ast.name : AST.ref(ast.name);
      newParams = (function() {
        var _i, _len, _ref, _results;
        _ref = ast.params;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          param = _ref[_i];
          _results.push(CLONE.transform(param));
        }
        return _results;
      })();
      locals = (function() {
        var _i, _len, _ref, _results;
        _ref = ast.params;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          param = _ref[i];
          _results.push(AST.local(param.name, newParams[i].ref()));
        }
        return _results;
      })();
      body = ast.body.type() === 'block' ? AST.block(locals.concat(ast.body.items)) : AST.block(locals.concat(ast.body));
      body = this.run(body, procs, label);
      return AST["case"](name, body);
    };

    TcoRegistry.prototype._while = function(ast, procs, label) {
      return AST["while"](ast.cond, this.run(ast.block, procs, label));
    };

    TcoRegistry.prototype._switch = function(ast, procs, label) {
      var c;
      return AST["switch"](ast.cond, (function() {
        var _i, _len, _ref, _results;
        _ref = ast.cases;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          _results.push(this.run(c, procs, label));
        }
        return _results;
      }).call(this));
    };

    TcoRegistry.prototype._case = function(ast, procs, label) {
      return AST["case"](ast.cond, this.run(ast.exp, procs, label));
    };

    TcoRegistry.prototype._defaultCase = function(ast, procs, label) {
      return AST.defaultCase(this.run(ast, procs, label));
    };

    TcoRegistry.prototype._continue = function(ast, procs, label) {
      return ast;
    };

    TcoRegistry.prototype._break = function(ast, procs, label) {
      return ast;
    };

    TcoRegistry.prototype._funcall = function(ast, procs, label) {
      var assigns, funcall, gotoProc, i, param, proc;
      funcall = ast.funcall;
      if (procs.indexOf(funcall) === -1) {
        return funcall;
      } else {
        proc = funcall.value;
        assigns = (function() {
          var _i, _len, _ref, _results;
          _ref = proc.params;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            param = _ref[i];
            _results.push(AST.assign(AST.ref(param.name, param), ast.args[i]));
          }
          return _results;
        })();
        gotoProc = AST.assign(label, proc.name);
        return AST.block(assigns.concat([gotoProc, AST["break"]()]));
      }
    };

    return TcoRegistry;

  })();

  module.exports = TcoRegistry;

}).call(this);

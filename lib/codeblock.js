// Generated by CoffeeScript 1.4.0
(function() {
  var BlockOpcode, CodeBlock, EndBlockOpcode, LabelOpcode, Labels, Opcode, errorlet, loglet,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Opcode = require('./opcode');

  errorlet = require('errorlet');

  loglet = require('loglet');

  LabelOpcode = Opcode.get('label');

  Labels = (function() {

    function Labels() {
      this.labels = {};
      this.positions = {};
    }

    Labels.prototype.add = function(label, index) {
      this.labels[label.label] = label;
      return this.positions[label.label] = index;
    };

    Labels.prototype.findLabel = function(label) {
      if (typeof label === 'string') {
        if (this.positions.hasOwnProperty(label)) {
          return this.positions[label];
        } else {
          throw errorlet.create({
            error: 'unknown_label',
            label: label
          });
        }
      } else if (label instanceof LabelOpcode) {
        return this.findLabel(label.label);
      } else {
        throw errorlet.create({
          error: 'unknown_label',
          label: label
        });
      }
    };

    return Labels;

  })();

  CodeBlock = (function() {

    CodeBlock.make = function(block) {
      if (block instanceof CodeBlock) {
        return block;
      } else if (block instanceof Array) {
        return new this(block);
      } else {
        throw errorlet.create({
          error: 'invalid_codeblock_format',
          block: block
        });
      }
    };

    function CodeBlock(items) {
      var opcode, _i, _len;
      if (items == null) {
        items = [];
      }
      this.length = 0;
      this.labels = new Labels();
      this.items = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        opcode = items[_i];
        this._addOpcode(opcode);
      }
    }

    CodeBlock.prototype.equals = function(code) {
      var i, op1, op2, _i, _ref;
      if (!this.items.length === code.items.length) {
        return false;
      }
      for (i = _i = 0, _ref = this.items.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        op1 = this.items[i];
        op2 = code.items[i];
        if (!op1.equals(op2)) {
          return false;
        }
      }
      return true;
    };

    CodeBlock.prototype.findLabel = function(label) {
      return this.labels.findLabel(label);
    };

    CodeBlock.prototype.add = function() {
      var args, key;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this._addOpcode(Opcode.make.apply(Opcode, [key].concat(__slice.call(args))));
      return this;
    };

    CodeBlock.prototype._addOpcode = function(opcode) {
      this.items.push(opcode);
      if (opcode instanceof LabelOpcode) {
        this.labels.add(opcode, this.length);
      }
      this.length += 1;
      return this;
    };

    CodeBlock.prototype.append = function(codeblock) {
      var opcode, _i, _len, _ref;
      _ref = codeblock.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        opcode = _ref[_i];
        this._addOpcode(opcode);
      }
      return this;
    };

    CodeBlock.prototype.push = function(arg) {
      return this.add('push', arg);
    };

    CodeBlock.prototype.popN = function(count) {
      if (count == null) {
        count = 1;
      }
      return this.add('popN', count);
    };

    CodeBlock.prototype.plus = function() {
      return this.add('+');
    };

    CodeBlock.prototype.minus = function() {
      return this.add('-');
    };

    CodeBlock.prototype.multiply = function() {
      return this.add('*');
    };

    CodeBlock.prototype.divide = function() {
      return this.add('/');
    };

    CodeBlock.prototype.modulo = function() {
      return this.add('%');
    };

    CodeBlock.prototype.greater = function() {
      return this.add('>');
    };

    CodeBlock.prototype.greaterEqual = function() {
      return this.add('>=');
    };

    CodeBlock.prototype.less = function() {
      return this.add('<');
    };

    CodeBlock.prototype.lessEqual = function() {
      return this.add('<=');
    };

    CodeBlock.prototype.equal = function() {
      return this.add('==');
    };

    CodeBlock.prototype.notEqual = function() {
      return this.add('!=');
    };

    CodeBlock.prototype.block = function() {
      return this.add('{{');
    };

    CodeBlock.prototype.endBlock = function() {
      return this.add('}}');
    };

    CodeBlock.prototype["if"] = function() {
      return this.add('if');
    };

    CodeBlock.prototype["else"] = function() {
      return this.add('else');
    };

    CodeBlock.prototype.begin = function() {
      return this.add('begin');
    };

    CodeBlock.prototype.end = function() {
      return this.add('end');
    };

    CodeBlock.prototype.array = function(count) {
      return this.add('array', count);
    };

    CodeBlock.prototype.object = function(count) {
      return this.add('object', count);
    };

    CodeBlock.prototype.member = function(key) {
      return this.add('member', key);
    };

    CodeBlock.prototype.param = function(type) {
      return this.add('param', type);
    };

    CodeBlock.prototype.paramList = function(count) {
      return this.add('paramList', count);
    };

    CodeBlock.prototype.funcall = function(func) {
      return this.add('funcall', func);
    };

    CodeBlock.prototype.tailcall = function(func) {
      return this.add('tailcall', func);
    };

    CodeBlock.prototype["throw"] = function() {
      return this.add('throw');
    };

    CodeBlock.prototype.onThrowGoto = function(label) {
      return this.add('onThrowGoto', label);
    };

    CodeBlock.prototype["finally"] = function() {
      return this.add('finally');
    };

    CodeBlock.prototype.endFinally = function() {
      return this.add('endFinally');
    };

    CodeBlock.prototype.ifErrorOrJump = function(count) {
      return this.add('ifErrorOrJump', count);
    };

    CodeBlock.prototype.bindErrorOrJump = function(count) {
      return this.add('bindErrorOrJump', count);
    };

    CodeBlock.prototype.pushEnv = function() {
      return this.add('pushEnv');
    };

    CodeBlock.prototype.popEnv = function() {
      return this.add('popEnv');
    };

    CodeBlock.prototype.procedure = function() {
      return this.add('procedure');
    };

    CodeBlock.prototype.lexical = function(id) {
      return this.add('lexical', id);
    };

    CodeBlock.prototype.apply = function(count) {
      return this.add('apply', count);
    };

    CodeBlock.prototype.ref = function(name) {
      return this.add('ref', name);
    };

    CodeBlock.prototype.define = function(name) {
      return this.add('define', name);
    };

    CodeBlock.prototype.set = function(name) {
      return this.add('set', name);
    };

    CodeBlock.prototype.ifOrJump = function(count) {
      return this.add('ifOrJump', count);
    };

    CodeBlock.prototype.jump = function(count) {
      return this.add('jump', count);
    };

    CodeBlock.prototype.label = function(name) {
      var label;
      label = name instanceof LabelOpcode ? name : Opcode.make('label', name);
      this._addOpcode(label);
      return this;
    };

    return CodeBlock;

  })();

  Opcode.registerSingleton('}}', EndBlockOpcode = (function(_super) {

    __extends(EndBlockOpcode, _super);

    function EndBlockOpcode() {
      return EndBlockOpcode.__super__.constructor.apply(this, arguments);
    }

    EndBlockOpcode.prototype.toString = function() {
      return '[/block]';
    };

    return EndBlockOpcode;

  })(Opcode));

  Opcode.registerSingleton('{{', BlockOpcode = (function(_super) {

    __extends(BlockOpcode, _super);

    function BlockOpcode() {
      return BlockOpcode.__super__.constructor.apply(this, arguments);
    }

    BlockOpcode.prototype.run = function(frame) {
      var done, ip, list, opcode;
      list = [];
      frame.incIP();
      ip = frame.ip;
      done = false;
      while ((opcode = frame.current()) && !(opcode instanceof EndBlockOpcode)) {
        list.push(opcode);
        frame.incIP();
      }
      frame.push(new CodeBlock(list));
      return frame.incIP();
    };

    BlockOpcode.prototype.toString = function() {
      return '[block]';
    };

    return BlockOpcode;

  })(Opcode));

  module.exports = CodeBlock;

}).call(this);

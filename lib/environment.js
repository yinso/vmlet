// Generated by CoffeeScript 1.4.0
(function() {
  var Environment, Ref, loglet;

  Ref = require('./ref');

  loglet = require('loglet');

  Environment = (function() {

    function Environment(inner, prev) {
      this.inner = inner != null ? inner : {};
      this.prev = prev != null ? prev : null;
    }

    Environment.prototype.has = function(key) {
      if (this.inner.hasOwnProperty(key)) {
        return true;
      } else if (this.prev instanceof Environment) {
        return this.prev.has(key);
      } else {
        return false;
      }
    };

    Environment.prototype.get = function(key) {
      if (this.inner.hasOwnProperty(key)) {
        return this.inner[key];
      } else if (this.prev instanceof Environment) {
        return this.prev.get(key);
      } else {
        loglet.error(this);
        throw {
          error: 'Environment:invalid_identifier',
          name: key
        };
      }
    };

    Environment.prototype.define = function(key, val) {
      if (this.inner.hasOwnProperty(key)) {
        throw {
          error: 'duplicate_definition',
          name: key
        };
      } else {
        return this.inner[key] = val;
      }
    };

    Environment.prototype.undefine = function(key) {
      if (this.inner.hasOwnProperty(key)) {
        return delete this.inner[key];
      } else if (this.prev) {
        return this.prev.undefine(key);
      }
    };

    Environment.prototype.set = function(key, val) {
      if (this.inner.hasOwnProperty(key)) {
        return this.inner[key] = val;
      } else if (this.prev) {
        return this.prev.set(key, val);
      } else {
        throw {
          error: 'invalid_identifier',
          name: key
        };
      }
    };

    Environment.prototype.defineRef = function(key) {
      return this.define(key, new Ref(key));
    };

    Environment.prototype.newEnvFromParams = function(params) {
      var inner, newEnv, param, ref, refs, _i, _len;
      refs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = params.length; _i < _len; _i++) {
          param = params[_i];
          _results.push(new Ref(param));
        }
        return _results;
      })();
      inner = {};
      for (_i = 0, _len = refs.length; _i < _len; _i++) {
        ref = refs[_i];
        inner[ref.name] = ref;
      }
      newEnv = new Environment(inner, this);
      loglet.debug('Environment.newEnvFromParams', newEnv, refs, inner, params);
      return newEnv;
    };

    Environment.prototype.keys = function() {
      return Object.keys(this.inner);
    };

    Environment.prototype.show = function(level) {
      var key, tab, val, _ref;
      if (level == null) {
        level = 0;
      }
      tab = function() {
        var i;
        return ((function() {
          var _i, _results;
          _results = [];
          for (i = _i = 0; 0 <= level ? _i < level : _i > level; i = 0 <= level ? ++_i : --_i) {
            _results.push('  ');
          }
          return _results;
        })()).join('');
      };
      _ref = this.inner;
      for (key in _ref) {
        val = _ref[key];
        loglet.log(tab(), key, '=>', val);
      }
      if (this.prev) {
        return this.prev.show(level + 1);
      }
    };

    return Environment;

  })();

  module.exports = Environment;

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var AST, Environment, HashMap, loglet, _hashCode;

  AST = require('./ast');

  loglet = require('loglet');

  HashMap = require('./hashmap');

  _hashCode = function(str) {
    var char, i, val, _i, _ref;
    val = 0;
    for (i = _i = 0, _ref = str.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      char = str.charCodeAt(i);
      val = ((val << 5) - val) + char;
      val = val & val;
    }
    return val;
  };

  Environment = (function() {

    function Environment(prev) {
      this.prev = prev != null ? prev : null;
      this.inner = new HashMap({
        hashCode: function(v) {
          return v.hashCode();
        },
        equals: function(v, v1) {
          return v.equals(v1);
        }
      });
    }

    Environment.prototype.has = function(key) {
      if (this.inner.has(key)) {
        return true;
      } else if (this.prev instanceof Environment) {
        return this.prev.has(key);
      } else {
        return false;
      }
    };

    Environment.prototype.get = function(key) {
      if (this.inner.has(key)) {
        return this.inner.get(key);
      } else if (this.prev instanceof Environment) {
        return this.prev.get(key);
      } else {
        loglet.error(this);
        throw {
          error: 'Environment:invalid_identifier',
          name: key
        };
      }
    };

    Environment.prototype.define = function(key, val) {
      if (this.inner.has(key)) {
        throw {
          error: 'duplicate_definition',
          name: key
        };
      } else {
        this.inner.set(key, val);
        return val;
      }
    };

    Environment.prototype.undefine = function(key) {
      if (this.inner.has(key)) {
        return this.inner["delete"](key);
      } else if (this.prev) {
        return this.prev.undefine(key);
      }
    };

    Environment.prototype.set = function(key, val) {
      if (this.inner.has(key)) {
        return this.inner.set(key, val);
      } else if (this.prev) {
        return this.prev.set(key, val);
      } else {
        throw {
          error: 'invalid_identifier',
          name: key
        };
      }
    };

    Environment.prototype.show = function(level) {
      var key, tab, val, _ref;
      if (level == null) {
        level = 0;
      }
      tab = function() {
        var i;
        return ((function() {
          var _i, _results;
          _results = [];
          for (i = _i = 0; 0 <= level ? _i < level : _i > level; i = 0 <= level ? ++_i : --_i) {
            _results.push('  ');
          }
          return _results;
        })()).join('');
      };
      _ref = this.inner.keyVals();
      for (key in _ref) {
        val = _ref[key];
        loglet.log(tab(), key, '=>', val);
      }
      if (this.prev) {
        return this.prev.show(level + 1);
      }
    };

    return Environment;

  })();

  module.exports = Environment;

}).call(this);

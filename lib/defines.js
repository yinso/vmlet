// Generated by CoffeeScript 1.4.0
(function() {
  var AST, Env, TR, get, register, transform, _block, _body, _case, _define, _if, _member, _scalar, _switch, _toplevel, _trans, _try, _types, _value, _while;

  AST = require('./ast');

  Env = require('./environment');

  TR = require('./trace');

  _types = {};

  register = function(ast, trans) {
    if (_types.hasOwnProperty(ast.type)) {
      throw new Error("DEFINE.duplicate_type: " + ast.type);
    }
    return _types[ast.type] = trans;
  };

  get = function(ast) {
    if (_types.hasOwnProperty(ast.type())) {
      return _types[ast.type()];
    } else {
      throw new Error("DEFINE.invalid_type: " + (ast.type()));
    }
  };

  transform = function(ast) {
    var defines;
    defines = [];
    _trans(ast, defines);
    return defines;
  };

  _trans = function(ast, defines) {
    var proc;
    proc = get(ast);
    return proc(ast, defines);
  };

  _toplevel = function(ast, defines) {
    var i, item, _i, _len, _ref;
    console.log('DEFINES._toplevel', ast.body);
    _ref = (ast.body.type() === 'block' ? ast.body.items : [ast.body]);
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      item = _ref[i];
      if (item.type() === 'define') {
        if (item.value.type() === 'procedure') {
          defines.push(item);
        }
      }
    }
    return defines;
  };

  register(AST.get('toplevel'), _toplevel);

  register(AST.get('module'), _toplevel);

  _scalar = function(ast) {};

  register(AST.get('number'), _scalar);

  register(AST.get('string'), _scalar);

  register(AST.get('bool'), _scalar);

  register(AST.get('null'), _scalar);

  register(AST.get('unit'), _scalar);

  register(AST.get('symbol'), _scalar);

  register(AST.get('ref'), _scalar);

  register(AST.get('binary'), _scalar);

  register(AST.get('funcall'), _scalar);

  register(AST.get('taskcall'), _scalar);

  register(AST.get('import'), _scalar);

  register(AST.get('export'), _scalar);

  register(AST.get('break'), _scalar);

  register(AST.get('continue'), _scalar);

  _if = function(ast, defines) {
    _trans(ast.then, defines);
    return _trans(ast["else"], defines);
  };

  register(AST.get('if'), _if);

  _member = function(ast, defines) {
    return _trans(ast.head, defines);
  };

  register(AST.get('member'), _member);

  _body = function(ast, defines) {
    return _trans(ast.body, defines);
  };

  register(AST.get('procedure'), _body);

  register(AST.get('task'), _body);

  register(AST.get('catch'), _body);

  _block = function(ast, defines) {
    var i, item, _i, _len, _ref, _results;
    _ref = ast.items;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      item = _ref[i];
      _results.push(_trans(item, defines));
    }
    return _results;
  };

  register(AST.get('block'), _block);

  _value = function(ast, defines) {
    return _trans(ast.value, defines);
  };

  register(AST.get('return'), _value);

  register(AST.get('assign'), _value);

  _define = function(ast, defines) {
    _trans(ast.value, defines);
    if (defines.indexOf(ast) === -1) {
      return defines.push(ast);
    }
  };

  register(AST.get('define'), _define);

  register(AST.get('local'), _define);

  _try = function(ast, defines) {
    var c, _i, _len, _ref;
    _trans(ast.body, defines);
    _ref = ast.catches;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      _trans(c, defines);
    }
    if (ast["finally"]) {
      return _trans(ast["finally"], defines);
    }
  };

  register(AST.get('try'), _try);

  _while = function(ast, defines) {
    return _trans(ast.block, defines);
  };

  register(AST.get('while'), _while);

  _switch = function(ast, defines) {
    var c, _i, _len, _ref, _results;
    _ref = ast.cases;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      _results.push(_trans(c, defines));
    }
    return _results;
  };

  register(AST.get('switch'), _switch);

  _case = function(ast, defines) {
    return _trans(ast.exp, defines);
  };

  register(AST.get('case'), _case);

  register(AST.get('defaultCase'), _case);

  module.exports = {
    register: register,
    transform: transform
  };

}).call(this);
